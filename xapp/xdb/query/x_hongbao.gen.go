// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xapp/xdb/model"
)

func newXHongbao(db *gorm.DB, opts ...gen.DOOption) xHongbao {
	_xHongbao := xHongbao{}

	_xHongbao.xHongbaoDo.UseDB(db, opts...)
	_xHongbao.xHongbaoDo.UseModel(&model.XHongbao{})

	tableName := _xHongbao.xHongbaoDo.TableName()
	_xHongbao.ALL = field.NewAsterisk(tableName)
	_xHongbao.ID = field.NewInt32(tableName, "id")
	_xHongbao.SellerID = field.NewInt32(tableName, "seller_id")
	_xHongbao.RoomID = field.NewInt32(tableName, "room_id")
	_xHongbao.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_xHongbao.TotalCount = field.NewInt32(tableName, "total_count")
	_xHongbao.UsedAmount = field.NewFloat64(tableName, "used_amount")
	_xHongbao.UsedCount = field.NewInt32(tableName, "used_count")
	_xHongbao.Sender = field.NewString(tableName, "sender")
	_xHongbao.Memo = field.NewString(tableName, "memo")
	_xHongbao.CreateTime = field.NewTime(tableName, "create_time")

	_xHongbao.fillFieldMap()

	return _xHongbao
}

type xHongbao struct {
	xHongbaoDo

	ALL         field.Asterisk
	ID          field.Int32   // id
	SellerID    field.Int32   // 运营商
	RoomID      field.Int32   // 房间Id
	TotalAmount field.Float64 // 红包总金额
	TotalCount  field.Int32   // 红包个数
	UsedAmount  field.Float64 // 已领取金额
	UsedCount   field.Int32   // 已领取个数
	Sender      field.String  // 发送者
	Memo        field.String  // 备注
	CreateTime  field.Time    // 红包发送时间

	fieldMap map[string]field.Expr
}

func (x xHongbao) Table(newTableName string) *xHongbao {
	x.xHongbaoDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xHongbao) As(alias string) *xHongbao {
	x.xHongbaoDo.DO = *(x.xHongbaoDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xHongbao) updateTableName(table string) *xHongbao {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt32(table, "id")
	x.SellerID = field.NewInt32(table, "seller_id")
	x.RoomID = field.NewInt32(table, "room_id")
	x.TotalAmount = field.NewFloat64(table, "total_amount")
	x.TotalCount = field.NewInt32(table, "total_count")
	x.UsedAmount = field.NewFloat64(table, "used_amount")
	x.UsedCount = field.NewInt32(table, "used_count")
	x.Sender = field.NewString(table, "sender")
	x.Memo = field.NewString(table, "memo")
	x.CreateTime = field.NewTime(table, "create_time")

	x.fillFieldMap()

	return x
}

func (x *xHongbao) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xHongbao) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 10)
	x.fieldMap["id"] = x.ID
	x.fieldMap["seller_id"] = x.SellerID
	x.fieldMap["room_id"] = x.RoomID
	x.fieldMap["total_amount"] = x.TotalAmount
	x.fieldMap["total_count"] = x.TotalCount
	x.fieldMap["used_amount"] = x.UsedAmount
	x.fieldMap["used_count"] = x.UsedCount
	x.fieldMap["sender"] = x.Sender
	x.fieldMap["memo"] = x.Memo
	x.fieldMap["create_time"] = x.CreateTime
}

func (x xHongbao) clone(db *gorm.DB) xHongbao {
	x.xHongbaoDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xHongbao) replaceDB(db *gorm.DB) xHongbao {
	x.xHongbaoDo.ReplaceDB(db)
	return x
}

type xHongbaoDo struct{ gen.DO }

type IXHongbaoDo interface {
	gen.SubQuery
	Debug() IXHongbaoDo
	WithContext(ctx context.Context) IXHongbaoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXHongbaoDo
	WriteDB() IXHongbaoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXHongbaoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXHongbaoDo
	Not(conds ...gen.Condition) IXHongbaoDo
	Or(conds ...gen.Condition) IXHongbaoDo
	Select(conds ...field.Expr) IXHongbaoDo
	Where(conds ...gen.Condition) IXHongbaoDo
	Order(conds ...field.Expr) IXHongbaoDo
	Distinct(cols ...field.Expr) IXHongbaoDo
	Omit(cols ...field.Expr) IXHongbaoDo
	Join(table schema.Tabler, on ...field.Expr) IXHongbaoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXHongbaoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXHongbaoDo
	Group(cols ...field.Expr) IXHongbaoDo
	Having(conds ...gen.Condition) IXHongbaoDo
	Limit(limit int) IXHongbaoDo
	Offset(offset int) IXHongbaoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXHongbaoDo
	Unscoped() IXHongbaoDo
	Create(values ...*model.XHongbao) error
	CreateInBatches(values []*model.XHongbao, batchSize int) error
	Save(values ...*model.XHongbao) error
	First() (*model.XHongbao, error)
	Take() (*model.XHongbao, error)
	Last() (*model.XHongbao, error)
	Find() ([]*model.XHongbao, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XHongbao, err error)
	FindInBatches(result *[]*model.XHongbao, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XHongbao) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXHongbaoDo
	Assign(attrs ...field.AssignExpr) IXHongbaoDo
	Joins(fields ...field.RelationField) IXHongbaoDo
	Preload(fields ...field.RelationField) IXHongbaoDo
	FirstOrInit() (*model.XHongbao, error)
	FirstOrCreate() (*model.XHongbao, error)
	FindByPage(offset int, limit int) (result []*model.XHongbao, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXHongbaoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xHongbaoDo) Debug() IXHongbaoDo {
	return x.withDO(x.DO.Debug())
}

func (x xHongbaoDo) WithContext(ctx context.Context) IXHongbaoDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xHongbaoDo) ReadDB() IXHongbaoDo {
	return x.Clauses(dbresolver.Read)
}

func (x xHongbaoDo) WriteDB() IXHongbaoDo {
	return x.Clauses(dbresolver.Write)
}

func (x xHongbaoDo) Session(config *gorm.Session) IXHongbaoDo {
	return x.withDO(x.DO.Session(config))
}

func (x xHongbaoDo) Clauses(conds ...clause.Expression) IXHongbaoDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xHongbaoDo) Returning(value interface{}, columns ...string) IXHongbaoDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xHongbaoDo) Not(conds ...gen.Condition) IXHongbaoDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xHongbaoDo) Or(conds ...gen.Condition) IXHongbaoDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xHongbaoDo) Select(conds ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xHongbaoDo) Where(conds ...gen.Condition) IXHongbaoDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xHongbaoDo) Order(conds ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xHongbaoDo) Distinct(cols ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xHongbaoDo) Omit(cols ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xHongbaoDo) Join(table schema.Tabler, on ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xHongbaoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xHongbaoDo) RightJoin(table schema.Tabler, on ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xHongbaoDo) Group(cols ...field.Expr) IXHongbaoDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xHongbaoDo) Having(conds ...gen.Condition) IXHongbaoDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xHongbaoDo) Limit(limit int) IXHongbaoDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xHongbaoDo) Offset(offset int) IXHongbaoDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xHongbaoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXHongbaoDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xHongbaoDo) Unscoped() IXHongbaoDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xHongbaoDo) Create(values ...*model.XHongbao) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xHongbaoDo) CreateInBatches(values []*model.XHongbao, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xHongbaoDo) Save(values ...*model.XHongbao) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xHongbaoDo) First() (*model.XHongbao, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbao), nil
	}
}

func (x xHongbaoDo) Take() (*model.XHongbao, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbao), nil
	}
}

func (x xHongbaoDo) Last() (*model.XHongbao, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbao), nil
	}
}

func (x xHongbaoDo) Find() ([]*model.XHongbao, error) {
	result, err := x.DO.Find()
	return result.([]*model.XHongbao), err
}

func (x xHongbaoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XHongbao, err error) {
	buf := make([]*model.XHongbao, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xHongbaoDo) FindInBatches(result *[]*model.XHongbao, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xHongbaoDo) Attrs(attrs ...field.AssignExpr) IXHongbaoDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xHongbaoDo) Assign(attrs ...field.AssignExpr) IXHongbaoDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xHongbaoDo) Joins(fields ...field.RelationField) IXHongbaoDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xHongbaoDo) Preload(fields ...field.RelationField) IXHongbaoDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xHongbaoDo) FirstOrInit() (*model.XHongbao, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbao), nil
	}
}

func (x xHongbaoDo) FirstOrCreate() (*model.XHongbao, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbao), nil
	}
}

func (x xHongbaoDo) FindByPage(offset int, limit int) (result []*model.XHongbao, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xHongbaoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xHongbaoDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xHongbaoDo) Delete(models ...*model.XHongbao) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xHongbaoDo) withDO(do gen.Dao) *xHongbaoDo {
	x.DO = *do.(*gen.DO)
	return x
}
