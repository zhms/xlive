// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xapp/xdb/model"
)

func newXRobot(db *gorm.DB, opts ...gen.DOOption) xRobot {
	_xRobot := xRobot{}

	_xRobot.xRobotDo.UseDB(db, opts...)
	_xRobot.xRobotDo.UseModel(&model.XRobot{})

	tableName := _xRobot.xRobotDo.TableName()
	_xRobot.ALL = field.NewAsterisk(tableName)
	_xRobot.ID = field.NewInt32(tableName, "id")
	_xRobot.SellerID = field.NewInt32(tableName, "seller_id")
	_xRobot.Account = field.NewString(tableName, "account")
	_xRobot.State = field.NewInt32(tableName, "state")
	_xRobot.CreateTime = field.NewTime(tableName, "create_time")

	_xRobot.fillFieldMap()

	return _xRobot
}

type xRobot struct {
	xRobotDo

	ALL        field.Asterisk
	ID         field.Int32  // id
	SellerID   field.Int32  // 运营商
	Account    field.String // 账号
	State      field.Int32  // 状态 1离线,2在线
	CreateTime field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (x xRobot) Table(newTableName string) *xRobot {
	x.xRobotDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xRobot) As(alias string) *xRobot {
	x.xRobotDo.DO = *(x.xRobotDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xRobot) updateTableName(table string) *xRobot {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt32(table, "id")
	x.SellerID = field.NewInt32(table, "seller_id")
	x.Account = field.NewString(table, "account")
	x.State = field.NewInt32(table, "state")
	x.CreateTime = field.NewTime(table, "create_time")

	x.fillFieldMap()

	return x
}

func (x *xRobot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xRobot) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 5)
	x.fieldMap["id"] = x.ID
	x.fieldMap["seller_id"] = x.SellerID
	x.fieldMap["account"] = x.Account
	x.fieldMap["state"] = x.State
	x.fieldMap["create_time"] = x.CreateTime
}

func (x xRobot) clone(db *gorm.DB) xRobot {
	x.xRobotDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xRobot) replaceDB(db *gorm.DB) xRobot {
	x.xRobotDo.ReplaceDB(db)
	return x
}

type xRobotDo struct{ gen.DO }

type IXRobotDo interface {
	gen.SubQuery
	Debug() IXRobotDo
	WithContext(ctx context.Context) IXRobotDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXRobotDo
	WriteDB() IXRobotDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXRobotDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXRobotDo
	Not(conds ...gen.Condition) IXRobotDo
	Or(conds ...gen.Condition) IXRobotDo
	Select(conds ...field.Expr) IXRobotDo
	Where(conds ...gen.Condition) IXRobotDo
	Order(conds ...field.Expr) IXRobotDo
	Distinct(cols ...field.Expr) IXRobotDo
	Omit(cols ...field.Expr) IXRobotDo
	Join(table schema.Tabler, on ...field.Expr) IXRobotDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXRobotDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXRobotDo
	Group(cols ...field.Expr) IXRobotDo
	Having(conds ...gen.Condition) IXRobotDo
	Limit(limit int) IXRobotDo
	Offset(offset int) IXRobotDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXRobotDo
	Unscoped() IXRobotDo
	Create(values ...*model.XRobot) error
	CreateInBatches(values []*model.XRobot, batchSize int) error
	Save(values ...*model.XRobot) error
	First() (*model.XRobot, error)
	Take() (*model.XRobot, error)
	Last() (*model.XRobot, error)
	Find() ([]*model.XRobot, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XRobot, err error)
	FindInBatches(result *[]*model.XRobot, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XRobot) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXRobotDo
	Assign(attrs ...field.AssignExpr) IXRobotDo
	Joins(fields ...field.RelationField) IXRobotDo
	Preload(fields ...field.RelationField) IXRobotDo
	FirstOrInit() (*model.XRobot, error)
	FirstOrCreate() (*model.XRobot, error)
	FindByPage(offset int, limit int) (result []*model.XRobot, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXRobotDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xRobotDo) Debug() IXRobotDo {
	return x.withDO(x.DO.Debug())
}

func (x xRobotDo) WithContext(ctx context.Context) IXRobotDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xRobotDo) ReadDB() IXRobotDo {
	return x.Clauses(dbresolver.Read)
}

func (x xRobotDo) WriteDB() IXRobotDo {
	return x.Clauses(dbresolver.Write)
}

func (x xRobotDo) Session(config *gorm.Session) IXRobotDo {
	return x.withDO(x.DO.Session(config))
}

func (x xRobotDo) Clauses(conds ...clause.Expression) IXRobotDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xRobotDo) Returning(value interface{}, columns ...string) IXRobotDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xRobotDo) Not(conds ...gen.Condition) IXRobotDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xRobotDo) Or(conds ...gen.Condition) IXRobotDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xRobotDo) Select(conds ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xRobotDo) Where(conds ...gen.Condition) IXRobotDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xRobotDo) Order(conds ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xRobotDo) Distinct(cols ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xRobotDo) Omit(cols ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xRobotDo) Join(table schema.Tabler, on ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xRobotDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xRobotDo) RightJoin(table schema.Tabler, on ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xRobotDo) Group(cols ...field.Expr) IXRobotDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xRobotDo) Having(conds ...gen.Condition) IXRobotDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xRobotDo) Limit(limit int) IXRobotDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xRobotDo) Offset(offset int) IXRobotDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xRobotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXRobotDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xRobotDo) Unscoped() IXRobotDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xRobotDo) Create(values ...*model.XRobot) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xRobotDo) CreateInBatches(values []*model.XRobot, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xRobotDo) Save(values ...*model.XRobot) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xRobotDo) First() (*model.XRobot, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XRobot), nil
	}
}

func (x xRobotDo) Take() (*model.XRobot, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XRobot), nil
	}
}

func (x xRobotDo) Last() (*model.XRobot, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XRobot), nil
	}
}

func (x xRobotDo) Find() ([]*model.XRobot, error) {
	result, err := x.DO.Find()
	return result.([]*model.XRobot), err
}

func (x xRobotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XRobot, err error) {
	buf := make([]*model.XRobot, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xRobotDo) FindInBatches(result *[]*model.XRobot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xRobotDo) Attrs(attrs ...field.AssignExpr) IXRobotDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xRobotDo) Assign(attrs ...field.AssignExpr) IXRobotDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xRobotDo) Joins(fields ...field.RelationField) IXRobotDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xRobotDo) Preload(fields ...field.RelationField) IXRobotDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xRobotDo) FirstOrInit() (*model.XRobot, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XRobot), nil
	}
}

func (x xRobotDo) FirstOrCreate() (*model.XRobot, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XRobot), nil
	}
}

func (x xRobotDo) FindByPage(offset int, limit int) (result []*model.XRobot, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xRobotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xRobotDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xRobotDo) Delete(models ...*model.XRobot) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xRobotDo) withDO(do gen.Dao) *xRobotDo {
	x.DO = *do.(*gen.DO)
	return x
}
