// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xapp/xdb/model"
)

func newXChatDatum(db *gorm.DB, opts ...gen.DOOption) xChatDatum {
	_xChatDatum := xChatDatum{}

	_xChatDatum.xChatDatumDo.UseDB(db, opts...)
	_xChatDatum.xChatDatumDo.UseModel(&model.XChatDatum{})

	tableName := _xChatDatum.xChatDatumDo.TableName()
	_xChatDatum.ALL = field.NewAsterisk(tableName)
	_xChatDatum.ID = field.NewInt32(tableName, "id")
	_xChatDatum.SellerID = field.NewInt32(tableName, "seller_id")
	_xChatDatum.Account = field.NewString(tableName, "account")
	_xChatDatum.RoomID = field.NewInt32(tableName, "room_id")
	_xChatDatum.Content = field.NewString(tableName, "content")
	_xChatDatum.IP = field.NewString(tableName, "ip")
	_xChatDatum.IPLocation = field.NewString(tableName, "ip_location")
	_xChatDatum.State = field.NewInt32(tableName, "state")
	_xChatDatum.CreateTime = field.NewTime(tableName, "create_time")

	_xChatDatum.fillFieldMap()

	return _xChatDatum
}

type xChatDatum struct {
	xChatDatumDo

	ALL        field.Asterisk
	ID         field.Int32
	SellerID   field.Int32
	Account    field.String // 会员账号
	RoomID     field.Int32  // 房价id
	Content    field.String // 内容
	IP         field.String // ip
	IPLocation field.String
	State      field.Int32 // 状态 1待审核,2审核通过,3审核拒绝
	CreateTime field.Time  // 创建时间

	fieldMap map[string]field.Expr
}

func (x xChatDatum) Table(newTableName string) *xChatDatum {
	x.xChatDatumDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xChatDatum) As(alias string) *xChatDatum {
	x.xChatDatumDo.DO = *(x.xChatDatumDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xChatDatum) updateTableName(table string) *xChatDatum {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt32(table, "id")
	x.SellerID = field.NewInt32(table, "seller_id")
	x.Account = field.NewString(table, "account")
	x.RoomID = field.NewInt32(table, "room_id")
	x.Content = field.NewString(table, "content")
	x.IP = field.NewString(table, "ip")
	x.IPLocation = field.NewString(table, "ip_location")
	x.State = field.NewInt32(table, "state")
	x.CreateTime = field.NewTime(table, "create_time")

	x.fillFieldMap()

	return x
}

func (x *xChatDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xChatDatum) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 9)
	x.fieldMap["id"] = x.ID
	x.fieldMap["seller_id"] = x.SellerID
	x.fieldMap["account"] = x.Account
	x.fieldMap["room_id"] = x.RoomID
	x.fieldMap["content"] = x.Content
	x.fieldMap["ip"] = x.IP
	x.fieldMap["ip_location"] = x.IPLocation
	x.fieldMap["state"] = x.State
	x.fieldMap["create_time"] = x.CreateTime
}

func (x xChatDatum) clone(db *gorm.DB) xChatDatum {
	x.xChatDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xChatDatum) replaceDB(db *gorm.DB) xChatDatum {
	x.xChatDatumDo.ReplaceDB(db)
	return x
}

type xChatDatumDo struct{ gen.DO }

type IXChatDatumDo interface {
	gen.SubQuery
	Debug() IXChatDatumDo
	WithContext(ctx context.Context) IXChatDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXChatDatumDo
	WriteDB() IXChatDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXChatDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXChatDatumDo
	Not(conds ...gen.Condition) IXChatDatumDo
	Or(conds ...gen.Condition) IXChatDatumDo
	Select(conds ...field.Expr) IXChatDatumDo
	Where(conds ...gen.Condition) IXChatDatumDo
	Order(conds ...field.Expr) IXChatDatumDo
	Distinct(cols ...field.Expr) IXChatDatumDo
	Omit(cols ...field.Expr) IXChatDatumDo
	Join(table schema.Tabler, on ...field.Expr) IXChatDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXChatDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXChatDatumDo
	Group(cols ...field.Expr) IXChatDatumDo
	Having(conds ...gen.Condition) IXChatDatumDo
	Limit(limit int) IXChatDatumDo
	Offset(offset int) IXChatDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXChatDatumDo
	Unscoped() IXChatDatumDo
	Create(values ...*model.XChatDatum) error
	CreateInBatches(values []*model.XChatDatum, batchSize int) error
	Save(values ...*model.XChatDatum) error
	First() (*model.XChatDatum, error)
	Take() (*model.XChatDatum, error)
	Last() (*model.XChatDatum, error)
	Find() ([]*model.XChatDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XChatDatum, err error)
	FindInBatches(result *[]*model.XChatDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XChatDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXChatDatumDo
	Assign(attrs ...field.AssignExpr) IXChatDatumDo
	Joins(fields ...field.RelationField) IXChatDatumDo
	Preload(fields ...field.RelationField) IXChatDatumDo
	FirstOrInit() (*model.XChatDatum, error)
	FirstOrCreate() (*model.XChatDatum, error)
	FindByPage(offset int, limit int) (result []*model.XChatDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXChatDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xChatDatumDo) Debug() IXChatDatumDo {
	return x.withDO(x.DO.Debug())
}

func (x xChatDatumDo) WithContext(ctx context.Context) IXChatDatumDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xChatDatumDo) ReadDB() IXChatDatumDo {
	return x.Clauses(dbresolver.Read)
}

func (x xChatDatumDo) WriteDB() IXChatDatumDo {
	return x.Clauses(dbresolver.Write)
}

func (x xChatDatumDo) Session(config *gorm.Session) IXChatDatumDo {
	return x.withDO(x.DO.Session(config))
}

func (x xChatDatumDo) Clauses(conds ...clause.Expression) IXChatDatumDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xChatDatumDo) Returning(value interface{}, columns ...string) IXChatDatumDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xChatDatumDo) Not(conds ...gen.Condition) IXChatDatumDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xChatDatumDo) Or(conds ...gen.Condition) IXChatDatumDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xChatDatumDo) Select(conds ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xChatDatumDo) Where(conds ...gen.Condition) IXChatDatumDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xChatDatumDo) Order(conds ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xChatDatumDo) Distinct(cols ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xChatDatumDo) Omit(cols ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xChatDatumDo) Join(table schema.Tabler, on ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xChatDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xChatDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xChatDatumDo) Group(cols ...field.Expr) IXChatDatumDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xChatDatumDo) Having(conds ...gen.Condition) IXChatDatumDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xChatDatumDo) Limit(limit int) IXChatDatumDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xChatDatumDo) Offset(offset int) IXChatDatumDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xChatDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXChatDatumDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xChatDatumDo) Unscoped() IXChatDatumDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xChatDatumDo) Create(values ...*model.XChatDatum) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xChatDatumDo) CreateInBatches(values []*model.XChatDatum, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xChatDatumDo) Save(values ...*model.XChatDatum) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xChatDatumDo) First() (*model.XChatDatum, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChatDatum), nil
	}
}

func (x xChatDatumDo) Take() (*model.XChatDatum, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChatDatum), nil
	}
}

func (x xChatDatumDo) Last() (*model.XChatDatum, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChatDatum), nil
	}
}

func (x xChatDatumDo) Find() ([]*model.XChatDatum, error) {
	result, err := x.DO.Find()
	return result.([]*model.XChatDatum), err
}

func (x xChatDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XChatDatum, err error) {
	buf := make([]*model.XChatDatum, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xChatDatumDo) FindInBatches(result *[]*model.XChatDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xChatDatumDo) Attrs(attrs ...field.AssignExpr) IXChatDatumDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xChatDatumDo) Assign(attrs ...field.AssignExpr) IXChatDatumDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xChatDatumDo) Joins(fields ...field.RelationField) IXChatDatumDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xChatDatumDo) Preload(fields ...field.RelationField) IXChatDatumDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xChatDatumDo) FirstOrInit() (*model.XChatDatum, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChatDatum), nil
	}
}

func (x xChatDatumDo) FirstOrCreate() (*model.XChatDatum, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChatDatum), nil
	}
}

func (x xChatDatumDo) FindByPage(offset int, limit int) (result []*model.XChatDatum, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xChatDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xChatDatumDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xChatDatumDo) Delete(models ...*model.XChatDatum) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xChatDatumDo) withDO(do gen.Dao) *xChatDatumDo {
	x.DO = *do.(*gen.DO)
	return x
}
