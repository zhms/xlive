// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xapp/xdb/model"
)

func newXStatistic(db *gorm.DB, opts ...gen.DOOption) xStatistic {
	_xStatistic := xStatistic{}

	_xStatistic.xStatisticDo.UseDB(db, opts...)
	_xStatistic.xStatisticDo.UseModel(&model.XStatistic{})

	tableName := _xStatistic.xStatisticDo.TableName()
	_xStatistic.ALL = field.NewAsterisk(tableName)
	_xStatistic.ID = field.NewInt32(tableName, "id")
	_xStatistic.SellerID = field.NewInt32(tableName, "seller_id")
	_xStatistic.RecordType = field.NewString(tableName, "record_type")
	_xStatistic.CreateTime = field.NewTime(tableName, "create_time")
	_xStatistic.V1 = field.NewInt32(tableName, "v1")
	_xStatistic.V2 = field.NewInt32(tableName, "v2")

	_xStatistic.fillFieldMap()

	return _xStatistic
}

type xStatistic struct {
	xStatisticDo

	ALL        field.Asterisk
	ID         field.Int32
	SellerID   field.Int32
	RecordType field.String
	CreateTime field.Time
	V1         field.Int32
	V2         field.Int32

	fieldMap map[string]field.Expr
}

func (x xStatistic) Table(newTableName string) *xStatistic {
	x.xStatisticDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xStatistic) As(alias string) *xStatistic {
	x.xStatisticDo.DO = *(x.xStatisticDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xStatistic) updateTableName(table string) *xStatistic {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt32(table, "id")
	x.SellerID = field.NewInt32(table, "seller_id")
	x.RecordType = field.NewString(table, "record_type")
	x.CreateTime = field.NewTime(table, "create_time")
	x.V1 = field.NewInt32(table, "v1")
	x.V2 = field.NewInt32(table, "v2")

	x.fillFieldMap()

	return x
}

func (x *xStatistic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xStatistic) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 6)
	x.fieldMap["id"] = x.ID
	x.fieldMap["seller_id"] = x.SellerID
	x.fieldMap["record_type"] = x.RecordType
	x.fieldMap["create_time"] = x.CreateTime
	x.fieldMap["v1"] = x.V1
	x.fieldMap["v2"] = x.V2
}

func (x xStatistic) clone(db *gorm.DB) xStatistic {
	x.xStatisticDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xStatistic) replaceDB(db *gorm.DB) xStatistic {
	x.xStatisticDo.ReplaceDB(db)
	return x
}

type xStatisticDo struct{ gen.DO }

type IXStatisticDo interface {
	gen.SubQuery
	Debug() IXStatisticDo
	WithContext(ctx context.Context) IXStatisticDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXStatisticDo
	WriteDB() IXStatisticDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXStatisticDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXStatisticDo
	Not(conds ...gen.Condition) IXStatisticDo
	Or(conds ...gen.Condition) IXStatisticDo
	Select(conds ...field.Expr) IXStatisticDo
	Where(conds ...gen.Condition) IXStatisticDo
	Order(conds ...field.Expr) IXStatisticDo
	Distinct(cols ...field.Expr) IXStatisticDo
	Omit(cols ...field.Expr) IXStatisticDo
	Join(table schema.Tabler, on ...field.Expr) IXStatisticDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXStatisticDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXStatisticDo
	Group(cols ...field.Expr) IXStatisticDo
	Having(conds ...gen.Condition) IXStatisticDo
	Limit(limit int) IXStatisticDo
	Offset(offset int) IXStatisticDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXStatisticDo
	Unscoped() IXStatisticDo
	Create(values ...*model.XStatistic) error
	CreateInBatches(values []*model.XStatistic, batchSize int) error
	Save(values ...*model.XStatistic) error
	First() (*model.XStatistic, error)
	Take() (*model.XStatistic, error)
	Last() (*model.XStatistic, error)
	Find() ([]*model.XStatistic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XStatistic, err error)
	FindInBatches(result *[]*model.XStatistic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XStatistic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXStatisticDo
	Assign(attrs ...field.AssignExpr) IXStatisticDo
	Joins(fields ...field.RelationField) IXStatisticDo
	Preload(fields ...field.RelationField) IXStatisticDo
	FirstOrInit() (*model.XStatistic, error)
	FirstOrCreate() (*model.XStatistic, error)
	FindByPage(offset int, limit int) (result []*model.XStatistic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXStatisticDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xStatisticDo) Debug() IXStatisticDo {
	return x.withDO(x.DO.Debug())
}

func (x xStatisticDo) WithContext(ctx context.Context) IXStatisticDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xStatisticDo) ReadDB() IXStatisticDo {
	return x.Clauses(dbresolver.Read)
}

func (x xStatisticDo) WriteDB() IXStatisticDo {
	return x.Clauses(dbresolver.Write)
}

func (x xStatisticDo) Session(config *gorm.Session) IXStatisticDo {
	return x.withDO(x.DO.Session(config))
}

func (x xStatisticDo) Clauses(conds ...clause.Expression) IXStatisticDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xStatisticDo) Returning(value interface{}, columns ...string) IXStatisticDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xStatisticDo) Not(conds ...gen.Condition) IXStatisticDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xStatisticDo) Or(conds ...gen.Condition) IXStatisticDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xStatisticDo) Select(conds ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xStatisticDo) Where(conds ...gen.Condition) IXStatisticDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xStatisticDo) Order(conds ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xStatisticDo) Distinct(cols ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xStatisticDo) Omit(cols ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xStatisticDo) Join(table schema.Tabler, on ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xStatisticDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xStatisticDo) RightJoin(table schema.Tabler, on ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xStatisticDo) Group(cols ...field.Expr) IXStatisticDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xStatisticDo) Having(conds ...gen.Condition) IXStatisticDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xStatisticDo) Limit(limit int) IXStatisticDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xStatisticDo) Offset(offset int) IXStatisticDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xStatisticDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXStatisticDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xStatisticDo) Unscoped() IXStatisticDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xStatisticDo) Create(values ...*model.XStatistic) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xStatisticDo) CreateInBatches(values []*model.XStatistic, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xStatisticDo) Save(values ...*model.XStatistic) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xStatisticDo) First() (*model.XStatistic, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XStatistic), nil
	}
}

func (x xStatisticDo) Take() (*model.XStatistic, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XStatistic), nil
	}
}

func (x xStatisticDo) Last() (*model.XStatistic, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XStatistic), nil
	}
}

func (x xStatisticDo) Find() ([]*model.XStatistic, error) {
	result, err := x.DO.Find()
	return result.([]*model.XStatistic), err
}

func (x xStatisticDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XStatistic, err error) {
	buf := make([]*model.XStatistic, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xStatisticDo) FindInBatches(result *[]*model.XStatistic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xStatisticDo) Attrs(attrs ...field.AssignExpr) IXStatisticDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xStatisticDo) Assign(attrs ...field.AssignExpr) IXStatisticDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xStatisticDo) Joins(fields ...field.RelationField) IXStatisticDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xStatisticDo) Preload(fields ...field.RelationField) IXStatisticDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xStatisticDo) FirstOrInit() (*model.XStatistic, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XStatistic), nil
	}
}

func (x xStatisticDo) FirstOrCreate() (*model.XStatistic, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XStatistic), nil
	}
}

func (x xStatisticDo) FindByPage(offset int, limit int) (result []*model.XStatistic, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xStatisticDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xStatisticDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xStatisticDo) Delete(models ...*model.XStatistic) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xStatisticDo) withDO(do gen.Dao) *xStatisticDo {
	x.DO = *do.(*gen.DO)
	return x
}
