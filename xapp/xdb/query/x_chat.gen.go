// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xapp/xdb/model"
)

func newXChat(db *gorm.DB, opts ...gen.DOOption) xChat {
	_xChat := xChat{}

	_xChat.xChatDo.UseDB(db, opts...)
	_xChat.xChatDo.UseModel(&model.XChat{})

	tableName := _xChat.xChatDo.TableName()
	_xChat.ALL = field.NewAsterisk(tableName)
	_xChat.ID = field.NewInt32(tableName, "id")
	_xChat.SellerID = field.NewInt32(tableName, "seller_id")
	_xChat.Account = field.NewString(tableName, "account")
	_xChat.RoomID = field.NewInt32(tableName, "room_id")
	_xChat.Content = field.NewString(tableName, "content")
	_xChat.IP = field.NewString(tableName, "ip")
	_xChat.IPLocation = field.NewString(tableName, "ip_location")
	_xChat.State = field.NewInt32(tableName, "state")
	_xChat.CreateTime = field.NewTime(tableName, "create_time")

	_xChat.fillFieldMap()

	return _xChat
}

type xChat struct {
	xChatDo

	ALL        field.Asterisk
	ID         field.Int32
	SellerID   field.Int32
	Account    field.String // 会员账号
	RoomID     field.Int32  // 房价id
	Content    field.String // 内容
	IP         field.String // ip
	IPLocation field.String
	State      field.Int32 // 状态 1待审核,2审核通过,3审核拒绝
	CreateTime field.Time  // 创建时间

	fieldMap map[string]field.Expr
}

func (x xChat) Table(newTableName string) *xChat {
	x.xChatDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xChat) As(alias string) *xChat {
	x.xChatDo.DO = *(x.xChatDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xChat) updateTableName(table string) *xChat {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt32(table, "id")
	x.SellerID = field.NewInt32(table, "seller_id")
	x.Account = field.NewString(table, "account")
	x.RoomID = field.NewInt32(table, "room_id")
	x.Content = field.NewString(table, "content")
	x.IP = field.NewString(table, "ip")
	x.IPLocation = field.NewString(table, "ip_location")
	x.State = field.NewInt32(table, "state")
	x.CreateTime = field.NewTime(table, "create_time")

	x.fillFieldMap()

	return x
}

func (x *xChat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xChat) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 9)
	x.fieldMap["id"] = x.ID
	x.fieldMap["seller_id"] = x.SellerID
	x.fieldMap["account"] = x.Account
	x.fieldMap["room_id"] = x.RoomID
	x.fieldMap["content"] = x.Content
	x.fieldMap["ip"] = x.IP
	x.fieldMap["ip_location"] = x.IPLocation
	x.fieldMap["state"] = x.State
	x.fieldMap["create_time"] = x.CreateTime
}

func (x xChat) clone(db *gorm.DB) xChat {
	x.xChatDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xChat) replaceDB(db *gorm.DB) xChat {
	x.xChatDo.ReplaceDB(db)
	return x
}

type xChatDo struct{ gen.DO }

type IXChatDo interface {
	gen.SubQuery
	Debug() IXChatDo
	WithContext(ctx context.Context) IXChatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXChatDo
	WriteDB() IXChatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXChatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXChatDo
	Not(conds ...gen.Condition) IXChatDo
	Or(conds ...gen.Condition) IXChatDo
	Select(conds ...field.Expr) IXChatDo
	Where(conds ...gen.Condition) IXChatDo
	Order(conds ...field.Expr) IXChatDo
	Distinct(cols ...field.Expr) IXChatDo
	Omit(cols ...field.Expr) IXChatDo
	Join(table schema.Tabler, on ...field.Expr) IXChatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXChatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXChatDo
	Group(cols ...field.Expr) IXChatDo
	Having(conds ...gen.Condition) IXChatDo
	Limit(limit int) IXChatDo
	Offset(offset int) IXChatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXChatDo
	Unscoped() IXChatDo
	Create(values ...*model.XChat) error
	CreateInBatches(values []*model.XChat, batchSize int) error
	Save(values ...*model.XChat) error
	First() (*model.XChat, error)
	Take() (*model.XChat, error)
	Last() (*model.XChat, error)
	Find() ([]*model.XChat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XChat, err error)
	FindInBatches(result *[]*model.XChat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XChat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXChatDo
	Assign(attrs ...field.AssignExpr) IXChatDo
	Joins(fields ...field.RelationField) IXChatDo
	Preload(fields ...field.RelationField) IXChatDo
	FirstOrInit() (*model.XChat, error)
	FirstOrCreate() (*model.XChat, error)
	FindByPage(offset int, limit int) (result []*model.XChat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXChatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xChatDo) Debug() IXChatDo {
	return x.withDO(x.DO.Debug())
}

func (x xChatDo) WithContext(ctx context.Context) IXChatDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xChatDo) ReadDB() IXChatDo {
	return x.Clauses(dbresolver.Read)
}

func (x xChatDo) WriteDB() IXChatDo {
	return x.Clauses(dbresolver.Write)
}

func (x xChatDo) Session(config *gorm.Session) IXChatDo {
	return x.withDO(x.DO.Session(config))
}

func (x xChatDo) Clauses(conds ...clause.Expression) IXChatDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xChatDo) Returning(value interface{}, columns ...string) IXChatDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xChatDo) Not(conds ...gen.Condition) IXChatDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xChatDo) Or(conds ...gen.Condition) IXChatDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xChatDo) Select(conds ...field.Expr) IXChatDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xChatDo) Where(conds ...gen.Condition) IXChatDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xChatDo) Order(conds ...field.Expr) IXChatDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xChatDo) Distinct(cols ...field.Expr) IXChatDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xChatDo) Omit(cols ...field.Expr) IXChatDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xChatDo) Join(table schema.Tabler, on ...field.Expr) IXChatDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xChatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXChatDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xChatDo) RightJoin(table schema.Tabler, on ...field.Expr) IXChatDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xChatDo) Group(cols ...field.Expr) IXChatDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xChatDo) Having(conds ...gen.Condition) IXChatDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xChatDo) Limit(limit int) IXChatDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xChatDo) Offset(offset int) IXChatDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xChatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXChatDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xChatDo) Unscoped() IXChatDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xChatDo) Create(values ...*model.XChat) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xChatDo) CreateInBatches(values []*model.XChat, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xChatDo) Save(values ...*model.XChat) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xChatDo) First() (*model.XChat, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChat), nil
	}
}

func (x xChatDo) Take() (*model.XChat, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChat), nil
	}
}

func (x xChatDo) Last() (*model.XChat, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChat), nil
	}
}

func (x xChatDo) Find() ([]*model.XChat, error) {
	result, err := x.DO.Find()
	return result.([]*model.XChat), err
}

func (x xChatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XChat, err error) {
	buf := make([]*model.XChat, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xChatDo) FindInBatches(result *[]*model.XChat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xChatDo) Attrs(attrs ...field.AssignExpr) IXChatDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xChatDo) Assign(attrs ...field.AssignExpr) IXChatDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xChatDo) Joins(fields ...field.RelationField) IXChatDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xChatDo) Preload(fields ...field.RelationField) IXChatDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xChatDo) FirstOrInit() (*model.XChat, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChat), nil
	}
}

func (x xChatDo) FirstOrCreate() (*model.XChat, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XChat), nil
	}
}

func (x xChatDo) FindByPage(offset int, limit int) (result []*model.XChat, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xChatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xChatDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xChatDo) Delete(models ...*model.XChat) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xChatDo) withDO(do gen.Dao) *xChatDo {
	x.DO = *do.(*gen.DO)
	return x
}
