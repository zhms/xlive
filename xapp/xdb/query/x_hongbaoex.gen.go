// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xapp/xdb/model"
)

func newXHongbaoex(db *gorm.DB, opts ...gen.DOOption) xHongbaoex {
	_xHongbaoex := xHongbaoex{}

	_xHongbaoex.xHongbaoexDo.UseDB(db, opts...)
	_xHongbaoex.xHongbaoexDo.UseModel(&model.XHongbaoex{})

	tableName := _xHongbaoex.xHongbaoexDo.TableName()
	_xHongbaoex.ALL = field.NewAsterisk(tableName)
	_xHongbaoex.ID = field.NewInt32(tableName, "id")
	_xHongbaoex.SellerID = field.NewInt32(tableName, "seller_id")
	_xHongbaoex.HongbaoID = field.NewInt32(tableName, "hongbao_id")
	_xHongbaoex.Account = field.NewString(tableName, "account")
	_xHongbaoex.Amount = field.NewFloat64(tableName, "amount")
	_xHongbaoex.CreateTime = field.NewTime(tableName, "create_time")

	_xHongbaoex.fillFieldMap()

	return _xHongbaoex
}

type xHongbaoex struct {
	xHongbaoexDo

	ALL        field.Asterisk
	ID         field.Int32
	SellerID   field.Int32
	HongbaoID  field.Int32
	Account    field.String
	Amount     field.Float64
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (x xHongbaoex) Table(newTableName string) *xHongbaoex {
	x.xHongbaoexDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xHongbaoex) As(alias string) *xHongbaoex {
	x.xHongbaoexDo.DO = *(x.xHongbaoexDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xHongbaoex) updateTableName(table string) *xHongbaoex {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt32(table, "id")
	x.SellerID = field.NewInt32(table, "seller_id")
	x.HongbaoID = field.NewInt32(table, "hongbao_id")
	x.Account = field.NewString(table, "account")
	x.Amount = field.NewFloat64(table, "amount")
	x.CreateTime = field.NewTime(table, "create_time")

	x.fillFieldMap()

	return x
}

func (x *xHongbaoex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xHongbaoex) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 6)
	x.fieldMap["id"] = x.ID
	x.fieldMap["seller_id"] = x.SellerID
	x.fieldMap["hongbao_id"] = x.HongbaoID
	x.fieldMap["account"] = x.Account
	x.fieldMap["amount"] = x.Amount
	x.fieldMap["create_time"] = x.CreateTime
}

func (x xHongbaoex) clone(db *gorm.DB) xHongbaoex {
	x.xHongbaoexDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xHongbaoex) replaceDB(db *gorm.DB) xHongbaoex {
	x.xHongbaoexDo.ReplaceDB(db)
	return x
}

type xHongbaoexDo struct{ gen.DO }

type IXHongbaoexDo interface {
	gen.SubQuery
	Debug() IXHongbaoexDo
	WithContext(ctx context.Context) IXHongbaoexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXHongbaoexDo
	WriteDB() IXHongbaoexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXHongbaoexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXHongbaoexDo
	Not(conds ...gen.Condition) IXHongbaoexDo
	Or(conds ...gen.Condition) IXHongbaoexDo
	Select(conds ...field.Expr) IXHongbaoexDo
	Where(conds ...gen.Condition) IXHongbaoexDo
	Order(conds ...field.Expr) IXHongbaoexDo
	Distinct(cols ...field.Expr) IXHongbaoexDo
	Omit(cols ...field.Expr) IXHongbaoexDo
	Join(table schema.Tabler, on ...field.Expr) IXHongbaoexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXHongbaoexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXHongbaoexDo
	Group(cols ...field.Expr) IXHongbaoexDo
	Having(conds ...gen.Condition) IXHongbaoexDo
	Limit(limit int) IXHongbaoexDo
	Offset(offset int) IXHongbaoexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXHongbaoexDo
	Unscoped() IXHongbaoexDo
	Create(values ...*model.XHongbaoex) error
	CreateInBatches(values []*model.XHongbaoex, batchSize int) error
	Save(values ...*model.XHongbaoex) error
	First() (*model.XHongbaoex, error)
	Take() (*model.XHongbaoex, error)
	Last() (*model.XHongbaoex, error)
	Find() ([]*model.XHongbaoex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XHongbaoex, err error)
	FindInBatches(result *[]*model.XHongbaoex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XHongbaoex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXHongbaoexDo
	Assign(attrs ...field.AssignExpr) IXHongbaoexDo
	Joins(fields ...field.RelationField) IXHongbaoexDo
	Preload(fields ...field.RelationField) IXHongbaoexDo
	FirstOrInit() (*model.XHongbaoex, error)
	FirstOrCreate() (*model.XHongbaoex, error)
	FindByPage(offset int, limit int) (result []*model.XHongbaoex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXHongbaoexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xHongbaoexDo) Debug() IXHongbaoexDo {
	return x.withDO(x.DO.Debug())
}

func (x xHongbaoexDo) WithContext(ctx context.Context) IXHongbaoexDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xHongbaoexDo) ReadDB() IXHongbaoexDo {
	return x.Clauses(dbresolver.Read)
}

func (x xHongbaoexDo) WriteDB() IXHongbaoexDo {
	return x.Clauses(dbresolver.Write)
}

func (x xHongbaoexDo) Session(config *gorm.Session) IXHongbaoexDo {
	return x.withDO(x.DO.Session(config))
}

func (x xHongbaoexDo) Clauses(conds ...clause.Expression) IXHongbaoexDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xHongbaoexDo) Returning(value interface{}, columns ...string) IXHongbaoexDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xHongbaoexDo) Not(conds ...gen.Condition) IXHongbaoexDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xHongbaoexDo) Or(conds ...gen.Condition) IXHongbaoexDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xHongbaoexDo) Select(conds ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xHongbaoexDo) Where(conds ...gen.Condition) IXHongbaoexDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xHongbaoexDo) Order(conds ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xHongbaoexDo) Distinct(cols ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xHongbaoexDo) Omit(cols ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xHongbaoexDo) Join(table schema.Tabler, on ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xHongbaoexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xHongbaoexDo) RightJoin(table schema.Tabler, on ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xHongbaoexDo) Group(cols ...field.Expr) IXHongbaoexDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xHongbaoexDo) Having(conds ...gen.Condition) IXHongbaoexDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xHongbaoexDo) Limit(limit int) IXHongbaoexDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xHongbaoexDo) Offset(offset int) IXHongbaoexDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xHongbaoexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXHongbaoexDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xHongbaoexDo) Unscoped() IXHongbaoexDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xHongbaoexDo) Create(values ...*model.XHongbaoex) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xHongbaoexDo) CreateInBatches(values []*model.XHongbaoex, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xHongbaoexDo) Save(values ...*model.XHongbaoex) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xHongbaoexDo) First() (*model.XHongbaoex, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbaoex), nil
	}
}

func (x xHongbaoexDo) Take() (*model.XHongbaoex, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbaoex), nil
	}
}

func (x xHongbaoexDo) Last() (*model.XHongbaoex, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbaoex), nil
	}
}

func (x xHongbaoexDo) Find() ([]*model.XHongbaoex, error) {
	result, err := x.DO.Find()
	return result.([]*model.XHongbaoex), err
}

func (x xHongbaoexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XHongbaoex, err error) {
	buf := make([]*model.XHongbaoex, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xHongbaoexDo) FindInBatches(result *[]*model.XHongbaoex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xHongbaoexDo) Attrs(attrs ...field.AssignExpr) IXHongbaoexDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xHongbaoexDo) Assign(attrs ...field.AssignExpr) IXHongbaoexDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xHongbaoexDo) Joins(fields ...field.RelationField) IXHongbaoexDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xHongbaoexDo) Preload(fields ...field.RelationField) IXHongbaoexDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xHongbaoexDo) FirstOrInit() (*model.XHongbaoex, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbaoex), nil
	}
}

func (x xHongbaoexDo) FirstOrCreate() (*model.XHongbaoex, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XHongbaoex), nil
	}
}

func (x xHongbaoexDo) FindByPage(offset int, limit int) (result []*model.XHongbaoex, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xHongbaoexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xHongbaoexDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xHongbaoexDo) Delete(models ...*model.XHongbaoex) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xHongbaoexDo) withDO(do gen.Dao) *xHongbaoexDo {
	x.DO = *do.(*gen.DO)
	return x
}
