import { NIMCommonError, NIMStrAnyObj } from '../types';
/**
 * 聊天室成员类型
 *
 * 聊天室成员分为固定成员和游客两种。固定成员又分为房主、管理员、普通成员和受限成员四种。禁言用户和拉黑用户都属于受限用户。
 * - `'owner'` (房主)
 * - `'manager'` (管理员)
 * - `'restricted'` (受限制, 被拉黑或者禁言)
 * - `'unset'` (未设置)
 * - `'common'` (普通成员)
 * - `'guest'` (游客)
 * - `'anonymous'` (匿名非注册用户，非云信注册用户)
 */
export declare type NIMChatroomMemberType = 'owner' | 'manager' | 'restricted' | 'unset' | 'common' | 'guest' | 'anonymous';
export interface NIMChatroomMember {
    /**
     * 账号
     */
    account: string;
    /**
     * 聊天室内的昵称
     */
    nick: string;
    /**
     * 聊天室内的头像
     */
    avatar: string;
    /**
     * 聊天室成员类型
     */
    type: NIMChatroomMemberType;
    /**
     * 是否在线, 只有固定成员才能离线, 对游客而言只能是在线
     */
    online: boolean;
    /**
     * 是否被临时禁言
     */
    tempMuted: boolean;
    /**
     * 临时禁言剩余时长
     */
    tempMuteDuration: number;
    /**
     * 进入聊天室的时间, 如果离线, 无该字段
     */
    enterTime?: number;
    /**
     * 第三方扩展字段
     */
    custom?: string;
}
export interface NIMChatroomUpdateMemberInfoOptions {
    /**
     * 待更新的成员信息
     */
    member: {
        /**
         * 聊天室内的昵称
         */
        nick?: string;
        /**
         * 聊天室内的头像
         */
        avator?: string;
        /**
         * 第三方扩展字段
         */
        custom?: string;
    };
    /**
     * 是否需要下发对应的通知消息
     */
    needNotify: boolean;
    /**
     * 对应的通知消息的扩展字段
     */
    custom?: string;
    /**
     * 用户配置的对某些资料内容另外的反垃圾的业务ID
     */
    antiSpamBusinessId?: string;
    /**
     * 可选，默认false，是否支持nick,avator和custom字段的持久化（固定成员有效）
     */
    needSave?: boolean;
}
export interface NIMChatroomUpdateCoordinateOptions extends NIMChatroomCoordinate {
    done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
        coordinateReq: NIMChatroomCoordinate;
    }) => void;
}
export interface NIMChatroomCoordinate {
    /**
     * 坐标x,非必传,空间消息专用
     */
    x?: number;
    /**
     * 坐标y,非必传,空间消息专用
     */
    y?: number;
    /**
     * 坐标z,非必传,空间消息专用,以上三个参数如果有任一缺少则初始化不会带上坐标信息
     */
    z?: number;
    /**
     * 订阅的消息的距离
     */
    distance?: number;
}
export interface NIMChatroomMemberInterface {
    /**
     * 更新自己在聊天室内的信息
     */
    updateMyChatroomMemberInfo(_options: {
        updateMemeberInfo: NIMChatroomUpdateMemberInfoOptions;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomUpdateMemberInfoOptions) => void;
    }): void;
    /**
     * 获取聊天室成员列表
     */
    getChatroomMembers(_options: {
        /**
         * 是否是游客
         */
        guest: boolean;
        /**
         * 是否仅查询在线成员。该参数仅当 guest = false 时有效
         */
        onlyOnline?: boolean;
        /**
         * 始时间，分页用；逆序查询该时间之后的成员列表
         * - 第一次不填，默认为0代表当前服务器时间，即获取第一页
         * - 第二页及之后，填上一页最后一个成员的`updateTime`
         */
        time?: number;
        /**
         * 分页用, 默认 100
         */
        limit?: number;
        /**
         * 回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
    /**
     * 根据标签获取聊天室成员列表
     */
    getChatroomMembersByTag(_options: {
        /**
         * 标签，获取带有这个标签的成员
         */
        tag: string;
        /**
         * 始时间，分页用；逆序查询该时间之后的成员列表
         * - 第一次不填，默认为0代表当前服务器时间，即获取第一页
         * - 第二页及之后，填上一页最后一个成员的`enterTime`
         */
        time?: number;
        /**
         * 分页用, 默认 100
         */
        limit?: number;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
    /**
     * 获取聊天室成员信息。每次最多获取 20 个账户信息
     */
    getChatroomMembersInfo(_options: {
        accounts: Array<string>;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
    /**
     * 设置成员为聊天室成员身份。设置后，聊天室内成员收到通知消息，其 attach.type 为以下之一:
     * <ul>
     * <li>addManager 设置管理员</li>
     * <li>removeManager 移除管理员</li>
     * <li>addCommon 设置固定成员</li>
     * <li>removeCommon 移除固定成员</li>
     * <li>blackMember 拉黑</li>
     * <li>unblackMember 解除拉黑</li>
     * <li>gagMember 禁言</li>
     * <li>ungagMember 解除禁言</li>
     * </ul>
     *
     * 聊天室共有以下6类身份：
     * <ul>
     * <li>创建者</li>
     * <li>管理员</li>
     * <li>普通成员</li>
     * <li>黑名单用户</li>
     * <li>禁言用户</li>
     * <li>游客</li>
     * </ul>
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomMemberInterface.markChatroomManager} 设置聊天室管理员</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomCommonMember} 设置聊天室固定成员</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomBlacklist} 设置聊天室黑名单</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomGaglist} 设置聊天室禁言名单</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomIdentity} 设置聊天室成员身份</li>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/DY1NTQwMDU?platform=server">管理聊天室用户角色</a></li>
     * </ul>
     */
    markChatroomIdentity(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 待设置的身份，如果不是以下身份则默认设置为普通成员
         * - `'manager'` (管理员)
         * - `'common'` (普通成员)
         * - `'black'` (拉黑)
         * - `'mute'` (禁言)
         */
        identity: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    /**
     * <ul>
     * <li>仅聊天室创建者有权限设置管理员</li>
     * <li>设置后，聊天室内成员收到 attach.type === 'addManager' 的通知消息</li>
     * <li>解除管理员身份时，聊天室成员收到 attach.type === 'removeManager'的通知消息</li>
     * </ul>
     *
     * 聊天室共有以下6类身份：
     * <ul>
     * <li>创建者</li>
     * <li>管理员</li>
     * <li>普通成员</li>
     * <li>黑名单用户</li>
     * <li>禁言用户</li>
     * <li>游客</li>
     * </ul>
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomMemberInterface.markChatroomManager} 设置聊天室管理员</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomCommonMember} 设置聊天室固定成员</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomBlacklist} 设置聊天室黑名单</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomGaglist} 设置聊天室禁言名单</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomIdentity} 设置聊天室成员身份</li>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/DY1NTQwMDU?platform=server">管理聊天室用户角色</a></li>
     * </ul>
     */
    markChatroomManager(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    /**
     * <ul>
     * <li>设置成员为聊天室固定成员。设置后，聊天室内成员收到 attach.type === 'addCommon' 的通知消息</li>
     * <li>解除固定成员身份时，聊天室成员收到 attach.type === 'removeCommon'的通知消息</li>
     * </ul>
     *
     * 聊天室共有以下6类身份：
     * <ul>
     * <li>创建者</li>
     * <li>管理员</li>
     * <li>普通成员</li>
     * <li>黑名单用户</li>
     * <li>禁言用户</li>
     * <li>游客</li>
     * </ul>
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomMemberInterface.markChatroomManager} 设置聊天室管理员</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomCommonMember} 设置聊天室固定成员</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomBlacklist} 设置聊天室黑名单</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomGaglist} 设置聊天室禁言名单</li>
     * <li>{@link NIMChatroomMemberInterface.markChatroomIdentity} 设置聊天室成员身份</li>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/DY1NTQwMDU?platform=server">管理聊天室用户角色</a></li>
     * </ul>
     */
    markChatroomCommonMember(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 等级,默认0
         */
        level?: number;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    /**
     * 设置聊天室黑名单
     * <ul>
     * <li>被拉黑后，所有聊天室成员会收到类型为 attach.type === 'blackMember' 的聊天室通知消息。</li>
     * <li>解除拉黑后，所有聊天室成员会收到类型为 attach.type === 'unblackMember' 的聊天室通知消息。</li>
     * <li>黑名单用户收到 ondisconnect 回调，回调的 code = ‘kicked'， reason = 'blacked'</li>
     * <li>黑名单用户无法进入聊天室</li>
     * </ul>
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * <li>{@link NIMChatroomGetInstanceOptions.ondisconnect}</li>
     * </ul>
     */
    markChatroomBlacklist(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    /**
     * 设置聊天室禁言名单
     *
     * <ul>
     * <li>被禁言后，所有聊天室成员会收到类型为 attach.type === 'gagMember' 的聊天室通知消息。</li>
     * <li>解除禁言后，所有聊天室成员会收到类型为 attach.type === 'ungagMember' 的聊天室通知消息。</li>
     * <li>禁言名单用户无法发送消息</li>
     * </ul>
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * </ul>
     */
    markChatroomGaglist(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    /**
     * 踢聊天室成员。
     * <ul>
     * <li>当有人被踢出聊天室时，所有聊天室成员会收到类型为 attach.type === 'kickMember' 的聊天室通知消息。</li>
     * <li>被踢出者收到 ondisconnect 回调，回调的 code = ‘kicked'</li>
     * </ul>
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * <li>{@link NIMChatroomGetInstanceOptions.ondisconnect}</li>
     * </ul>
     */
    kickChatroomMember(_options: {
        /**
         * 被踢账号
         */
        account: string;
        /**
         * 自定义信息。推荐使用JSON格式构建, 非JSON格式的话, Web端会正常接收, 但是会被其它端丢弃
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            account: string;
        }) => void;
    }): void;
    /**
     * 设置聊天室临时禁言。如果 needNotify === true，则聊天室内成员会收到 attach.type === addTempMute 的通知消息
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * <li>{@link NIMChatroomMemberInterface.updateTagMembersTempMute}</li>
     * </ul>
     */
    updateChatroomMemberTempMute(_options: {
        /**
         * 帐号
         */
        account: string;
        /**
         * 禁言时长，单位秒，传0表示解除禁言
         */
        duration: number;
        /**
         * 是否需要下发对应的通知消息
         */
        needNotify: boolean;
        /**
         * 对应的通知消息的扩展字段
         */
        custom?: string;
        /**
         * 回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 更新坐标
     */
    updateCoordinate(_options: NIMChatroomUpdateCoordinateOptions): void;
    /**
     * 根据标签设置聊天室成员临时禁言。如果 needNotify === true，则聊天室内成员会收到 attach.type === addTempMuteTag 的通知消息
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * <li>{@link NIMChatroomMemberInterface.updateChatroomMemberTempMute}</li>
     * </ul>
     */
    updateTagMembersTempMute(_options: {
        /**
         * 禁言的tag
         */
        tag: string;
        /**
         * 禁言时长，单位秒，传0表示解除禁言
         */
        duration: number;
        /**
         * 是否需要下发对应的通知消息
         */
        needNotify: boolean;
        /**
         * 通知消息广播的目标标签，默认是`options.tag`
         */
        notifyTargetTags?: string;
        /**
         * 对应的通知消息的扩展字段
         */
        custom?: string;
        /**
         * 回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 查询某个标签下的在线人数
     */
    getChatroomMemberCountByTag(_options: {
        tag: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
}
