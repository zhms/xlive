import { NIMChatroomGetInstanceOptions, NIMChatRoomInfo, NIMUpdateChatroomOptions } from './types';
import { NIMChatroomMessageInterface, NIMChatroomMessage, NIMChatroomSendCustomMsgOptions, NIMChatroomSendFileOptions, NIMChatroomSendGeoOptions, NIMChatroomSendTextOptions, NIMChatroomSendTipOptions, NIMChatroomResendOptions } from './NIMChatroomMessageInterface';
import { NIMChatroomMember, NIMChatroomMemberInterface, NIMChatroomUpdateCoordinateOptions, NIMChatroomUpdateMemberInfoOptions } from './NIMChatroomMemberInterface';
import { NIMChatroomQueueInterface, NIMChatroomQueueOfferOptoins } from './NIMChatroomQueueInterface';
import { NIMCommonError, NIMStrAnyObj } from '../types';
import { CloudStorageInterface, NIMPreviewFileOptions } from '../common/CloudStorageInterface';
import { NIMChatroomInterface } from './NIMChatroomInterface';
export default class Chatroom implements CloudStorageInterface, NIMChatroomInterface, NIMChatroomMemberInterface, NIMChatroomMessageInterface, NIMChatroomQueueInterface {
    constructor(__options: NIMChatroomGetInstanceOptions);
    static getInstance(_options: NIMChatroomGetInstanceOptions): Chatroom;
    setOptions(_options: NIMChatroomGetInstanceOptions): void;
    getChatroom(_options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatRoomInfo) => void;
    }): void;
    updateChatroom(_options: {
        /**
         * 待更新的聊天室信息
         */
        chatroom: {
            /**
             * 聊天室名字
             */
            name?: string;
            /**
             * 聊天室公告
             */
            announcement?: string;
            /**
             * 直播地址
             */
            broadcastUrl?: string;
            /**
             * 扩展字段
             */
            custom?: string;
            /**
             * 队列管理权限：0:所有人都有权限变更队列，1:只有主播管理员才能操作变更
             */
            queuelevel?: string;
        };
        /**
         * 用户配置的对某些资料内容另外的反垃圾的业务ID
         */
        antiSpamBusinessId?: string;
        /**
         * 是否需要下发对应的通知消息
         */
        needNotify: boolean;
        /**
         * 对应的通知消息的扩展字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUpdateChatroomOptions) => void;
    }): void;
    closeChatroom(_options: {
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateTags(_options: {
        /**
         * 标签。可以设置多个，覆盖式更新，例子：["tag1", "tag2"]；如果要删除，不传即可；若传空数组 就表示用户使用了标签功能，但是不属于任何标签。
         */
        tags?: Array<string>;
        /**
         * 通知标签。是一个标签表达式，用于通知符合规则标签的聊天室成员，例如成员上下线，更新标签的通知。不填或空字符串代表允许通知所有聊天室成员
         */
        notifyTargetTags?: string;
        /**
         * 此更新是否需要通知，默认 false。通知的范围由 notifyTargetTags（注意 notifyTargetTags 可以由聊天室初始化设置）
         */
        needNotify?: true;
        /**
         * 通知的扩展字段，推荐 JSON 格式字符串构建
         */
        ext?: string;
        /**
         * 结果回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    logout(): void;
    connect(): void;
    disconnect(__options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    destroy(__options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    previewFile(_options: NIMPreviewFileOptions): void;
    getNosOriginUrl(_options: {
        safeShortUrl: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    audioToText(_options: {
        url: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    stripImageMeta(_options: {
        url: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): string;
    qualityImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 图片质量, 必须为整数, 取值范围为 0-100
         */
        quality: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    interlaceImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    rotateImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 旋转角度
         */
        angle: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    blurImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 高斯模糊半径
         */
        radius: number;
        /**
         * 高斯模糊标准差，不能小于 0
         */
        sigma: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    cropImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * x 坐标, 必须需为整数
         */
        x: number;
        /**
         * y 坐标, 必须需为整数
         */
        y: number;
        /**
         * 宽度
         */
        width: number;
        /**
         * 高度
         */
        height: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    thumbnailImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 剪裁坐标
         */
        axis: {
            /**
             * x 坐标, 必须需为整数
             */
            x: number;
            /**
             * y 坐标, 必须需为整数
             */
            y: number;
        };
        /**
         * 缩略图的宽度
         */
        width?: number;
        /**
         * 缩略图的高度
         */
        height?: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    processImage(_options: {
        url: string;
        /**
         * 操作序列. 按操作顺序依次处理图片, 具体格式参照前面几个和 image 相关的处理接口
         *
         * 类似这样的效果
         *
         * [
         *   {
         *     type: 'crop',
         *     x: 100,
         *     y: 0,
         *     width: 250,
         *     height: 250,
         *   },
         *   {
         *      type: 'thumbnail',
         *      mode: 'cover',
         *      width: 80,
         *      height: 80
         *   }
         * ]
         */
        ops: NIMStrAnyObj;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    getNosAccessToken(_options: {
        /**
         * 文件 url
         */
        url: string;
        userAgent?: string;
        ext?: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            token: string;
            /**
             * 完整可访问的链接
             */
            resUrl: string;
        }) => void;
    }): void;
    deleteNosAccessToken(_options: {
        token: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            token: string;
            /**
             * 完整可访问的链接
             */
            resUrl: string;
        }) => void;
    }): void;
    packFileDownloadName(_options: {
        url: string;
        name: string;
    }): string;
    audioToMp3(_options: {
        url: string;
    }): string;
    viewImageStripMeta(_options: NIMStrAnyObj): string;
    viewImageQuality(_options: NIMStrAnyObj): string;
    viewImageInterlace(_options: NIMStrAnyObj): string;
    viewImageRotate(_options: NIMStrAnyObj): string;
    viewImageBlur(_options: NIMStrAnyObj): string;
    viewImageCrop(_options: NIMStrAnyObj): string;
    viewImageThumbnail(_options: NIMStrAnyObj): string;
    updateMyChatroomMemberInfo(_options: {
        updateMemeberInfo: NIMChatroomUpdateMemberInfoOptions;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomUpdateMemberInfoOptions) => void;
    }): void;
    getChatroomMembers(_options: {
        guest: boolean;
        onlyOnline?: boolean;
        time?: number;
        limit?: number;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
    getChatroomMembersByTag(_options: {
        tag: string;
        time?: number;
        limit?: number;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
    getChatroomMemberCountByTag(_options: {
        tag: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
    getChatroomMembersInfo(_options: {
        accounts: Array<string>;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: Array<NIMChatroomMember>;
        }) => void;
    }): void;
    markChatroomIdentity(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 待设置的身份，如果不是以下身份则默认设置为普通成员
         * - `'manager'` (管理员)
         * - `'common'` (普通成员)
         * - `'black'` (拉黑)
         * - `'mute'` (禁言)
         */
        identity: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    markChatroomManager(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    markChatroomCommonMember(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 等级,默认0
         */
        level?: number;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    markChatroomBlacklist(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    markChatroomGaglist(_options: {
        /**
         * 待设置的账号
         */
        account: string;
        /**
         * `true`表示添加, `false`表示移除
         */
        isAdd: boolean;
        /**
         * 扩展字段, 如果填了, 那么其它聊天室成员收到的 聊天室通知消息 的`attach.custom`的值为此字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMember) => void;
    }): void;
    kickChatroomMember(_options: {
        account: string;
        custom: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            account: string;
        }) => void;
    }): void;
    updateChatroomMemberTempMute(_options: {
        /**
         * 帐号
         */
        account: string;
        /**
         * 禁言时长，单位秒，传0表示解除禁言
         */
        duration: number;
        /**
         * 是否需要下发对应的通知消息
         */
        needNotify: boolean;
        /**
         * 对应的通知消息的扩展字段
         */
        custom?: string;
        /**
         * 回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateTagMembersTempMute(_options: {
        /**
         * 禁言的tag
         */
        tag: string;
        /**
         * 禁言时长，单位秒，传0表示解除禁言
         */
        duration: number;
        /**
         * 是否需要下发对应的通知消息
         */
        needNotify: boolean;
        /**
         * 通知消息广播的目标标签，默认是`options.tag`
         */
        notifyTargetTags?: string;
        /**
         * 对应的通知消息的扩展字段
         */
        custom?: string;
        /**
         * 回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateCoordinate(_options: NIMChatroomUpdateCoordinateOptions): void;
    sendText(_options: NIMChatroomSendTextOptions): NIMChatroomMessage;
    sendFile(_options: NIMChatroomSendFileOptions): NIMChatroomMessage;
    sendCustomMsg(_options: NIMChatroomSendCustomMsgOptions): NIMChatroomMessage;
    sendTipMsg(_options: NIMChatroomSendTipOptions): NIMChatroomMessage;
    sendGeo(_options: NIMChatroomSendGeoOptions): NIMChatroomMessage;
    getHistoryMsgs(_options: {
        /**
         * 毫秒级时间戳。若不填写，或者填写的值为 0，其数值会受 reverse影响
         *
         * <ul>
         * <li>reverse 为 false 时, timetag 默认值为当前服务器时间</li>
         * <li>reverse 为 true 时, timetag 默认值为 0</li>
         * </ul>
         */
        timetag?: number;
        /**
         * limit, 默认 100
         */
        limit?: number;
        /**
         * <ul>
         * <li>取 false 时，返回消息时间 < timetag。返回的队列按照时间降序排列</li>
         * <li>取 true 时，返回消息时间 > timetag。返回的队列按照时间生序排列</li>
         * </ul>
         */
        reverse?: boolean;
        /**
         * 消息类型列表，默认全部消息类型
         */
        msgTypes?: Array<string>;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            obj: {
                msgs: Array<NIMChatroomMessage>;
            };
        }) => void;
    }): void;
    getHistoryMsgsByTags(_options: {
        /**
         * 标签
         * ['tag1', 'tag2', 'tag3']
         */
        tags: Array<string>;
        /**
         * 消息类型
         */
        types: Array<string>;
        /**
         * 开始时间
         */
        fromTime?: number;
        /**
         * 结束时间
         */
        toTime?: number;
        /**
         * 数量限制，默认 100
         */
        limit?: number;
        /**
         * 默认为 0。
         * <ul>
         * <li>0 表示从 fromTime 开始向后查找。同时返回的结果按照时间升序排列。</li>
         * <li>1 表示从 toTime 开始向前查找。同时返回的结果按照时间降序排列。</li>
         * </ul>
         */
        reverse?: 0 | 1;
        /**
         * 回调
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            obj: {
                msgs: Array<NIMChatroomMessage>;
            };
        }) => void;
    }): void;
    /**
     * @deprecated 此接口废弃，使用发送接口替代。
     */
    resendMsg(_options: NIMChatroomResendOptions): NIMChatroomMessage;
    queueOffer(_options: {
        /**
         * 新元素的UniqKey，长度限制128字节
         */
        elementKey: string;
        /**
         * 新元素内容，长度限制4096字节
         */
        elementValue: string;
        /**
         * 可选参数，不传默认false，当提交这个新元素的用户从聊天室掉线或退出的时候，是否需要删除这个元素。
         */
        transient?: boolean;
        /**
         * 可选参数，队列元素所属账号，默认不传表示队列元素属于当前操作人，管理员可以指定队列元素归属于其他合法账号
         */
        elementAccount?: string;
        /**
         * 结果回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomQueueOfferOptoins | void) => void;
    }): void;
    queuePoll(_options: {
        /**
         * 需要取出的元素的UniqKey, 传空传表示取出第一个元素
         */
        elementKey?: string;
        /**
         * 结果回调函数
         */
        done: (err: Error | null, data: {
            elementKey?: string;
        }, Obj: {
            /**
             * 元素的UniqKey，长度限制128字节
             */
            elementKey: string;
            /**
             * 元素内容，长度限制4096字节
             */
            elementValue: string;
        }) => void;
    }): void;
    queueList(_options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            queueList: Array<{
                /**
                 * 元素的UniqKey，长度限制128字节
                 */
                elementKey: string;
                /**
                 * 元素内容，长度限制4096字节
                 */
                elementValue: string;
            }>;
        }) => void;
    }): void;
    peak(_options: {
        done: (err: Error | null, data: object, Obj: {
            /**
             * 元素的UniqKey，长度限制128字节
             */
            elementKey: string;
            /**
             * 元素内容，长度限制4096字节
             */
            elementValue: string;
        }) => void;
    }): void;
    queueDrop(_options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    queueChange(_options: {
        /**
         * 批量更新元素的key-value对，key/value分别是elementKey和elementValue（elementKey限制128字节,elementValue限制4096字节），一次最多更新100个
         */
        elementMap: {
            [key: string]: string;
        };
        /**
         * 是否需要发送广播通知，可选参数，不传默认false，当设置为 true 时，所有聊天室成员会收到类型为 'updateQueue' 聊天室通知消息。
         */
        needNotify?: boolean;
        /**
         * 通知中的自定义字段，长度限制2048
         */
        notifyExt?: string;
        /**
         * 结果回调函数
         */
        done?: (err: Error | null, data: NIMStrAnyObj, Obj: {
            elementKeyArray: Array<string>;
        }) => void;
    }): void;
}
export { Chatroom };
