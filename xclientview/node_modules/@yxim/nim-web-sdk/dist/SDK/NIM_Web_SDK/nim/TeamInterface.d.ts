import { NIMCommonError, NIMStrAnyObj } from '../types';
/**
 * 群服务 API 定义
 */
export interface TeamInterface {
    /**
     * 获取群
     *
     * 注: 当没有本地 db，或者 db 中找不到群时，会尝试从远端服务器获取。
     *
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E4%BC%9A%E8%AF%9D%E5%A4%B4%E5%83%8F%E4%B8%8E%E5%90%8D%E7%A7%B0.js" target="_blank">会话头像与名称</a></li>
     * </ul>
     */
    getTeam(options: {
        /**
         * 群 ID
         */
        teamId: string;
        /**
         * 是否强制从服务端获取
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam) => void;
    }): void;
    /**
     * 获取群列
     *
     * - 如果开发者在初始化SDK的时候设置了syncTeams为false, 那么就收不到onteams回调, 可以调用此接口来获取群列表
     *
     * 注: 没有本地 db 时，将会全量获取服务器的群列表
     */
    getTeams(options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam[]) => void;
    }): void;
    /**
     * 通过一批 teamId 来获取若干个群
     *
     * - 开发者可以调用此接口获取若干个群的资料
     *
     * 注: v8.2.0+ 支持
     */
    getTeamsById(options: {
        teamIds: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 成功查询到的群
             */
            teams: NIMTeam[];
            /**
             * 入参里的 teamIds 所查询失败的那部分
             */
            tids: string[];
        }) => void;
    }): void;
    /**
     * 创建高级群。普通群已废弃，请使用高级群。
     *
     * - 若传入的属性为 undefined，或者未传入，则日后拉取 team 时，对应属性也是 undefined。
     *
     * - 下面为高级群申请入群(joinMode)的鉴权方式。默认为 needVerify
     * 1. needVerify: 需要管理员同意
     * 2. noVerify: 无需管理员同意
     * 3. rejectAll: 不允许入群申请
     *
     * - 下面为高级群中邀请入群(beInviteMode)的鉴权方式。默认为 needVerify
     * 1. needVerify: 需要被邀请人同意
     * 2. noVerify: 无需被邀请人同意
     *
     * - 下面为高级群邀请权限(inviteMode)的设置。默认为 manager
     * 1. manager: 仅管理员可以邀请入群
     * 2. all: 所有人均可邀请成员入群
     *
     * - 下面为群信息修改权限(updateTeamMode)设置。默认为 manager
     * 1. manager: 仅管理员可以修改权限
     * 2. all: 所有人均可以修改权限
     *
     * - 下面为群信息自定义字段修改权限(updateCustomMode)设置。默认为 manager
     * 1. manager: 仅管理员可以修改权限
     * 2. all: 所有人均可以修改权限
     *
     * 函数调用后：
     * - 创建者触发 {@link NIMGetInstanceOptions.onCreateTeam | onCreateTeam}
     * - 如果 beInviteMode: noVerify:
     * 1. 被邀请者收到 {@link NIMGetInstanceOptions.onmsg | onmsg}、{@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}、以及 {@link NIMGetInstanceOptions.onAddTeamMembers}
     * 2. 创建者收到 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}、以及 {@link NIMGetInstanceOptions.onAddTeamMembers}
     * - 如果 beInviteMode: needVerify:
     * 1. 被邀请者收到 {@link NIMGetInstanceOptions.onsysmsg}，类型为 teamInvite
     */
    createTeam(options: {
        /**
         * 群类型。高级群或者普通群。普通群已废弃
         */
        type: 'normal' | 'advanced';
        /**
         * 群名
         */
        name: string;
        /**
         * 群头像
         */
        avatar?: string;
        /**
         * 群简介
         */
        intro?: string;
        /**
         * 群公告
         */
        announcement?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 要拉进群的成员的帐号列表
         */
        accounts?: string[];
        /**
         * 拉人的附言
         */
        ps?: string;
        /**
         * 对某些资料内容进行反垃圾处理的业务 ID, 在云信控制台里配置.
         */
        antiSpamBusinessId?: string;
        /**
         * 群加入方式
         */
        joinMode?: 'noVerify' | 'needVerify' | 'rejectAll';
        /**
         * 群被邀请模式
         */
        beInviteMode?: 'noVerify' | 'needVerify';
        /**
         * 群邀请模式
         */
        inviteMode?: 'manager' | 'all';
        /**
         * 群信息修改权限
         */
        updateTeamMode?: 'manager' | 'all';
        /**
         * 群信息自定义字段修改权限
         */
        updateCustomMode?: 'manager' | 'all';
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 创建者的信息
             */
            owner: NIMTeamMember;
            /**
             * 群
             */
            team: NIMTeam;
            /**
             * 要拉进群的成员的帐号列表
             */
            accounts?: string[];
            /**
             * 拉人的附言
             */
            ps?: string;
            /**
             * 反垃圾标签
             */
            antispamTag?: {
                antiSpamBusinessId?: string;
            };
        }) => void;
    }): void;
    /**
     * 更新群属性。
     *
     * <h4> 普通群限制 </h4>
     * 如果是普通群，该群不可以更新
     * - 群加入方式
     * - 群被邀请模式
     * - 群邀请模式
     * - 群信息修改权限
     * - 群信息自定义字段修改权限
     *
     * <h4> 函数作用 </h4>
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'updateTeam'</li>
     * <li>msg.attach.team: 群详情</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateTeam | onUpdateTeam}
     */
    updateTeam(options: {
        /**
         * 群 ID
         */
        teamId: string;
        /**
         * 群名
         */
        name: string;
        /**
         * 群头像
         */
        avatar?: string;
        /**
         * 群简介
         */
        intro?: string;
        /**
         * 群公告
         */
        announcement?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 对某些资料内容进行反垃圾处理的业务 ID, 在云信控制台里配置.
         */
        antiSpamBusinessId?: string;
        /**
         * 群加入方式
         */
        joinMode?: 'noVerify' | 'needVerify' | 'rejectAll';
        /**
         * 群被邀请模式
         */
        beInviteMode?: 'noVerify' | 'needVerify';
        /**
         * 群邀请模式
         */
        inviteMode?: 'manager' | 'all';
        /**
         * 群信息修改权限
         */
        updateTeamMode?: 'manager' | 'all';
        /**
         * 群信息自定义字段修改权限
         */
        updateCustomMode?: 'manager' | 'all';
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 转让群, 群主可操作
     *
     * - 转让群相关通知
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 转让者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'transferTeam'</li>
     * <li>msg.attach.team: 群详情</li>
     * <li>msg.attach.account: 新群主账号</li>
     * <li>msg.attach.members: 新旧群主成员详情列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onTransferTeam | onTransferTeam}
     *
     * - 如果转让群的同时离开群, 那么相当于调用主动退群来离开群
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.attach.type: 'leaveTeam'
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onRemoveTeamMembers | onRemoveTeamMembers}
     */
    transferTeam(options: {
        teamId: string;
        account: string;
        /**
         * 转让群的同时是否离开群
         */
        leave: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 解散群，群主可操作
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'dismissTeam'
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onDismissTeam | onDismissTeam}
     */
    dismissTeam(options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 主动退群
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'leaveTeam'</li>
     * <li>msg.attach.team: 群详情</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onRemoveTeamMembers | onRemoveTeamMembers}
     */
    leaveTeam(options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 群组全体禁言
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.attach.type: 'updateTeam'
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateTeamMembersMute | onUpdateTeamMembersMute}
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/team/%E7%BE%A4%E9%9D%99%E9%9F%B3.js" target="_blank">群静音</a></li>
     * </ul>
     */
    muteTeamAll(options: {
        teamId: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 获取群成员。如果开发者在初始化SDK时选择设置了syncTeamMembers为false, 那么就收不到onteammembers回调, 可以调用此方法来获取群成员列表
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/team/%E7%BE%A4%E6%88%90%E5%91%98%E7%AE%A1%E7%90%86.js" target="_blank">群成员管理</a></li>
     * </ul>
     */
    getTeamMembers(options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: NIMTeamMember[];
            teamId: string;
        }) => void;
    }): void;
    /**
     * 获取群禁言成员列表。该函数结果受 {@link TeamInterface.updateMuteStateInTeam} 影响
     */
    getMutedTeamMembers(options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: NIMTeamMember[];
            teamId: string;
        }) => void;
    }): void;
    /**
     * 添加群成员
     *
     * 普通群(已废弃，推荐使用高级群)：
     *
     * 1. 拉人入群后, 其他群成员会收到通知并触发 {@link NIMGetInstanceOptions.onAddTeamMembers | onAddTeamMembers}
     *
     * 2. 被邀请的群成员不会收到回调，直到群内成员发送消息，触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions} 回调，才能够感知到自己已经入群。
     *
     * 高级群：
     * - 如果 inviteMode: 'noVerify':
     * 1. 被邀请人直接入群，所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 邀请者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'addTeamMembers'</li>
     * <li>msg.attach.accounts: 被邀请入群成员账号列表</li>
     * <li>msg.attach.members: 被邀请入群成员详细信息列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddTeamMembers | onAddTeamMembers}
     *
     * - 如果 inviteMode: 'needVerify'
     * 1. 被邀请者触发 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}，其 type 为 'teamInvite'。被邀请者通过 {@link TeamInterface.acceptTeamInvite | acceptTeamInvite} 或者 {@link TeamInterface.rejectTeamInvite | rejectTeamInvite}回应入群邀请
     */
    addTeamMembers(options: {
        teamId: string;
        /**
         * 要加入的用户账号列表
         */
        accounts: string[];
        /**
         * 附言，长度不得大于 5000 字符，开发者可以使用 JSON 序列化字符串填充
         */
        ps?: string;
        /**
         * 附加字段，推荐使用 JSON 序列化字符串
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 同意入群邀请 {@link TeamInterface.addTeamMembers}
     *
     * 群主和管理员邀请成员加入群({@link TeamInterface.addTeamMembers | addTeamMembers}), 被邀请的人收到类型为`teamInvite`的系统通知
     *
     * 此系统通知的 `from` 字段的值为邀请方的帐号, `to` 字段的值为对应的 `群ID`, 此类系统通知的 `attach` 有一个字段 `team` 的值为被邀请进入的群, 被邀请的人可以选择接受邀请或者拒绝邀请
     *
     * - 若接受入群邀请, 该群所有成员收到类型为 `acceptTeamInvite` 的群通知消息, 通知消息具体内容见下文
     * - 若拒绝入群邀请, 邀请你的人会收到类型为 `rejectTeamInvite` 的系统通知, 此系统通知的 `from` 字段的值为拒绝入群邀请的人的帐号, `to` 字段的值为对应的 `群ID`
     *
     * 用户接受入群邀请后：
     * 1. 所有群成员, 收到群通知消息 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 邀请人账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'acceptTeamInvite'</li>
     * <li>msg.attach.team: 群信息</li>
     * <li>msg.attach.members: 接收入群邀请的群成员列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddTeamMembers | onAddTeamMembers}
     * 4. 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link TeamInterface.addTeamMembers | addTeamMembers}</li>
     * <li>{@link TeamInterface.rejectTeamInvite | rejectTeamInvite}</li>
     * </ul>
     */
    acceptTeamInvite(options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 邀请人 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 拒绝入群邀请
     *
     * 用户拒绝群邀请后:
     * - 邀请者会收到系统通知 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}
     *   - type: 'rejectTeamInvite'
     *   - from: 拒绝入群邀请的账号
     *   - to: 群id
     * - 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     */
    rejectTeamInvite(options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 踢人出群
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号 </li>
     * <li>msg.to: 群id </li>
     * <li>msg.attach.type: 'removeTeamMembers'</li>
     * <li>msg.attach.team: 群详情</li>
     * <li>msg.attach.accounts: 被踢人的账号数组</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onRemoveTeamMembers | onRemoveTeamMembers}
     */
    removeTeamMembers(options: {
        teamId: string;
        /**
         * 要踢出的群成员账号列表
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 添加群管理员
     *
     * 添加群管理员后:
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 添加管理员的操作者 </li>
     * <li>msg.to: 群id </li>
     * <li>msg.attach.type: 'addTeamManagers'</li>
     * <li>msg.attach.accounts: 被加为管理员的帐号列表</li>
     * <li>msg.attach.members: 被加为管理员的群成员详细信息列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateTeamManagers | onUpdateTeamManagers}
     */
    addTeamManagers(options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 移除群管理员
     *
     * 添加群管理员后:
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 移除者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'removeTeamManagers'</li>
     * <li>msg.attach.accounts: 被移除的管理员的帐号列表</li>
     * <li>msg.attach.members: 被移除管理员的群成员列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateTeamManagers | onUpdateTeamManagers}
     */
    removeTeamManagers(options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 修改自己在群里的信息
     *
     * <ul>
     * <li>所有在线的群成员触发 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember}</li>
     * <li>所有在线群成员触发{@link NIMGetInstanceOptions.onUpdateTeam | onUpdateTeam}</li>
     * <li>当前账号会触发 {@link NIMGetInstanceOptions.onMyTeamMembers | onMyTeamMembers}</li>
     * </ul>
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E4%BC%9A%E8%AF%9D%E5%85%8D%E6%89%93%E6%89%B0.js" target="_blank">会话免打扰</a></li>
     * </ul>
     */
    updateInfoInTeam(options: {
        teamId: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember} 。
         */
        nickInTeam?: string;
        /**
         * @deprecated 已废弃。请使用 muteNotiType
         */
        muteTeam?: boolean;
        /**
         * 提醒策略
         *
         * "0" 开启提醒
         * "1" 关闭消息提醒
         * "2" 只接受管理员的消息的提醒
         */
        muteNotiType?: string;
        /**
         * 第三方扩展字段, 开发者可以自行扩展, 建议封装成JSON格式字符串
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: Pick<NIMTeamMember, 'id' | 'account' | 'custom' | 'muteTeam' | 'nickInTeam' | 'teamId' | 'updateTime'>) => void;
    }): void;
    /**
     * 修改别人的群昵称
     *
     * 所有在线的群成员会触发 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember}、以及 {@link NIMGetInstanceOptions.onUpdateTeam | onUpdateTeam}
     */
    updateNickInTeam(options: {
        teamId: string;
        account: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember} 。
         */
        nickInTeam: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 更新群成员禁言状态
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作方</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'updateTeamMute'</li>
     * <li>msg.attach.account: 被禁言的帐号</li>
     * <li>msg.attach.members: 被禁言的群成员列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateTeamMembersMute | onUpdateTeamMembersMute}
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/team/%E7%BE%A4%E9%9D%99%E9%9F%B3.js" target="_blank">群静音</a></li>
     * </ul>
     */
    updateMuteStateInTeam(options: {
        teamId: string;
        account: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 通过群ID及成员账号获取群成员信息
     */
    getTeamMemberByTeamIdAndAccount(options: {
        teamId: string;
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * key 为入参里的 account ID
             */
            [key: string]: NIMTeamMember;
        }) => void;
    }): void;
    /**
     * 获取群成员的邀请者accid
     */
    getTeamMemberInvitorAccid(options: {
        teamId: string;
        /**
         * 需要查询的群成员 account ID 账号列表.
         *
         * 单次查询accounts最大长度为200。
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * key 为入参里的 account ID, value 为邀请者的 account ID
             */
            [key: string]: string;
        }) => void;
    }): void;
    /**
     * 用户主动申请加入群。根据 `joinMode` 不同，SDK 有不同的行为
     *
     * - 如果 joinMode: 'noVerify':
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 申请人账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'passTeamApply'</li>
     * <li>msg.attach.account: 申请人账号</li>
     * <li>msg.attach.members: 被通过申请的群成员列表 </li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddTeamMembers | onAddTeamMembers}
     *
     * - 如果 joinMode: 'needVerify'
     * 1. 管理员触发 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}，其 type 为 'applyTeam'。管理员通过 {@link TeamInterface.passTeamApply | passTeamApply} 或者 {@link TeamInterface.rejectTeamApply | rejectTeamApply}回应入群申请
     *
     * - 如果 joinMode: 'rejectAll'
     * 1. 收到申请入群失败的error信息
     */
    applyTeam(options: {
        teamId: string;
        /**
         * 附言
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam) => void;
    }): void;
    /**
     * （管理员）通过群申请
     *
     * 通过入群申请后：
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'passTeamApply'</li>
     * <li>msg.attach.account: 申请方账号</li>
     * <li>msg.attach.members: 被通过申请的群成员列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddTeamMembers | onAddTeamMembers}
     * 4. 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     */
    passTeamApply(options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 管理员拒绝群申请
     *
     * 拒绝群申请后 :
     * - 申请者会收到系统通知 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}
     *   - from: 拒绝方的账号
     *   - to: 群id
     *   - attach: 群信息
     * - 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     */
    rejectTeamApply(options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 查询自己在各个群中所设置的消息提醒策略。消息提醒策略可以通过 {@link TeamInterface.updateInfoInTeam | updateInfoInTeam} 设置
     */
    notifyForNewTeamMsg(options: {
        teamIds: string[];
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             *  key 为 teamId, value 为的提醒策略见 {@link NIMTeamMember.muteNotiType }
             */
            [key: string]: number;
        }, 
        /**
         *  无法查明的群 id 列表
         */
        miss: string[]) => void;
    }): void;
    /**
     * 添加特别关注群成员列表. v8.9.122+ 支持(量子密信私有, 先不对外开放)
     *
     * @param options
     * @param options.teamId 群 id
     * @param options.accountIds 特别关注的群成员accoutId列表. 不允许传入空数组
     */
    /**
     * 移除特别关注群成员列表.  v8.9.122+ 支持(量子密信私有, 先不对外开放)
     *
     * @param options
     * @param options.teamId 群 id
     * @param options.accountIds 特别关注的群成员accoutId列表. 不允许传入空数组
     */
    /**
     * 获取我所在的群对应的群成员. v8.9.122+ 支持
     *
     * @param options 配置参数
     * @param options.teamIds 群 ID 数组
     */
    getMyTeamMembers(options: {
        teamIds: string[];
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeamMember[]) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link TeamInterface.getTeamsFromDB}
     */
    getLocalTeams(options: {
        teamIds: string[];
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam[]) => void;
    }): void;
    /**
     * 从本地数据库里批量获取群信息, 不限个数
     *
     * 注: indexDB 数据库专用的接口
     *
     * @param options
     * @param options.teamIds 群 id 列表. 不传则忽略这个过滤条件
     */
    getTeamsFromDB(options: {
        teamIds?: string[];
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam[]) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link TeamInterface.getTeamMembersFromDB}
     */
    getLocalTeamMembers(options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: NIMTeamMember[];
        }) => void;
    }): void;
    /**
     * 从本地数据库里批量获取群成员信息
     *
     * 注1: indexDB 数据库专用接口.
     *
     * 注2: db 表实际上只存放了本账号在群中的群成员信息，而其他群成员的信息是不存的, 有需要去服务器接口获取 {@link TeamInterface.getTeamMembers}
     *
     * @param options
     * @param options.teamIds 群 id 列表. 不传则忽略这个过滤条件
     * @param options.accountIds 成员账号 id 列表. 不传则忽略这个过滤条件
     */
    getTeamMembersFromDB(options: {
        teamIds?: string[];
        accountIds?: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: NIMTeamMember[];
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃
     */
    deleteLocalTeam(options: {
        /**
         * 建议传入 teamId 数组。
         *
         * 注: 为了兼容老接口, 允许传入 string, 但是建议传入数组
         */
        teamId: string | string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
}
/**
 * 群成员类型
 *
 * 'normal' (普通成员)
 * 'owner' (群主)
 * 'manager' (管理员)
 */
export declare type NIMTeamMemberType = 'normal' | 'owner' | 'manager';
/**
 * 群成员定义
 */
export interface NIMTeamMember {
    /**
     * 群成员 ID (群 ID + account)
     */
    id: string;
    /**
     * 群ID
     */
    teamId: string;
    /**
     * 帐号
     */
    account: string;
    /**
     * 群成员类型
     *
     * 'normal' (普通成员)
     * 'owner' (群主)
     * 'manager' (管理员)
     */
    type: NIMTeamMemberType;
    /**
     * 在群里面的昵称
     */
    nickInTeam: string;
    /**
     * 入群时间
     */
    joinTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 是否处于激活状态，为普通群(讨论组)专用的字段
     *
     * 注: 当普通群拉人进来时, 被拉的人处于未激活状态, 未激活状态下看不到这个群. 直到群里有人发言后自动转为激活状态, 能收到加入群事件和群消息提示
     */
    active: boolean;
    /**
     * 群成员是否有效
     */
    valid: boolean;
    /**
     * (该成员)是否被禁言
     */
    mute?: boolean;
    /**
     * 是否关闭此群的消息提醒, 默认 false.
     *
     * 注: 为 true 表示关闭提醒, 但是 SDK 仍然会收到这个群的消息. 因为 SDK 只是记录这个设置, 具体根据这个设置要执行的操作由开发者决定
     */
    muteTeam?: boolean;
    /**
     * 提醒策略
     *
     * "0" 开启提醒
     * "1" 关闭消息提醒
     * "2" 只接受管理员的消息的提醒
     */
    muteNotiType?: string;
    /**
     * 邀请者的账号
     */
    invitorAccid?: string;
    /**
     * 第三方扩展字段
     */
    custom?: string;
    /**
     * 特别关注群成员 accountId 列表
     */
    noticeAccountIds?: string[];
}
/**
 * 群定义
 */
export interface NIMTeam {
    /**
     * 群Id
     */
    teamId: string;
    /**
     * 群类型
     *
     * normal 为普通群（讨论组）
     * advanced 为 高级群
     *
     * 注：普通群没有群简介/群公告/群加入方式/群被邀请模式/群邀请模式/群信息修改权限/群信息自定义字段修改权限
     */
    type: 'normal' | 'advanced';
    /**
     * 群名
     */
    name: string;
    /**
     * 群头像
     */
    avatar: string;
    /**
     * 群加入方式, 仅限高级群有此属性，普通群(讨论组)没有
     *
     * noVerify 不需要验证
     * needVerify 加此群需要相关人员的验证
     * rejectAll 拒绝其他人加入
     */
    joinMode: 'noVerify' | 'needVerify' | 'rejectAll';
    /**
     * 被邀请模式, 仅限高级群
     *
     * noVerify 不需要验证
     * needVerify 此群邀请某人，需要此人验证通过才能加入
     */
    beInviteMode: 'noVerify' | 'needVerify';
    /**
     * 群邀请模式, 仅限高级群
     *
     * manager 管理员。仅限管理员可以邀请人进群
     * all 所有人。所有人都可以邀请人进群
     */
    inviteMode: 'manager' | 'all';
    /**
     * 群信息修改权限, 仅限高级群
     *
     * manager 管理员。仅限管理员可以修改群信息
     * all 所有人
     */
    updateTeamMode: 'manager' | 'all';
    /**
     * 群信息自定义字段修改权限, 仅限高级群
     *
     * manager 管理员
     * all 所有人
     */
    updateCustomMode: 'manager' | 'all';
    /**
     * 群主
     */
    owner: string;
    /**
     * 群人数上限
     */
    level: number;
    /**
     * 群成员数量
     */
    memberNum: number;
    /**
     * 群成员最后更新时间戳
     */
    memberUpdateTime: number;
    /**
     * 群创建时间戳
     */
    createTime: number;
    /**
     * 群最后更新时间戳
     */
    updateTime: number;
    /**
     * 是否有效, 解散后该群无效
     */
    valid: boolean;
    /**
     * 该群是否对当前用户有效, 如果无效, 那么说明被踢了
     */
    validToCurrentUser: boolean;
    /**
     * @deprecated please use muteType instead
     *
     * 字段即将废弃, 请使用 muteType 替代. 此字段为 true 等效于 muteType 为 'normal'
     *
     * 是否禁言, 禁言状态下普通成员不能发送消息, 创建者和管理员可以发送消息
     */
    mute?: boolean;
    /**
     * 禁言模式. 若不存在此字段代表不禁言.
     *
     * none: 都不禁言;
     *
     * normal: 普通成员禁言，即普通成员不能发消息;
     *
     * all: 全体禁言，即所有成员均不能发消息禁言模式
     */
    muteType?: string;
    /**
     * 群简介
     */
    intro?: string;
    /**
     * 群公告
     */
    announcement?: string;
    /**
     * 第三方扩展字段, 开发者可以自行扩展, 建议封装成JSON格式字符串
     */
    custom?: string;
    /**
     * 第三方服务器扩展字段, 开发者可以自行扩展, 建议封装成JSON格式字符串
     */
    serverCustom?: string;
}
export interface NIMOnUpdateTeamResult1 {
    /**
     * 群Id
     */
    teamId: string;
    /**
     * 群名
     */
    name: string;
    /**
     * 群头像
     */
    avatar: string;
    /**
     * 群最后更新时间戳
     */
    updateTime: number;
    /**
     * 群简介
     */
    intro?: string;
    /**
     * 群公告
     */
    announcement?: string;
    /**
     * 第三方扩展字段, 开发者可以自行扩展, 建议封装成JSON格式字符串
     */
    custom?: string;
}
export interface NIMOnUpdateTeamResult2 {
    /**
     * @deprecated please use muteType instead
     *
     * 字段即将废弃, 请使用 muteType 替代. 此字段为 true 等效于 muteType 为 'normal'
     *
     * 是否禁言, 禁言状态下普通成员不能发送消息, 创建者和管理员可以发送消息
     */
    mute?: boolean;
    /**
     * 禁言模式. 若不存在此字段代表不禁言.
     *
     * none: 都不禁言;
     *
     * normal: 普通成员禁言，即普通成员不能发消息;
     *
     * all: 全体禁言，即所有成员均不能发消息禁言模式
     */
    muteType?: string;
    /**
     * 群Id
     */
    teamId: string;
    /**
     * 群最后更新时间戳
     */
    updateTime: number;
}
export interface NIMOnUpdateTeamResult3 {
    /**
     * 群Id
     */
    teamId: string;
    /**
     * 成员更新时间
     */
    memberUpdateTime: number;
}
