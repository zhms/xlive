export interface SignalingInterface {
    /**
     * 呼叫加入音视频频道: 创建一个频道, 己方加入，并邀请对方加入音视频的频道
     *
     * 注: 组合接口, 比 signalingCall 多了云信 G2 音视频相关的参数
     */
    signalingCallEx(options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         */
        type: number;
        /**
         * 频道名称
         *
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 云信 G2-RTC 的房间名，加入频道时 sdk 会携带这个参数, 再返回对应的 token
         */
        nertcChannelName?: string;
        /**
         * 云信 G2-RTC 的 token 的有效期，表示 token 的过期时间，单位秒，选填，默认10分钟
         */
        nertcTokenTtl?: string;
        /**
         * 云信G2-RTC加入房间的请求参数，推荐传入 JSON 序列化字符串
         */
        nertcJoinRoomQueryParamMap?: string;
        /**
         * 推送属性
         */
        pushInfo?: NIMSignalingPushInfo;
    }): Promise<NIMSignalingChannel>;
    /**
     * 呼叫: 创建一个频道, 己方加入，并邀请对方加入频道
     *
     * 注: 组合接口, 相当于调用 signalingCreateAndJoin 后, 调用 signalingInvite.
     */
    signalingCall(options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         */
        type: number;
        /**
         * 频道名称
         *
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 推送属性
         */
        pushInfo?: NIMSignalingPushInfo;
    }): Promise<NIMSignalingChannel>;
    /**
     * 如果不存在房间, 则创建一个频道，并且己方加入. 如果已存在频道，则己方直接加入
     *
     * 注: 组合接口, 相当于调用 signalingCreate 后, 调用 signalingJoin.
     */
    signalingCreateAndJoin(options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         */
        type: number;
        /**
         * 频道名称
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<NIMSignalingChannel>;
    /**
     * 创建频道
     */
    signalingCreate(options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         *
         */
        type: number;
        /**
         * 频道名称
         *
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
    }): Promise<NIMSignalingChannel>;
    /**
     * 延长频道的有效期
     *
     * 注：SDK 在 v9.8.0 及以后自动托管频道的有效期，不需要开发者再手动延迟.
     */
    signalingDelay(options: {
        /**
         * 频道id，唯一标识
         */
        channelId: string;
    }): Promise<NIMSignalingChannel>;
    /**
     * 关闭频道
     */
    signalingClose(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    /**
     * 查询频道信息. 根据 channelName 查询房间信息
     */
    signalingGetChannelInfo(options: {
        /**
         * 频道名
         *
         */
        channelName: string;
    }): Promise<NIMSignalingChannel>;
    /**
     * 加入频道
     */
    signalingJoin(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: number;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<NIMSignalingChannel>;
    /**
     * 离开频道
     */
    signalingLeave(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    /**
     * 邀请某人进入频道
     */
    signalingInvite(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 推送属性
         */
        pushInfo?: NIMSignalingPushInfo;
    }): Promise<void>;
    /**
     * 取消邀请
     */
    signalingCancel(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    /**
     * 拒绝进入频道的邀请
     */
    signalingReject(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    /**
     * 接受进入频道的邀请
     */
    signalingAccept(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 接受邀请后，是否直接加入频道。默认为 true
         */
        autoJoin?: boolean;
        /**
         * 接受邀请后，自己在频道中对应的uid。大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: number;
        /**
         * 接受邀请后，加入频道的操作附加信息，将在加入频道通知中带给其他频道成员
         */
        joinAttachExt?: string;
    }): Promise<void>;
    /**
     * 标记信令消息已收到, 下次不会在离线同步中收到此消息
     */
    signalingMarkMsgRead(options: {
        /**
         * 需要标记的已读的信令消息 id
         */
        msgid: number[] | string[];
    }): Promise<void>;
    /**
     * 发送自定义信令
     */
    signalingControl(options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 要通知的目标账号(account id)。如果不传则通知所有人
         */
        account?: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
    }): Promise<void>;
    /**
     * 加入频道并接受邀请。该接口实际为组合接口，等同于先调用加入频道，成功后再调用接受邀请接口。
     */
    signalingJoinAndAccept(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 对方accid，必须
         */
        account: string;
        /**
         * 必须，邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存离线通知，默认false
         */
        offlineEnabled?: boolean;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: number;
        /**
         * 云信G2-RTC的房间名，加入频道请求时携带，则会返回token
         */
        nertcChannelName?: string;
        /**
         * 云信G2-RTC的token的有效期，表示token的过期时间，单位秒，选填，默认10分钟
         */
        nertcTokenTtl?: number;
        /**
         * 云信G2-RTC加入房间的请求参数，推荐传入 JSON 序列化字符串
         */
        nertcJoinRoomQueryParamMap?: string;
    }): Promise<void>;
}
export interface NIMSignalingEventInterface {
    /**
     * 收到在线通知
     */
    signalingNotify: [result: NIMSignalingNotify];
    /**
     * 收到多端同步通知
     */
    signalingMutilClientSyncNotify: [result: NIMSignalingNotify];
    /**
     * 收到频道成员变更同步
     */
    signalingChannelsSyncNotify: [result: NIMSignalingNotify[]];
    /**
     * 收到未读信令消息通知
     */
    signalingUnreadMessageSyncNotify: [result: NIMSignalingNotify[]];
}
export interface NIMSignalingChannelMemberInfo {
    /**
     * 受邀请者的账号 account id
     */
    accid: string;
    /**
     * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
     */
    uid: number;
    /**
     * 加入时间点
     */
    createTime: number;
    /**
     * 失效时间点，失效即认为离开了频道
     */
    expireTime: number;
}
export interface NIMSignalingChannelMember {
    /**
     * 受邀请者的账号 account id
     */
    accid: string;
    /**
     * 自己在频道中对应的uid
     */
    uid: string;
    /**
     * web 端专属的 uid
     */
    web_uid: string;
    /**
     * 加入时间点
     */
    createTime: string;
    /**
     * 失效时间点，失效即认为离开了频道
     */
    expireTime: string;
}
export interface NIMSignalingChannel {
    /**
     * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
     */
    type: string;
    /**
     * 频道名称
     */
    channelName: string;
    /**
     * 频道id，唯一标识
     */
    channelId: string;
    /**
     * 创建时间点
     */
    channelCreateTime: string;
    /**
     * 失效时间点
     */
    channelExpireTime: string;
    /**
     * 扩展字段
     */
    ext?: string;
    /**
     * 创建者的账号 account id
     */
    creator: string;
    /**
     * 该频道是否有效
     */
    /**
     * 成员
     */
    members?: NIMSignalingChannelMember[];
    /**
     * 云信 G2-RTC 的房间名，加入频道时 sdk 会携带这个参数, 再返回对应的 token
     */
    nertcChannelName?: string;
    /**
     * 云信 G2-RTC 的 token 的有效期，表示 token 的过期时间，单位秒，选填，默认10分钟
     */
    nertcTokenTtl?: string;
    /**
     * 云信G2-RTC加入房间的请求参数，推荐传入 JSON 序列化字符串
     */
    nertcJoinRoomQueryParamMap?: string;
}
/**
 * 创建频道的入参
 *
 */
/**
 * 关闭频道的入参
 *
 */
/**
 * 查询频道信息的入参
 *
 */
/**
 * 加入频道的入参
 *
 */
/**
 * 离开频道的入参
 *
 */
/**
 * 邀请加入频道的入参
 *
 */
export interface NIMSignalingPushInfo {
    /**
     * 是否需要推送，默认false
     */
    needPush?: boolean;
    /**
     * 推送标题
     */
    pushTitle?: string;
    /**
     * 推送内容
     */
    pushContent: string;
    /**
     * 推送自定义字段
     */
    pushPayload?: string;
    /**
     * 是否计入未读计数, 默认为 true
     */
    needBadge?: boolean;
}
export declare enum NIMEnumSignalingNotifyEventType {
    ROOM_CLOSE = 1,
    ROOM_JOIN = 2,
    INVITE = 3,
    CANCEL_INVITE = 4,
    REJECT = 5,
    ACCEPT = 6,
    LEAVE = 7,
    CONTROL = 8
}
export declare type NIMSignalingNotifyEventType = keyof typeof NIMEnumSignalingNotifyEventType;
export interface NIMSignalingNotify {
    /**
     * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
     */
    type: string;
    /**
     * 该通知的目标账号
     */
    to: string;
    /**
     * 事件类型.
     */
    eventType: NIMSignalingNotifyEventType;
    /**
     * 频道名称
     */
    channelName: string;
    /**
     * 频道id，唯一标识
     */
    channelId: string;
    /**
     * 创建时间点
     */
    channelCreateTime: string;
    /**
     * 失效时间点
     */
    channelExpireTime: string;
    /**
     * 创建者的账号 account id
     */
    creator: string;
    /**
     * 该操作的附加信息，透传给其他人。相当于其他接口里的 attachExt
     */
    attach?: string;
    /**
     * 扩展字段
     */
    ext?: string;
    /**
     * 是否需要推送，默认false
     */
    needPush?: boolean;
    /**
     * 推送标题
     */
    pushTitle?: string;
    /**
     * 推送内容
     */
    pushContent: string;
    /**
     * 推送自定义字段
     */
    pushPayload?: string;
    /**
     * 是否计入未读计数, 默认为 true
     */
    needBadge?: boolean;
}
