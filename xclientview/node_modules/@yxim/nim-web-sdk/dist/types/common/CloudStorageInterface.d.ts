import { NIMCommonError, NIMStrAnyObj } from '../types';
/**
 * 云存储相关 API：上传文件，文件处理等。
 */
export interface CloudStorageInterface {
    /**
     * 上传并且预览文件。开发者在拿到文件对象之后, 可以调用发送文件消息来发送文件消息。
     *
     * <h4>注意一</h4>
     * <ul>
     * <li>fileInput、file、blob、filePath四个参数选择一个传入</li>
     * <li>fileInput: type='file'类型的input DOM元素的id。上传完成前请不要操作此节点上的文件</li>
     * <li>file: previewFile 回调函数的参数</li>
     * <li>blob: Blob类型JS对象</li>
     * <li>filePath: RN，小程序等特殊的 JS 运行环境专用（chooseImage 拿到的该临时路径）</li>
     * </ul>
     *
     * <h4>注意二</h4>
     * <ul>
     * <li>type: image、audio、video 或 file。默认为 file。主要区别在于消息体中 file 对象含有的信息不同</li>
     * <li>image: url, name, size, ext, w, h, type</li>
     * <li>audio: url, name, size, ext, container, dur</li>
     * <li>video: url, name, size, ext, container, dur, w, h</li>
     * <li>file:  url, name, size, ext</li>
     * </ul>
     *
     * <h4>注意三</h4>
     * <ul>
     * <li>文件大小限制为最大 100M</li>
     * <li>高级浏览器会在上传前就检测文件大小</li>
     * <li> IE8/IE9 会在上传完成后检测文件大小</li>
     */
    previewFile(options: NIMPreviewFileOptions): void;
    /**
     * 短链接转长链接
     */
    getNosOriginUrl(options: {
        safeShortUrl: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 音频转文字。注意，该功能仅在 NIM 中可以使用。Chatroom尚未实现此功能。
     *
     * - 仅支持通过previewFile或者sendFile拿到的音频 url, 或者收到的音频消息的 url
     */
    audioToText(options: {
        url: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 去除图片元信息
     *
     * - 只支持通过预览文件或发送文件消息拿到的图片 url, 或者经过其他图片操作后拿到的图片 url
     * - 去除元信息后的图片将不包含 EXIF 信息
     */
    stripImageMeta(options: {
        url: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): string;
    /**
     * 修改图片质量
     *
     * - 只支持通过预览文件或发送文件消息拿到的图片 url, 或者经过其他图片操作后拿到的图片 url
     * - 默认图片质量为100, 开发者可以降低图片质量来省流量
     */
    qualityImage(options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 图片质量, 必须为整数, 取值范围为 0-100
         */
        quality: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * interlace 图片
     *
     * - 只支持通过预览文件或发送文件消息拿到的图片 url, 或者经过其他图片操作后拿到的图片 url
     * - 在网络环境较差时, interlace 后的图片会以从模糊到清晰的方式呈现给用户
     */
    interlaceImage(options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 旋转图片
     *
     * - 只支持通过预览文件或发送文件消息拿到的图片 url, 或者经过其他图片操作后拿到的图片 url
     */
    rotateImage(options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 旋转角度
         */
        angle: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 高斯模糊图片
     *
     * - 只支持通过预览文件或发送文件消息拿到的图片 url, 或者经过其他图片操作后拿到的图片 url
     */
    blurImage(options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 高斯模糊半径
         */
        radius: number;
        /**
         * 高斯模糊标准差，不能小于 0
         */
        sigma: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 剪裁图片
     *
     * - 只支持通过预览文件或发送文件消息拿到的图片 url, 或者经过其他图片操作后拿到的图片 url
     * - 从坐标 (x, y) 处截取尺寸为 width*height 的图片, (0, 0) 代表左上角
     * - width/height 不能小于0, 如果 width/height 大于图片的原始宽度/高度, 那么将被替换为图片的原始宽度/高度
     */
    cropImage(options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * x 坐标, 必须需为整数
         */
        x: number;
        /**
         * y 坐标, 必须需为整数
         */
        y: number;
        /**
         * 宽度, 必须需为整数
         */
        width: number;
        /**
         * 高度, 必须需为整数
         */
        height: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 生成图片的略缩图
     *
     * - 只支持通过预览文件或发送文件消息拿到的图片 url, 或者经过其他图片操作后拿到的图片 url
     * - width/height 限制了缩略图的尺寸。width/height 必须大于等于 0, 不能同时为 0, 必须小于 4096
     * - 不同模式下生成的缩略图是不一样的, 目前支持以下三种模式:
     *   - 'cover': 原图片等比缩略, 缩略图一边等于请求的尺寸, 另一边大于请求的尺寸, 即缩略图刚好能覆盖住尺寸为 width*height 的矩形
     *   - 'contain': 原图片等比缩略, 缩略图一边等于请求的尺寸, 另一边小于请求的尺寸, 即尺寸为 width*height 的矩形刚好能覆盖住缩略图
     *   - 'crop': 先等比缩略原图片, 使得一边等于请求的尺寸, 另一边大于请求的尺寸, 然后对大于请求尺寸的那条边进行裁剪, 使得最终的图片大小刚好等于请求的尺寸
     * - 如果缩略图尺寸大于图片尺寸, 默认情况下图片不会被放大, 可以传入参数enlarge=true来放大图片
     * - 'crop' 模式下可以传入参数 axis.x 或 axis.y 来控制最后一步裁剪的位置
     *   - x/y 必须为整数, 取值范围为 0-10, 此方法内部使用 Math.round 来格式化 x/y
     *   - x 为 0 时表示裁取最左端, x 为 10 时表示裁取最右端
     *   - y 为 0 时表示裁取最上端, y 为 10 时表示裁取最下端
     *   - x/y 默认值均为 5, 即裁取正中间
     */
    thumbnailImage(options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 剪裁坐标
         */
        axis: {
            /**
             * x 坐标, 必须需为整数
             */
            x: number;
            /**
             * y 坐标, 必须需为整数
             */
            y: number;
        };
        /**
         * 缩略图的宽度
         */
        width?: number;
        /**
         * 缩略图的高度
         */
        height?: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 处理图片
     *
     * 此方法接收一组图片操作, 按操作顺序依次处理图片, 可选的操作包括：
     * - 修改图片质量
     * - interlace 图片
     * - 旋转图片
     * - 高斯模糊图片
     * - 裁剪图片
     * - 生成缩略图
     * - 预览文件
     * - 发送文件消息
     *
     * 每个操作所需的参数请参考上面的各个方法, 除了上面方法列出来的参数之外, 每个操作需要提供操作类型, 分别是
     * - 'quality'
     * - 'interlace'
     * - 'rotate'
     * - 'blur'
     * - 'crop'
     * - 'thumbnail'
     *
     * <h4> 示例代码 </h4>
     *
     * ```js
     * // 裁剪后旋转
     * var url = 'http://nim.nos.netease.com/MTAxMTAwMg==/bmltYV8xNDc5OTNfMTQ0MzE0NTgyNDI0M184YjFkYTMwMS02NjcxLTRiYjktYTUwZC04ZTVlZjZlNzZjMzA=';
     * nim.processImage({
     *     url: url,
     *     ops: [
     *         {
     *             type: 'crop',
     *             x: 100,
     *             y: 0,
     *             width: 250,
     *             height: 250,
     *         },
     *         {
     *             type: 'thumbnail',
     *             mode: 'cover',
     *             width: 80,
     *             height: 80
     *         }
     *     ],
     *     done: processImageDone
     * });
     * function processImageDone(error, obj) {
     *     console.log('处理图片' + (!error?'成功':'失败'), error, obj);
     * }
     * ```
     */
    processImage(options: {
        url: string;
        /**
         * 操作序列. 按操作顺序依次处理图片, 具体格式参照前面几个和 image 相关的处理接口
         *
         * 类似这样的效果
         *
         * [
         *   {
         *     type: 'crop',
         *     x: 100,
         *     y: 0,
         *     width: 250,
         *     height: 250,
         *   },
         *   {
         *      type: 'thumbnail',
         *      mode: 'cover',
         *      width: 80,
         *      height: 80
         *   }
         * ]
         */
        ops: NIMStrAnyObj;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * 获取文件的短链接的鉴权 token
     *
     * - 在上传文件时，若设置参数nosScenes为nim_security_开头的字符串，则需要调用该接口获取token后才能下载文件。nosScenes可在初始化时全局配置，也可在发送、预览某文件时单独设置
     * - 下载文件后请及时 {@link CloudStorageInterface.deleteNosAccessToken}，避免token泄漏
     */
    getNosAccessToken(options: {
        /**
         * 文件 url
         */
        url: string;
        userAgent?: string;
        ext?: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            token: string;
            /**
             * 完整可访问的链接
             */
            resUrl: string;
        }) => void;
    }): void;
    /**
     * 获取短链接的鉴权 token
     */
    deleteNosAccessToken(options: {
        token: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * @deprecated 已废弃。修改图片下载的名字
     *
     * <br />
     *
     * 如果文件存储使用的是网易云信的 NOS ，请参照存储对象文档 https://sf.163.com/help/documents/114085619316215808
     */
    packFileDownloadName(options: {
        url: string;
        name: string;
    }): string;
    /**
     * @deprecated 已废弃。音视频转 MP3
     *
     * <br />
     *
     * 如果文件存储使用的是网易云信的 NOS ，请参照存储对象文档 https://sf.163.com/help/documents/114085619316215808
     */
    audioToMp3(options: {
        url: string;
    }): string;
    /**
     * @deprecated 预览去除图片元信息。已废弃，请使用 {@link CloudStorageInterface.stripImageMeta}
     */
    viewImageStripMeta(options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览图片质量。已废弃，请使用 {@link CloudStorageInterface.qualityImage}
     */
    viewImageQuality(options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览 interlace 图片。已废弃，请使用 {@link CloudStorageInterface.interlaceImage}
     */
    viewImageInterlace(options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览旋转图片。已废弃，请使用 {@link CloudStorageInterface.rotateImage}
     */
    viewImageRotate(options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览模糊图片。已废弃，请使用 {@link CloudStorageInterface.blurImage}
     */
    viewImageBlur(options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览图片质量。已废弃，请使用 {@link CloudStorageInterface.cropImage}
     */
    viewImageCrop(options: NIMStrAnyObj): string;
    /**
     * @deprecated 生成预览缩略图。已废弃，请使用 {@link CloudStorageInterface.thumbnailImage}
     */
    viewImageThumbnail(options: NIMStrAnyObj): string;
}
export interface NIMGetFileAuthTokenResult {
    /**
     * 鉴权模式, 就是入参时的 type.
     */
    type: string;
    /**
     * 过期剩余时间，毫秒数，开发者需要自行转为 number 类型.
     */
    ttl: string;
    /**
     * type 为 "2" 时存在的全局 token
     */
    token?: string;
    /**
     * types 为 "3" 时存在的文件数组的 token，可以被转化为 JSON 对象。
     */
    tokens?: string;
}
export interface NIMBaseUploadFileOptions {
    /**
     * 文件类型，image 图片，video 视频，audio 音频，file 其他文件。
     */
    type: 'video' | 'audio' | 'image' | 'file';
    /**
     * Input[type=file] 的 DOM 节点或者节点 ID。
     *
     * 注：浏览器专属，SDK 会读取该节点下的第一个被选择文件, 在上传完成前请不要操作该节点下的文件
     *
     * 注2: fileInput、file、filePath、blob 只需要填一个
     */
    fileInput?: string | HTMLInputElement;
    /**
     * 临时文件的路径
     *
     * 注：RN，小程序等特殊的 JS 运行环境专用（chooseImage 拿到的该临时路径）
     *
     * 注2: fileInput、file、filePath、blob 只需要填一个
     */
    filePath?: string;
    /**
     * JS 的 File 对象。
     *
     * 注：若有可能，更推荐开发者使用这个传参，携带文件的名字后缀等信息，
     *
     * 注2: fileInput、file、filePath、blob 只需要填一个
     */
    blob?: File;
    /**
     * 是否使用普通上传。
     *
     * 注：默认 false 是使用分片上传的。普通上传限制是 100MB 文件，当宿主环境不支持 File 无法做文件切片时会自动退化为普通上传。
     */
    commonUpload?: boolean;
    /**
     * 限制文件的大小，单位字节.
     *
     * 注：小程序，rn 等环境，由于只有 filePath 而没有 file 具体信息，无法使用这个字段做判断，只能让开发者自行在选择文件是判定。
     */
    maxSize?: number;
    /**
     * #### 常见说明
     * - 常用场景为根据资源类型设置存储场景，然后设置定时任务调用 <a target="_blank" href="https://doc.yunxin.163.com/messaging/docs/zQyNDM0NzE?platform=server#%E6%B8%85%E7%90%86%E5%B7%B2%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6">清理文件</a> 删除。
     * - IM 默认的存储场景为: 'im'
     * - Chatroom 默认的存储场景为: 'chatroom'
     *
     * #### 存储场景优先级
     * - sendFile 或者 previewFile 时的 nosScene 参数
     * - 初始化参数的 nosScene 参数
     * - 默认参数: 'im' 或者 'chatroom'
     *
     * #### 私有化安全链接
     * - 私有化生成安全链接，请设置 nosScene: '_nim_security'
     * - 接收方使用 getNosAccessToken 获取带有鉴权信息的链接
     * - 使用 deleteNosAccessToken 设置鉴权信息无效
     */
    nosScene?: string;
    /**
     * 上传的文件在网易云存储服务（NetEase Object Storage, NOS）上的存储有效期。
     *
     * @notice 默认为 Infinity（永久）。设置的时间不得小于一天，单位：秒。
     *
     */
    nosSurvivalTime?: number;
}
export interface NIMPreviewFileOptions extends NIMBaseUploadFileOptions {
    /**
     * #### 常见说明
     * - 常用场景为根据资源类型设置存储场景，然后设置定时任务调用 <a target="_blank" href="https://doc.yunxin.163.com/messaging/docs/zQyNDM0NzE?platform=server#%E6%B8%85%E7%90%86%E5%B7%B2%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6">清理文件</a> 删除。
     * - IM 默认的存储场景为: 'im'
     * - Chatroom 默认的存储场景为: 'chatroom'
     *
     * #### 存储场景优先级
     * - sendFile 或者 previewFile 时的 nosScene 参数
     * - 初始化参数的 nosScene 参数
     * - 默认参数: 'im' 或者 'chatroom'
     *
     * #### 私有化安全链接
     * - 私有化生成安全链接，请设置 nosScene: '_nim_security'
     * - 接收方使用 getNosAccessToken 获取带有鉴权信息的链接
     * - 使用 deleteNosAccessToken 设置鉴权信息无效
     */
    nosScene?: string;
    /**
     * 上传的文件在网易云存储服务（NetEase Object Storage, NOS）上的存储有效期。
     *
     * @notice 默认为 Infinity（永久）。设置的时间不得小于一天，单位：秒。
     *
     */
    nosSurvivalTime?: number;
    /**
     * 上传进度监听回调
     *
     * 注：IE9 以下不支持上传进度事件，故而回调失效
     */
    uploadprogress?: (obj: NIMUploadFileProgressObject) => void;
    /**
     * 上传进度监听回调
     *
     * 注：IE9 以下不支持上传进度事件，故而回调失效
     */
    done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUploadFileResult) => void;
}
export interface NIMUploadFileResult {
    /**
     * 文件名
     */
    name: string;
    /**
     * 文件 url
     */
    url: string;
    /**
     * 文件后缀
     */
    ext: string;
    /**
     * 文件大小，单位字节
     */
    size?: number;
    /**
     * 宽度。
     */
    w?: number;
    /**
     * 高度
     */
    h?: number;
    /**
     * 音频/视频 文件的时长
     */
    dur?: number;
    /**
     * 图片的转向
     */
    orientation?: string;
    /**
     * 音频解码格式
     */
    audioCodec?: string;
    /**
     * 视频解码格式
     */
    videoCodec?: string;
    /**
     * 音视频文件的容器
     */
    container?: string;
}
/**
 * 上传文件进度
 */
export interface NIMUploadFileProgressObject {
    /**
     * 总大小
     */
    total: number;
    /**
     * 已上传大小
     */
    loaded: number;
    /**
     * 已上传进度
     */
    percentage: number;
    /**
     * 已上传进度的文本描述
     */
    percentageText: string;
}
