import { NIMMessage, NIMMsgScene } from './MessageInterface';
import { NIMCommonError, NIMStrAnyObj } from '../types';
export interface MessageExtendInterface {
    /**
     * 获取 thread 消息列表
     */
    getThreadMsgs(options: {
        /**
         * 场景
         */
        scene: NIMMsgScene;
        /**
         * thread根消息的from，即发送者账号
         */
        threadMsgFromAccount: string;
        /**
         * thread根消息的to，即接受者账号
         */
        threadMsgToAccount: string;
        /**
         * thread根消息的 idServer
         */
        threadMsgIdServer: string;
        /**
         * thread根消息的time
         */
        threadMsgTime: number;
        /**
         * 时间戳, 开始时间, 精确到 ms, 默认为0
         */
        beginTime?: number;
        /**
         * 时间戳, 结束时间, 精确到 ms, 默认为服务器的当前时间
         */
        endTime?: number;
        /**
         * 上次查询的最后一条消息的 idServer, 第一次不填
         */
        lastMsgId?: string;
        /**
         * 本次查询的消息数量限制, 最多100条, 默认100条
         */
        limit?: number;
        /**
         * 默认false表示从 endTime 开始往前查找历史消息，true 表示从 beginTime 开始往后查找历史消息
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 相关的消息列表
             */
            msgs: NIMMessage[];
            /**
             * thread 根消息
             */
            threadMsg: NIMMessage;
            /**
             * 获取的时间戳
             */
            timetag: string;
            /**
             * 消息总数
             */
            total: string;
        }) => void;
    }): void;
    /**
     * 通过消息 id 等信息批量查询历史消息，thread 聊天专用
     *
     *
     */
    getMsgsByIdServer(options: {
        /**
         * 根据idServer查询服务器消息。主要用于Thread消息场景。参数数组长度最大为100。
         */
        reqMsgs: {
            /**
             * 消息场景：
             *
             * <ul><li>p2p：单聊场景</li><li>team：群聊场景</li><li>superteam：超大群场景</li></ul>
             */
            scene: NIMMsgScene;
            /**
             * 消息发送方, 帐号
             */
            from: string;
            /**
             * 消息接收方, 帐号或群id
             */
            to: string;
            /**
             * 时间戳
             */
            time: number;
            /**
             * 服务器用于区分消息用的ID, 用于获取历史消息和获取包含关键词的历史消息。
             *
             * 注：此字段可能没有, 比如说消息被反垃圾过滤了。
             */
            idServer: string;
        }[];
    }): void;
    /**
     * 添加快捷评论
     *
     * - 评论只有几个简单的字段，可删除，不计入未读数
     * - 发送后，消息发送方和评论发送方的多端同步设备会触发 {@link NIMGetInstanceOptions.onQuickComment} 回调函数
     */
    addQuickComment(options: {
        /**
         * 被回复的消息
         */
        msg: NIMMessage;
        /**
         * 评论的内容。
         *
         * 注：输入整数，开发者需要自定义映射规则。如 1 为点赞的表情、2 对应鼓掌的表情等
         */
        body: number;
        /**
         * 扩展内容
         */
        custom?: string;
        /**
         * 是否需要推送，默认 false。
         */
        needPush?: boolean;
        /**
         * 是否需要消息计数（APP 的角标计数），默认 false
         */
        needBadge?: boolean;
        /**
         * 推送的标题
         */
        pushTitle?: string;
        /**
         * 自定义推送文案
         */
        apnsText?: string;
        /**
         * 第三方自定义的推送属性，限制 json
         */
        pushPayload?: NIMStrAnyObj;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 评论内容
             */
            comment: {
                /**
                 * 快捷评论内容
                 */
                body: number;
                /**
                 * 扩展内容
                 */
                custom?: string;
                /**
                 * 该评论的发送方的 account ID
                 */
                from: string;
                /**
                 * 评论的发送时间。
                 */
                time: number;
            };
            /**
             * 消息, 摘取 NIMMessage 结构里的几个字段，且 idServer 在这里必须存在。
             */
            msg: {
                /**
                 * 消息场景：
                 *
                 * <ul><li>p2p：单聊场景</li><li>team：群聊场景</li><li>superteam：超大群场景</li></ul>
                 */
                scene: NIMMsgScene;
                /**
                 * 消息发送方, 帐号
                 */
                from: string;
                /**
                 * 消息接收方, 帐号或群id
                 */
                to: string;
                /**
                 * 时间戳
                 */
                time: number;
                /**
                 * 服务器用于区分消息用的ID, 用于获取历史消息和获取包含关键词的历史消息。
                 *
                 * 注：此字段可能没有, 比如说消息被反垃圾过滤了。
                 */
                idServer: string;
            };
        }) => void;
    }): void;
    /**
     * 删除一个快捷评论
     *
     * - 评论只有几个简单的字段，可删除，不计入未读数
     * - 发送后，消息发送方和评论发送方的多端同步设备会触发 {@link NIMGetInstanceOptions.onDeleteQuickComment} 回调函数
     */
    deleteQuickComment(options: {
        /**
         * 被回复的消息
         */
        msg: NIMMessage;
        /**
         * 评论的内容。
         *
         * 注：输入整数，开发者需要自定义映射规则。如 1 为点赞的表情、2 对应鼓掌的表情等
         */
        body: number;
        /**
         * 扩展内容
         */
        custom?: string;
        /**
         * 是否需要推送，默认 false。
         */
        needPush?: boolean;
        /**
         * 是否需要消息计数（APP 的角标计数），默认 false
         */
        needBadge?: boolean;
        /**
         * 推送的标题
         */
        pushTitle?: string;
        /**
         * 自定义推送文案
         */
        apnsText?: string;
        /**
         * 第三方自定义的推送属性，限制 json
         */
        pushPayload?: NIMStrAnyObj;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 评论内容
             */
            comment: {
                /**
                 * 快捷评论内容
                 */
                body: number;
                /**
                 * 扩展内容
                 */
                custom?: string;
                /**
                 * 该评论的发送方的 account ID
                 */
                from: string;
                /**
                 * 评论的发送时间。
                 */
                time: number;
            };
            /**
             * 消息, 摘取 NIMMessage 结构里的几个字段，且 idServer 在这里必须存在。
             */
            msg: {
                /**
                 * 消息场景：
                 *
                 * <ul><li>p2p：单聊场景</li><li>team：群聊场景</li><li>superteam：超大群场景</li></ul>
                 */
                scene: NIMMsgScene;
                /**
                 * 消息发送方, 帐号
                 */
                from: string;
                /**
                 * 消息接收方, 帐号或群id
                 */
                to: string;
                /**
                 * 时间戳
                 */
                time: number;
                /**
                 * 服务器用于区分消息用的ID, 用于获取历史消息和获取包含关键词的历史消息。
                 *
                 * 注：此字段可能没有, 比如说消息被反垃圾过滤了。
                 */
                idServer: string;
            };
        }) => void;
    }): void;
    /**
     * 批量查询消息的快捷评论
     */
    getQuickComments(options: {
        /**
         * 被回复的消息
         */
        msgs: NIMMessage[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 快捷评论的最近更新时间
             */
            commentTimetag: number;
            /**
             * 评论内容
             * <ul>
             *  <li>body: 快捷评论内容</li>
             *  <li>custom: 扩展内容</li>
             *  <li>from: 该评论的发送方的 account ID</li>
             *  <li>time: 评论的发送时间</li>
             * </ul>
             */
            comments: {
                /**
                 * 快捷评论内容
                 */
                body: number;
                /**
                 * 扩展内容
                 */
                custom?: string;
                /**
                 * 该评论的发送方的 account ID
                 */
                from: string;
                /**
                 * 评论的发送时间。
                 */
                time: number;
            }[];
            /**
             * 被评论的消息的 idServer
             */
            idServer: string;
            /**
             * 被评论的消息的 idClient
             */
            idClient: string;
        }) => void;
    }): void;
    /**
     * 添加收藏，收藏内容由用户根据业务场景自行决定。收藏内容仅当前用户可见。
     */
    addCollect(options: {
        /**
         * 类型，开发者可自定义映射关系，只能是整数
         */
        type: number;
        /**
         * 收藏的具体数据内容, 最大 20480 字符数
         */
        data: string;
        /**
         * 收藏的扩展字段, 最大 1024 字符数
         */
        custom?: string;
        /**
         * 去重唯一 ID。
         *
         * 注：当传入 uniqueId 时，会校验此 uniqueId 之前是否存在对应的收藏记录，若不存在则会新增收藏，已存在则会更新这个收藏。
         */
        uniqueId?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 收藏内容
             */
            collect: NIMCollect;
        }) => void;
    }): void;
    /**
     * 批量删除收藏
     */
    deleteCollects(options: {
        /**
         * 要删除的收藏列表, 最大长度限制 100
         */
        collectList: NIMCollect[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 入参里传的要删除的收藏列表
             */
            collectList: NIMCollect[];
            /**
             * 成功删除的个数
             */
            deleteNum: number;
        }) => void;
    }): void;
    /**
     * 更新收藏，只能更新 custom 字段
     */
    updateCollect(options: {
        /**
         * 收藏对象. 只能更新 custom 字段, 开发者把新的 custom 字段写入这个对象中传入。
         *
         * 注: 如果要删除 custom 字段，那么传入的对象中不存在 custom 字段即可
         */
        collect: NIMCollect;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMCollect) => void;
    }): void;
    /**
     * 查询收藏列表
     */
    getCollects(options: {
        /**
         * 类型，开发者可自定义映射关系，只能是整数. 缺省表示查询所有的类型
         */
        type?: number;
        /**
         * 开始时间的时间戳, 精确到ms, 默认为0
         */
        beginTime?: number;
        /**
         * 结束时间的时间戳, 精确到ms, 默认为服务器最新时间
         */
        endTime?: number;
        /**
         * 上次查询的最后一条收藏的`id`
         *
         * 注：从第二页开始建议填写，便于服务器区分相同时间戳的两条记录。
         */
        lastId?: string;
        /**
         * 本次查询的消息数量限制, 默认100条
         */
        limit?: number;
        /**
         * 排列顺序。默认为 false
         *
         * <ul>
         * <li>为 true 则代表按时间戳升序查询，从 beginTime 开始查询到 endTime 之间的 limit 条记录</li>
         * <li>为 true 则第二页开始，需要设置 beginTime 为上次查询的最后一条收藏时间
         * <li>为 false 则代表按时间戳降序查询，从 endTime 开始查询到 beginTime 之间的 limit 条记录</li>
         * <li>为 false 则第二页开始，需要设置 endTime 为上次查询的最后一条收藏时间
         *
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 收藏列表
             */
            collectList: NIMCollect[];
            /**
             * 收藏总数
             */
            total: number;
        }) => void;
    }): void;
    /**
     * Pin 住一条消息。若成功，会触发多端登录设备的 {@link NIMGetInstanceOptions.onPinMsgChange | onPinMsgChange} 回调
     */
    addMsgPin(options: {
        /**
         * 被 pin 标记的消息的基础结构
         */
        msg: NIMMsgPinInfo;
        /**
         * pin 标记的扩展字段
         */
        pinCustom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMsgPin) => void;
    }): void;
    /**
     * 更新被 Pin 的消息。调用后触发多端同步设备的 {@link NIMGetInstanceOptions.onPinMsgChange | onPinMsgChange} 回调
     *
     * 注：只能更新扩展字段
     */
    updateMsgPin(options: {
        /**
         * 被 pin 标记的消息的基础结构
         */
        msg: NIMMsgPinInfo;
        /**
         * pin 标记的扩展字段
         */
        pinCustom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMsgPin) => void;
    }): void;
    /**
     * 取消消息的 Pin 状态。调用后触发多端同步设备的 {@link NIMGetInstanceOptions.onPinMsgChange | onPinMsgChange} 回调
     */
    deleteMsgPin(options: {
        /**
         * 被 pin 标记的消息的基础结构
         */
        msg: NIMMsgPinInfo;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMsgPin) => void;
    }): void;
    /**
     * 传入会话id，获取该会话所有pin消息列表
     */
    getMsgPins(options: {
        /**
         * session id
         */
        id: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * session id
             */
            id: string;
            pins: (NIMMsgPinInfo & {
                pinCustom: string;
                pinFrom: string;
            })[];
        }) => void;
    }): void;
}
export declare type NIMMsgPinInfo = {
    /**
     * 消息场景：
     *
     * <ul><li>p2p：单聊场景</li><li>team：群聊场景</li><li>superteam：超大群场景</li></ul>
     */
    scene: 'p2p' | 'team' | 'superTeam';
    /**
     * 消息发送方, 帐号
     */
    from: string;
    /**
     * 消息接收方, 帐号或群id
     */
    to: string;
    /**
     * 时间戳
     */
    time: number;
    /**
     * 发送方信息更新时间
     */
    /**
     * 端测生成的消息id, 可作为消息唯一主键使用。
     */
    idClient: string;
    /**
     * 服务器用于区分消息用的ID, 用于获取历史消息和获取包含关键词的历史消息。
     */
    idServer: string;
    /**
     * 消息所属的会话的ID
     */
    sessionId: string;
};
export interface NIMMsgPin {
    /**
     * 被 pin 标记的消息的基础结构
     */
    msg: NIMMsgPinInfo;
    pinTag: {
        /**
         * pin 标记的扩展字段
         */
        pinCustom?: string;
        /**
         * pin 标记的操作者
         */
        pinFrom: string;
    };
}
/**
 * 收藏内容定义
 */
export interface NIMCollect {
    /**
     * 收藏的 id
     */
    id: string;
    /**
     * 类型，开发者可自定义映射关系，只能是整数
     */
    type: number;
    /**
     * 收藏的具体数据内容
     */
    data: string;
    /**
     * 收藏的扩展字段
     */
    custom?: string;
    /**
     * 去重唯一 ID
     */
    uniqueId: string;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 修改时间
     */
    updateTime: number;
}
