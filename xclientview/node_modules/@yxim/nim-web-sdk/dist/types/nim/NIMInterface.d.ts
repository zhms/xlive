import { NIMCommonError, NIMStrAnyObj } from '../types';
import { NIMGetInstanceOptions } from './types';
/**
 * NIM 实例连接的基础接口定义
 */
export interface NIMInterface {
    /**
     * @deprecated
     *
     * 退出登录。
     *
     * 注：SDK 版本 v9.6.0 以下推荐先调用 logout 再调用 disconnect/destroy 来保证退出。v9.6.0 及以上不需要调用这个 API，disconnect/destroy 断开前会自动调用。
     */
    logout(): void;
    /**
     * 断开IM连接，但不销毁IM实例。调用 connect 重新登录后，会基于实例状态增量同步数据
     *
     * 注意，在9.9.0以及之前版本，调用 destroy 后，会直接触发 ondisconnect 回调函数，但此时长连接并未真正销毁。只有在 done 回调触发时才能保证长连接真正销毁。为了避免重连时多端互踢，用户应该在 destroy 的 done 回调中设置重连等操作
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMGetInstanceOptions.ondisconnect}</li>
     * </ul>
     * <h4>注意事项</h4>
     *
     */
    disconnect(options: {
        /**
         * done 回调。该回调需用户自定义。
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     * 使用 disconnect 方法登出IM后，可以调用 connect 重新登录。调用 getInstance 后会自动建立长连接，无需调用 connect
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMGetInstanceOptions.onconnect}</li>
     * </ul>
     *
     * <h4>示例</h4>
     *
     * ```js
     * nim.disconnect({
     *   done: function() {
     *     nim.connect()
     *   }
     * })
     * ```
     */
    connect(): void;
    /**
     * 断开IM连接，并销毁IM实例。销毁实例后，无法调用 connect 重新连接。
     *
     * 注意，在9.9.0以及之前版本，调用 destroy 后，会直接触发 ondisconnect 回调函数，但此时长连接并未真正销毁。只有在 done 回调触发时才能保证长连接真正销毁。为了避免重连时多端互踢，用户应该在 destroy 的 done 回调中设置重连等操作
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMGetInstanceOptions.ondisconnect}</li>
     * </ul>
     *
     */
    destroy(options: {
        /**
         * done 回调。该回调需开发者自定义。
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     * 将使用同一 IM 账号登录的其他设备端踢下线。
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMGetInstanceOptions.ondisconnect}</li>
     * <li>{@link NIMGetInstanceOptions.onloginportschange}</li>
     * </ul>
     *
     */
    kick(options: {
        /**
         * 踢当前用户登录的其它端
         */
        deviceIds: [];
        /**
         * done 回调。该回调需开发者自定义。
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     *
     * 更新原 NIM 实例的初始化参数配置，可配置的参数与 {@link NIM.getInstance} 方法的可配置的参数相同。
     *
     * <h4>使用场景</h4>
     *
     * 任何需要更新初始化参数配置的场景。例如：
     *
     * <ul><li>采用动态 token 登录时，可通过该 API 更新动态 token。</li><li>采用静态 token  登录时，如果需要刷新了静态 token，可通过该 API 更新静态 token。</li></ul>
     *
     * <note type=note>IM 登录相关详情，请参见<a href="https://doc.yunxin.163.com/messaging/docs/zE0NDY4Njc?platform=web" target="_blank">初始化并登录 IM。</a></note>
     *
     */
    setOptions(options: NIMGetInstanceOptions): void;
}
