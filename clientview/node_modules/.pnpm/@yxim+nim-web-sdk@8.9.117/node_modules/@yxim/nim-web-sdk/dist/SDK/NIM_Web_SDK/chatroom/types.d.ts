import { NIMCommonError, NIMStrAnyObj } from '../types';
import { NIMChatroomMessage } from './NIMChatroomMessageInterface';
export interface NIMChatroomGetInstanceOptions {
    /**
     * 是否为安全模式
     *
     * secure 模式下会通过 https 协议跟服务器建立连接, 非 secure 模式下会通过 http 协议跟服务器建立连接, 默认 true
     */
    secure: boolean;
    /**
     * 应用的 App Key，即您的应用在云信的账号。
     */
    appKey: string;
    /**
     * 账号ID，应用内唯一。
     *
     * <h4>匿名模式</h4>
     * <ul>
     * <li>匿名模式第一次登录，无需填写 account。后续调用 getInstance 时，为防止创建新的聊天室实例，应该传入之前获取的 account</li>
     * <li>匿名模式登录，isAnonymous 应该设置为 true</li>
     * <li>匿名模式登录，必须填写用户昵称。非匿名模式为选填。建议填写头像</li>
     * </ul>
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.isAnonymous}</li>
     * </ul>
     */
    account: string;
    /**
     * 是否匿名登录。默认为 false
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.account}</li>
     * <li>{@link NIMChatroomGetInstanceOptions.chatroomNick}</li>
     * </ul>
     */
    isAnonymous: boolean;
    /**
     * 帐号的登录凭证，在初始化建立连接，或者重连时使用token校验。若匿名登录，不需要填写token
     */
    token: string;
    /**
     * 聊天室长连接地址。聊天室地址推荐通过服务器接口获取
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/TMxODkzNjE?platform=server">获取聊天室地址</a></li>
     * </ul>
     */
    chatroomAddresses: string[];
    /**
     * 聊天室房间号
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/jA0MzQxOTI?platform=server">创建聊天室</a></li>
     * </ul>
     */
    chatroomId: string;
    /**
     * 是否需要开启 XHR 请求，默认 true
     *
     * v9.12.0 新增
     *
     * 注: 开启 XHR 请求，如 socket.io 机制，会在建立长连接前从 IM 服务器获取一个长连接 ID，以及建议的连接通道 [websocket, xhr-polling] 等.
     *
     * 建议非 IE 兼容需求的可以设置为 false, 在 IE 6～10 里此设置无效，必定会走 true 的逻辑。
     *
     * 追加注: 因为服务器在建连后的协议里，无法区分究竟是 xhr-polling 连接还是 websocket 连接发出的协议。
     * 并且 xhr-polling ，若跳过 sessionId 校验，有一些漏洞能被攻击者利用。
     * 所以开关直接隐藏但是代码保留，服务器根据有需要的人部署独立的 weblink 集群只给此客户使用，风险自己承担。
     */
    /**
     * socket 并发连接数。
     *
     * 自从 v9.12.0 开始支持
     * Socket 并发连接数上限。仅支持设置为 1-3 的整数。默认值为1，表示不支持并发连接。
     * 如果您需要加快 Socket  连接，建议您设置该参数。
     */
    socketConcurrent?: number;
    /**
     * 标识本次登录所在的长连接归属于哪些标签，是一个json的数组，同一个长连接最多支持设置10个标签，每个标签最多32个字符，如：["abc", "def"]
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.notifyTargetTags}</li>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/DI2MDg3NzU?platform=web">聊天室标签功能</a></li>
     * </ul>
     */
    tags?: string[];
    /**
     * 标签表达式。表示本次登录以及随后的登出操作，产生的进出通知应该广播给哪些标签用户，
     *
     * 若缺省则服务器会根据 {@link NIMChatroomGetInstanceOptions.tags} 自动生成一个标签表达式。
     *
     * 生成的规则是将 tags 中的所有标签通过 and 关键词进行组合，表示只有同时设置了所有 tags 中的标签的用户能收到我的进出通知
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.tags}</li>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/DI2MDg3NzU?platform=web">聊天室标签功能</a></li>
     * </ul>
     */
    notifyTargetTags?: string;
    /**
     * 登录 Chatroom 的鉴权方式（默认为 0）：
     *
     * <ul>
     * <li>0：通过传入静态 token 进行鉴权。静态 token 恒定不变，且默认永久有效，除非主动调用云信服务端 API <a href="https://doc.yunxin.163.com/messaging/docs/DUxNDQ3NjA?platform=server" target="_blank">刷新 token</a>。</li>
     * <li>1：通过传入动态 token 进行鉴权。动态 token 可设置有效期，因此具备时效性。采用该鉴权方式可有效提升token 破解难度，降低密码泄露风险。动态鉴权生成方式请参考: <a href="https://doc.yunxin.163.com/messaging/docs/zE2NzA3Mjc?platform=server#%E5%8A%A8%E6%80%81token%E9%89%B4%E6%9D%83" target="_blank">服务器动态token</a></li>
     * <li>2：过云信的第三方回调功能进行鉴权。云信服务端不做 IM 登录鉴权，鉴权工作需由指定的第三方服务器（可以是应用服务器）进行。</li>
     * </ul>
     *
     * @note 具体的 token 获取方式和相关登录方式，请参见<a href="https://doc.yunxin.163.com/messaging/docs/zE0NDY4Njc?platform=web" target="_blank">初始化与登录</a>。
     */
    loginAuthType?: number;
    /**
     * 登录时的扩展字段
     *
     * 注：可抄送给开发者服务器，不会同步至其他端
     */
    loginExt?: string;
    /**
     * nos文件存储全局配置，存储场景，实例有效，默认chatroom
     */
    nosScene?: string;
    /**
     * nos文件存储全局配置，存储有效时间，实例有效，默认Infinity 不得小于一天，单位秒
     */
    nosSurvivalTime?: number;
    /**
     * 进入聊天室后展示的昵称, 如果不设置并且托管了用户资料, 那么使用用户资料里面的昵称。如果是匿名登录，该参数为必填
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.isAnonymous}</li>
     * </ul>
     */
    chatroomNick?: string;
    /**
     * 进入聊天室后展示的头像, 如果不设置并且托管了用户资料, 那么使用用户资料里面的头像
     */
    chatroomAvatar?: string;
    /**
     * 扩展字段, 设置了之后, 通过 {@link NIMChatroomMemberInterface.getChatroomMembers | getChatroomMembers} 获取的聊天室成员信息会包含此字段
     *
     * - 推荐使用JSON格式构建, 非JSON格式的话, Web端会正常接收, 但是会被其它端丢弃
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomMemberInterface.getChatroomMembers}</li>
     * </ul>
     */
    chatroomCustom?: string;
    /**
     * 扩展字段。在 {@link NIMChatroomGetInstanceOptions.onmsgs | onmsgs} 回调函数中，在 `attach.type === 'memberEnter'`的通知中，其中 `attach.custom` 即为登录时设置的 `chatroomEnterCustom`
     *
     * - 推荐使用JSON格式构建, 非JSON格式的话, Web端会正常接收, 但是会被其它端丢弃
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * </ul>
     *
     * <h4>示例</h4>
     *
     * ```js
     * // 用户 A 登录
     *  Chatroom.getInstance({
     *    "account": "A",
     *    "chatroomEnterCustom": "{'enterCustom': 'enterCustom'}"
     *  })
     *
     * // 已登录的用户 B 收到 onmsgs 回调
     *  Chatroom.getInstance({
     *    "account": "B",
     *    "onmsgs": function(msg) {
     *       if (msg.type === 'notification' && msg.attach.type === 'memberEnter') {
     *         // {'enterCustom': 'enterCustom'}
     *         console.log(msg.attach.custom)
     *       }
     *    }
     *  })
     * ```
     */
    chatroomEnterCustom?: string;
    /**
     * 是否打印调试日志。默认为false，即不打印日志
     *
     * @deprecated 推荐使用logLevel控制日志打印级别
     */
    debug?: boolean;
    /**
     * 日志级别，默认为 off，即不输出任何日志。
     *
     * - off：不输出任何日志
     * - debug：输出debug、info、warn 和 error 级别的日志
     * - info：输出 info、warn、和 error 级别的日志
     * - warn：输出 warn 和 error 级别的日志
     * - error：输出 error 级别的日志
     *
     */
    logLevel?: 'debug' | 'log' | 'info' | 'warn' | 'error' | 'off';
    /**
     * 客户端自定义tag。最大32个字符
     *
     * 注：这个字段常用于登录时，多端同步通知其他端登陆，开发者设置可用于区分。
     */
    customTag?: string;
    /**
     * 自定义客户端类型，请设置大于 0 的整数
     *
     * 注：默认端类型只有 Web，PC，AOS，iOS，如果开发者需要加以更细致的类型区分，如微信小程序等环境，可用这个字段自行做映射。
     */
    customClientType?: string;
    /**
     * 是否开启自动重连，默认 true
     *
     * <h4>注意</h4>
     * <ul>
     * <li>长连接因为网络，心跳超时等原因断开，sdk 提供自动重连</li>
     * <li>重连的时间间隔从 1.6～8s 之间累加，每次重连将触发 onwillreconnect 事件</li>
     * </ul>
     */
    needReconnect?: boolean;
    /**
     * SDK 尝试重连的最大次数，超过后则不再尝试重连。
     *
     * @note 当重连尝试达到最大次数，将结束重连过程，最终触发 ondisconnect 回调，表示彻底断开。
     */
    reconnectionAttempts?: number;
    /**
     * 是否开启快速自动重连，默认 false。若设置为 true，NIM SDK 会监听浏览器的 offline 和 online 事件来嗅探网络断开和恢复，将会做相应的断开和重连策略。
     *
     * @notice 该字段只有在 needReconnect 为 true 时才有效。
     */
    quickReconnect?: boolean;
    /**
     * 坐标x,非必传,空间消息专用
     */
    loc_x?: number;
    /**
     * 坐标y,非必传,空间消息专用
     */
    loc_y?: number;
    /**
     * 坐标z,非必传,空间消息专用
     */
    loc_z?: number;
    /**
     * 订阅的消息的距离
     */
    distance?: number;
    /**
     * 是否对日志做额外的处理，诸如日志存储、日志上报等等，该函数会截获console日志的参数，供开发者使用
     * 是否对日志做额外的处理，诸如日志存储、日志上报等等。
     *
     * 该函数会截获 SDK 日志的参数，供开发者使用。
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.logLevel} 日志等级</li>
     * </ul>
     *
     * <h4>示例</h4>
     *
     * ```js
     * const logs = []
     *
     * setInterval(() => {
     *     if (logs.length > 0) {
     *         //每隔2分钟，将logs的内容上传到您的业务服务器
     *         //...
     *
     *         //清空logs
     *         logs = []
     *     }
     * }, 120000)
     *
     * Chatroom.getInstance({
     *   logFunc: {
     *     log: function (data) {
     *         logs.push(`log: ${data}`)
     *     },
     *     warn: function (data) {
     *         logs.push(`warn: ${data}`)
     *     },
     *     info: function (data) {
     *         logs.push(`info: ${data}`)
     *     },
     *     debug: function (data) {
     *         logs.push(`debug: ${data}`)
     *     },
     *     error: function (data) {
     *         logs.push(`error: ${data}`)
     *     }
     *   }
     * })
     */
    logFunc?: (...args: (string | NIMStrAnyObj)[]) => void;
    /**
     * SDK 与云信服务端建立长连接的回调。用户可以通过onwillreconnect, onconnect, ondisconnect等回调函数，在界面中提示应用的网络状态
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onwillreconnect}</li>
     * <li>{@link NIMChatroomGetInstanceOptions.ondisconnect}</li>
     * </ul>
     *
     * <h4>示例</h4>
     *
     * ```js
     * Chatroom.getInstance({
     *   onconnect: function () {
     *     showToast('应用已连接')
     *   }
     * })
     * ```
     */
    onconnect?: (data: {
        /**
         * 上次登录的设备的设备号
         */
        lastLoginDeviceId: string;
        /**
         * 客户端自定义tag,登录时多端同步改字段，最大32个字符
         */
        customTag?: string;
        /**
         * 本次登录的连接号
         */
        connectionId: string;
        /**
         * IP 地址
         */
        ip: string;
        /**
         * 端口
         */
        port: string;
        /**
         * 地区
         */
        country?: string;
    }) => void;
    /**
     * SDK 与云信服务端即将重连的回调。用户可以通过onwillreconnect, onconnect, ondisconnect等回调函数，在界面中提示应用的网络状态
     *
     * @notice 该回调如果触发，说明 SDK 已与云信服务端断开长连接。此时需在界面上提示用户：连接已断开, 而且正在重新建立连接。
     *
     * <h4>示例</h4>
     *
     * ```js
     * Chatroom.getInstance({
     *   onwillreconnect: function () {
     *     showToast('网络不好，正在连接中')
     *   }
     * })
     * ```
     */
    onwillreconnect?: (data: {
        /**
         * 重试次数
         */
        retryCount: number;
        /**
         * 重试间隔
         */
        duration: number;
    }) => void;
    /**
     * SDK 与云信服务端断开长连接的回调。用户可以通过onwillreconnect, onconnect, ondisconnect等回调函数，在界面中提示应用的网络状态
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onwillreconnect}</li>
     * <li>{@link NIMChatroomGetInstanceOptions.onconnect}</li>
     * </ul>
     *
     * <h4>示例</h4>
     *
     * ```js
     * Chatroom.getInstance({
     *   ondisconnect: function (res) {
     *      showToast('已与服务器断开连接')
     *   }
     * })
     * ```
     */
    ondisconnect?: (data: NIMOnDisconnectResult) => void;
    /**
     * 钩子函数-收到聊天室消息
     */
    onmsgs?: (msgs: NIMChatroomMessage[]) => void;
    /**
     * 调用服务器接口，<a href="https://doc.yunxin.163.com/messaging/docs/TA0NjA1MzY?platform=server#%E4%BF%AE%E6%94%B9%E8%81%8A%E5%A4%A9%E5%AE%A4%E7%94%A8%E6%88%B7%E6%A0%87%E7%AD%BE">修改聊天室用户标签</a>，
     * 可以更新指定账户所有长连接的标签，并触发该回调函数
     */
    onTagsUpdate?: (currentTags: string[]) => void;
}
/**
 * 聊天室信息
 */
export interface NIMChatRoomInfo {
    /**
     * 聊天室 id
     */
    id: string;
    /**
     * 聊天室名字
     */
    name: string;
    /**
     * 聊天室公告
     */
    announcement: string;
    /**
     * 直播地址
     */
    broadcastUrl: string;
    /**
     * 第三方扩展字段
     */
    custom: string;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 创建者账号
     */
    creator: string;
    /**
     * 当前在线人数
     */
    onlineMemberNum: number;
    /**
     * 是否禁言, 禁言状态下普通成员不能发送消息, 创建者和管理员可以发送消息
     */
    mute: boolean;
}
export declare enum NIMEnumClientType {
    Android = 1,
    iOS = 2,
    PC = 4,
    WindowsPhone = 8,
    Web = 16,
    Server = 32,
    Mac = 64
}
export declare type NIMClientType = keyof typeof NIMEnumClientType;
export interface NIMOnLoginPortsChangeResult {
    /**
     * 登录的设备类型
     */
    type: string;
    /**
     * 登录设备的操作系统
     */
    os: string;
    /**
     * 登录设备的 mac 地址
     */
    mac: string;
    /**
     * 登录设备 ID
     */
    deviceId: string;
    /**
     * 登录的帐号
     */
    account: string;
    /**
     * 登录设备的连接号
     */
    connectionId: number;
    /**
     * 登录的服务器 IP
     */
    ip: string;
    /**
     * 登录时间
     */
    time: number;
    /**
     * 是否在线
     */
    online: boolean;
}
export interface NIMOnDisconnectResultOffline {
    /**
     * 断开的错误码。
     *
     * manuallyDisconnect 为主动断开
     * offlineListener 为侦听到网络变化断开
     * allAttemptsFailed 为尝试完毕所有的重连次数而断开。
     */
    code: string;
    /**
     * 原因描述
     */
    message: string;
    /**
     * 出处提示
     */
    callFunc: string;
}
export interface NIMOnDisconnectResultKicked {
    /**
     * 状态码
     */
    code: 'kicked';
    /**
     * 原因简述
     *
     * samePlatformKick: 不允许同一个帐号在多个地方同时登录
     * serverKick: 被服务器踢了
     * otherPlatformKick: 被其它端踢了
     */
    reason: string;
    /**
     * 原因描述
     */
    message: string;
    /**
     * 扩展字段
     */
    custom: string;
    /**
     * 客户端类型
     */
    from: NIMClientType;
    /**
     * 自定义端测类型
     */
    customClientType: number;
}
export interface NIMOnDisconnectResultOther {
    /**
     * 状态码
     */
    code: number;
    /**
     * 原因描述
     */
    message: string;
}
export declare type NIMOnDisconnectResult = NIMOnDisconnectResultKicked | NIMOnDisconnectResultOffline | NIMOnDisconnectResultOther;
export interface NIMUpdateChatroomOptions {
    /**
     * 待更新的聊天室信息
     */
    chatroom: {
        /**
         * 聊天室名字
         */
        name?: string;
        /**
         * 聊天室公告
         */
        announcement?: string;
        /**
         * 直播地址
         */
        broadcastUrl?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 队列管理权限：0:所有人都有权限变更队列，1:只有主播管理员才能操作变更
         */
        queuelevel?: string;
    };
    /**
     * 用户配置的对某些资料内容另外的反垃圾的业务ID
     */
    antiSpamBusinessId?: string;
    /**
     * 是否需要下发对应的通知消息
     */
    needNotify: boolean;
    /**
     * 对应的通知消息的扩展字段
     */
    custom?: string;
    /**
     * 结果回调函数
     */
    done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
        /**
         * 待更新的聊天室信息
         */
        chatroom: {
            /**
             * 聊天室名字
             */
            name?: string;
            /**
             * 聊天室公告
             */
            announcement?: string;
            /**
             * 直播地址
             */
            broadcastUrl?: string;
            /**
             * 扩展字段
             */
            custom?: string;
            /**
             * 队列管理权限：0:所有人都有权限变更队列，1:只有主播管理员才能操作变更
             */
            queuelevel?: string;
        };
        /**
         * 用户配置的对某些资料内容另外的反垃圾的业务ID
         */
        antiSpamBusinessId?: string;
        /**
         * 是否需要下发对应的通知消息
         */
        needNotify: boolean;
        /**
         * 对应的通知消息的扩展字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUpdateChatroomOptions) => void;
    }) => void;
}
