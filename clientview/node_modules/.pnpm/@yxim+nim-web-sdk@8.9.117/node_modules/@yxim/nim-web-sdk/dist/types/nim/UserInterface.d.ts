import { NIMCommonError, NIMStrAnyObj } from '../types';
export interface UserInterface {
    /**
     * 获取用户名片
     *
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E4%BC%9A%E8%AF%9D%E5%A4%B4%E5%83%8F%E4%B8%8E%E5%90%8D%E7%A7%B0.js" target="_blank">会话头像与名称</a></li>
     * </ul>
     */
    getUser(options: {
        /**
         * 账号 id
         */
        account: string;
        /**
         * 是否去服务器上获取，默认为 false。
         *
         * 为 true 从服务器获取，为 false 则从本地数据库中缓存的信息里获取
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUserNameCard) => void;
    }): void;
    /**
     * 获取一批用户的名片, 每次最多 150 个.
     */
    getUsers(options: {
        /**
         * 账号 id 列表
         */
        accounts: string[];
        /**
         * 是否去服务器上获取，默认为 false。
         *
         * 为 true 从服务器获取，为 false 则从本地数据库中缓存的信息里获取
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUserNameCard[]) => void;
    }): void;
    /**
     * 更新我的名片。调用后，初始化同步阶段收到 {@link NIMGetInstanceOptions.onmyinfo | onmyinfo} 回调，多端同步阶段收到 {@link NIMGetInstanceOptions.onupdatemyinfo | onupdatemyinfo} 回调
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/user/%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99.js" target="_blank">个人资料</a></li>
     * </ul>
     */
    updateMyInfo(options: {
        /**
         * 昵称
         */
        nick?: string;
        /**
         * 头像
         */
        avatar?: string;
        /**
         * 签名
         */
        sign?: string;
        /**
         * 性别
         */
        gender?: NIMUserGender;
        /**
         * 邮箱
         */
        email?: string;
        /**
         * 出生日期
         */
        birth?: string;
        /**
         * 电话
         */
        tel?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 用户配置的对某些资料内容另外的反垃圾的业务 ID
         */
        antiSpamBusinessId?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUserNameCard) => void;
    }): void;
    /**
     * 获取黑名单和静音列表。如果开发者在初始化SDK的时候设置了syncRelations为false, 那么就收不到onblacklist和onmutelist回调, 可以调用此接口来获取黑名单和静音列表。
     */
    getRelations(options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * <ul>
             * <li>account: IM account</li>
             * <li>isMuted: 是否被静音</li>
             * <li>isBlack: 是否被拉入黑名单</li>
             * </ul>
             */
            blacklist: {
                account: string;
                isMuted?: boolean;
                isBlack?: boolean;
                createTime: number;
                updateTime: number;
            }[];
            /**
             * <ul>
             * <li>account: IM account</li>
             * <li>isMuted: 是否被静音</li>
             * <li>isBlack: 是否被拉入黑名单</li>
             * </ul>
             */
            mutelist: {
                account: string;
                isMuted?: boolean;
                isBlack?: boolean;
                createTime: number;
                updateTime: number;
            }[];
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link UserInterface.addToBlacklist}、 {@link UserInterface.removeFromBlacklist}
     */
    markInBlacklist(options: NIMStrAnyObj): void;
    /**
     * 加入黑名单。调用后，初始化同步阶段收到 {@link NIMGetInstanceOptions.onblacklist | onblacklist} 回调，多端同步阶段收到 {@link NIMGetInstanceOptions.onsyncmarkinblacklist | onsyncmarkinblacklist} 回调
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/user/%E9%BB%91%E5%90%8D%E5%8D%95.js" target="_blank">黑名单</a></li>
     * </ul>
     */
    addToBlacklist(options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    /**
     * 移出黑名单。调用后，初始化同步阶段收到 {@link NIMGetInstanceOptions.onblacklist | onblacklist} 回调，多端同步阶段收到 {@link NIMGetInstanceOptions.onsyncmarkinblacklist | onsyncmarkinblacklist} 回调
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/user/%E9%BB%91%E5%90%8D%E5%8D%95.js" target="_blank">黑名单</a></li>
     * </ul>
     */
    removeFromBlacklist(options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link UserInterface.addToMutelist}、{@link UserInterface.removeFromMutelist}
     */
    markInMutelist(options: NIMStrAnyObj): void;
    /**
     * 加入静音列表。调用后，初始化同步阶段收到 {@link NIMGetInstanceOptions.onmutelist | onmutelist} 回调，多端同步阶段收到 {@link NIMGetInstanceOptions.onsyncmarkinmutelist | onsyncmarkinmutelist} 回调
     *
     * - 通过设置静音列表来控制单聊免打扰
     * - 被静音用户发送的消息，不会通过推送通知给用户
     * - 用户 UI 层，可以通过静音列表来决定是否渲染会话的未读数
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E4%BC%9A%E8%AF%9D%E5%85%8D%E6%89%93%E6%89%B0.js" target="_blank">会话免打扰</a></li>
     * </ul>
     */
    addToMutelist(options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    /**
     * 移出静音列表。调用后，初始化同步阶段收到 {@link NIMGetInstanceOptions.onmutelist | onmutelist} 回调，多端同步阶段收到 {@link NIMGetInstanceOptions.onsyncmarkinmutelist | onsyncmarkinmutelist} 回调
     *
     * 设置静音列表有两个作用：
     * 1. 开发者根据用户是否在静音列表，决定是否显示未读数等提示UI
     * 2. 静音列表中用户发送消息，不会触发推送服务
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E4%BC%9A%E8%AF%9D%E5%85%8D%E6%89%93%E6%89%B0.js" target="_blank">会话免打扰</a></li>
     * </ul>
     */
    removeFromMutelist(options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    /**
     * 查看某人是否在当前用户在黑名单里
     *
     * 注：该接口需要数据库支持，若没有开启本地数据库能力，done 回调里只会返回 false
     */
    isUserInBlackList(options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: boolean) => void;
    }): void;
}
export interface NIMMarkedUserInfo {
    /**
     * 账号 account ID
     */
    account: string;
    /**
     * 是否被静音
     */
    isMuted?: boolean;
    /**
     * 是否被拉入黑名单
     */
    isBlack?: boolean;
    createTime: number;
    updateTime: number;
}
export declare enum NIMEnumUserGender {
    unknown = 0,
    male = 1,
    female = 2
}
export declare type NIMUserGender = keyof typeof NIMEnumUserGender;
export interface NIMUserNameCard {
    /**
     * account ID
     */
    account: string;
    /**
     * 昵称
     */
    nick?: string;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 签名
     */
    sign?: string;
    /**
     * 性别
     */
    gender?: NIMUserGender;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 出生日期
     */
    birth?: string;
    /**
     * 电话
     */
    tel?: string;
    /**
     * 扩展字段
     */
    custom?: string;
    createTime: number;
    updateTime: number;
}
