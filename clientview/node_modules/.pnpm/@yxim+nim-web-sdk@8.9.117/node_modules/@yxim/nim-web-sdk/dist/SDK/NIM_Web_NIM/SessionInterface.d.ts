import { NIMMessage, NIMMsgScene } from './MessageInterface';
import { NIMCommonError, NIMStrAnyObj } from '../types';
export interface SessionInterface {
    /**
     * 通过 sessionId 获取本地数据库里的会话
     */
    getLocalSession(options: {
        /**
         * 即 {@link NIMSession.id | session.id}
         */
        sessionId: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void;
    }): void;
    /**
     * 分页查询本地数据库里的会话列表。
     *
     * - 如果未开启 db，该函数会返回 SDK 内存中维护的会话列表。虽然可以返回，但是不推荐这么用。用户应该在自己的应用中维护会话的数据。详情请参考示例代码
     *
     * 注：会话列表按 updateTime 降序排列, 即最近聊过天的放在列表的最前面
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E4%BC%9A%E8%AF%9D%E6%8E%92%E5%BA%8F_db.js" target="_blank">会话排序(开启db)</a></li>
     * </ul>
     */
    getLocalSessions(options: {
        /**
         * 上一页最后一条会话的 id，第一次查询可以不填。
         */
        lastSessionId?: string;
        /**
         * 分页查询数量限制，默认 100 条记录
         */
        limit?: number;
        /**
         * 查询顺序。默认 false
         *
         * false 从更新时间最早的会话开始查找
         *
         * true 从更新时间最晚的会话开始查找
         */
        reverse?: boolean;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession[]) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link SessionInterface.getLocalSessions}
     */
    getLocalSessionsByMsgType(options: NIMStrAnyObj): void;
    /**
     * 往本地数据库 indexdb 中插入一个会话
     *
     * - 如果不支持数据库, 则会在 sdk 内存中插入一条会话。不推荐没有 db 时使用该函数。用户应该在自己的内存数据中维护会话列表。
     *
     * - 如果会话已存在, 那么会返回错误
     * - 如果有对应会话的本地历史消息, 那么会更新会话的 lastMsg 为最后一条消息
     * - 插入成功后, 会触发onupdatesession回调
     */
    insertLocalSession(options: {
        scene: NIMMsgScene;
        to: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void;
    }): void;
    /**
     * 更新本地数据库里的会话
     *
     * @param options 入参
     * @param options.id  会话 id
     * @param options.localCustom  本地扩展字段
     * @param options.needNotify  是否触发onupdatesession或onupdatesessions回调，默认是true
     */
    updateLocalSession(options: {
        id: string;
        localCustom?: string;
        needNotify?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void;
    }): void;
    /**
     * 删除指定的本地数据库会话。以及可选删除服务器上漫游消息。
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link MessageLogInterface.clearServerHistoryMsgsWithSync} 删除历史消息(以及漫游消息)</li>
     * </ul>
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/team/%E7%BE%A4%E6%88%90%E5%91%98%E7%AE%A1%E7%90%86.js" target="_blank">群成员管理</a></li>
     * </ul>
     *
     * @param options 入参
     * @param options.id  会话 id
     * @param options.isLogic  是否为逻辑删除, 默认 false。7.9.1 版本新增，逻辑删除不会真的删除本地会话，而是标记会话为“已删除”状态，这样可以保留会话的`unread`和`msgReceiptTime`，下次新建该会话时，可以保持正确的未读数和已读时间戳
     * @param options.isDeleteRoaming  是否需要删除此会话的服务器漫游消息, 默认 false。8.2.0 版本新增，写 true 的话，下次登录服务器不再下发此会话的漫游消息，此规则会影响多端登录的其他端，慎用。
     */
    deleteLocalSession(options: {
        id: string;
        isLogic?: boolean;
        isDeleteRoaming?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void;
    }): void;
    /**
     * 设置“进入当前会话”
     *
     * 注：这是 sdk 的一个便于操作的复合接口，做的逻辑有：在内存里记录当前进入的会话，进入会话时调用 resetSessionUnread 清空未读，且后续 onMsg 接收新消息时 resetSessionUnread 清空未读。
     *
     * 注2：如果不满足开发者的场景，开发者可以组合调用 API，须小心接到新消息而触发的 onupdatesessions 变更时，忽略当前选中的会话的 unread 数变更。
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link SessionInterface.resetCurrSession}</li>
     * </ul>
     */
    setCurrSession(sessionId: string): void;
    /**
     * 取消 “setCurrSession” 的效果。取消后，会话收到消息后，未读数会变更。
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link SessionInterface.setCurrSession}</li>
     * </ul>
     */
    resetCurrSession(sessionId: string): void;
    /**
     * 重置某个会话的未读数。重置超级群未读数请使用 {@link SessionInterface.resetSuperTeamSessionsUnread}。
     *
     * <h4>注意</h4>
     * <ul>
     * <li>初始化参数 {@link NIMGetInstanceOptions.syncSessionUnread} = true时，该函数会同步未读数至服务器，否则仅影响内存中的session。</li>
     * <li>调用该函数后，会触发 {@link NIMGetInstanceOptions.onupdatesessions} 回调函数</li>
     * </ul>
     */
    resetSessionUnread(sessionId: string, done: (err: Error | null, failedSessionId: string) => void): void;
    /**
     * 重置某些会话的未读数。重置超级群未读数请使用 {@link SessionInterface.resetSuperTeamSessionsUnread}
     *
     * <h4>注意</h4>
     * <ul>
     * <li>初始化参数 {@link NIMGetInstanceOptions.syncSessionUnread} = true时，该函数会同步未读数至服务器，否则仅影响内存中的session。</li>
     * <li>调用该函数后，会触发 {@link NIMGetInstanceOptions.onupdatesessions} 回调函数</li>
     * </ul>
     */
    resetSessionsUnread(sessionIds: string[], done: (err: Error | null) => void): Promise<void>;
    /**
     * 重置某些超级群的会话的未读数
     *
     * <h4>注意</h4>
     * <ul>
     * <li>初始化参数 {@link NIMGetInstanceOptions.syncSessionUnread} = true时，该函数会同步未读数至服务器，否则仅影响内存中的session。</li>
     * <li>调用该函数后，会触发 {@link NIMGetInstanceOptions.onupdatesessions} 回调函数</li>
     * </ul>
     */
    resetSuperTeamSessionsUnread(sessionIds: string[], done: (err: Error | null) => void): Promise<void>;
    /**
     * 重置所有会话的未读数。
     *
     * <h4>注意</h4>
     * <ul>
     * <li>初始化参数 {@link NIMGetInstanceOptions.syncSessionUnread} = true时，该函数会同步未读数至服务器，否则仅影响内存中的session。</li>
     * <li>调用该函数后，会触发 {@link NIMGetInstanceOptions.onupdatesessions} 回调函数</li>
     * </ul>
     */
    resetAllSessionUnread(): void;
    /**
     * @deprecated 已废弃。推荐开发者调用 {@link SessionInterface.deleteLocalSession | deleteLocalSession} 和 {@link MessageLogInterface.clearServerHistoryMsgsWithSync | clearServerHistoryMsgsWithSync}
     */
    deleteSession(options: {
        scene: NIMMsgScene;
        to: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * @deprecated 已废弃。推荐开发者调用 {@link SessionInterface.deleteLocalSession | deleteLocalSession} 和 {@link MessageLogInterface.clearServerHistoryMsgsWithSync | clearServerHistoryMsgsWithSync}
     */
    deleteSessions(options: {
        sessions: NIMSession[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * @deprecated 已废弃.查询漫游消息不全的会话/会话列表
     *
     *  @param options
     *  @param options.id  会话 id
     */
    getSessionsWithMoreRoaming(options: {
        id: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     * @deprecated 已废弃。更新漫游消息不全的会话的漫游时间戳
     *
     * @param options
     * @param options.msg 完整漫游消息列表中最早的一条消息，即在这条消息之后的本地消息列表是完整的
     */
    updateSessionsWithMoreRoaming(options: {
        msg: NIMMessage;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     * @deprecated 已废弃。根据会话 id 删除漫游消息不全的会话
     *
     * @param options
     * @param options.id  会话 id
     */
    deleteSessionsWithMoreRoaming(options: {
        id: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     * 获取云端置顶会话的列表
     */
    getStickTopSessions(options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession[]) => void;
    }): void;
    /**
     * 添加云端置顶的会话。下次登录时，在初始化回调函数 `onStickTopSessions` 接收置顶会话列表。调用后，当前账户所有登录用户收到 `onupdatesessions` 回调
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMGetInstanceOptions.syncStickTopSessions}</li>
     * <li>{@link NIMGetInstanceOptions.onStickTopSessions}</li>
     * <li>{@link NIMGetInstanceOptions.onupdatesessions}</li>
     * </ul>
     */
    addStickTopSession(options: {
        /**
         * sessionId
         *
         * 例如 p2p-cs1、team-113879441
         */
        id: string;
        /**
         * 云端置顶会话的扩展字段
         */
        topCustom?: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            stickTopSession: NIMSession;
        }) => void;
    }): void;
    /**
     * 取消云端置顶的会话。下次登录时，在初始化回调函数 `onStickTopSessions` 接收置顶会话列表。调用后，当前账户所有登录用户收到 `onupdatesessions` 回调
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMGetInstanceOptions.syncStickTopSessions}</li>
     * <li>{@link NIMGetInstanceOptions.onStickTopSessions}</li>
     * <li>{@link NIMGetInstanceOptions.onupdatesessions}</li>
     * </ul>
     */
    deleteStickTopSession(options: {
        /**
         * sessionId
         *
         * 例如 p2p-cs1、team-113879441
         */
        id: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            stickTopSession: NIMSession;
        }) => void;
    }): void;
    /**
     * 更新云端置顶的会话（目前仅能更新它的扩展字段）。调用后，当前账户所有登录用户收到 `onupdatesessions` 回调
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMGetInstanceOptions.syncStickTopSessions}</li>
     * <li>{@link NIMGetInstanceOptions.onStickTopSessions}</li>
     * <li>{@link NIMGetInstanceOptions.onupdatesessions}</li>
     * </ul>
     */
    updateStickTopSession(options: {
        /**
         * sessionId
         *
         * 例如 p2p-cs1、team-113879441
         */
        id: string;
        /**
         * 云端置顶会话的扩展字段
         */
        topCustom?: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            stickTopSession: NIMSession;
        }) => void;
    }): void;
}
export interface NIMSession {
    /**
     * 会话ID
     */
    id: string;
    /**
     * 场景
     *
     * p2p 单聊
     * team 群聊
     * superTeam 超大群聊
     */
    scene: string;
    /**
     * 聊天对象, 账号或群ID
     */
    to: string;
    /**
     * 会话更新的时间
     */
    updateTime: number;
    /**
     * 未读数
     */
    unread: number;
    /**
     * 此会话的最后一条消息
     */
    lastMsg: NIMMessage;
    /**
     * 消息已读回执时间戳
     *
     * 注：这个字段表述自己发送的消息，对方是不是已读过。如果有此字段, 说明此时间戳之前的所有消息对方均已读
     *
     * 注2: 目前仅对'p2p'会话起作用
     */
    msgReceiptTime?: number;
    /**
     * 是否被置顶会话
     */
    isTop?: boolean;
    /**
     * 置顶的扩展字段
     */
    topCustom?: string;
    /**
     * 本地数据库中的会话自定义扩展字段
     *
     * 注：在支持数据库时可以调用更新本地会话来更新此字段, 此字段只会被更新到本地数据库, 不会被更新到服务器上
     */
    localCustom?: string;
}
