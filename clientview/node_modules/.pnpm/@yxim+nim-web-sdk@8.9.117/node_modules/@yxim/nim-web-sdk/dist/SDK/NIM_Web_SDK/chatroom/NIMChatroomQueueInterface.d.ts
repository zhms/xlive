import { NIMCommonError, NIMStrAnyObj } from '../types';
export interface NIMChatroomQueueOfferOptoins {
    /**
     * 新元素的UniqKey，长度限制128字节
     */
    elementKey: string;
    /**
     * 新元素内容，长度限制4096字节
     */
    elementValue: string;
    /**
     * 可选参数，不传默认false，当提交这个新元素的用户从聊天室掉线或退出的时候，是否需要删除这个元素。
     */
    transient?: boolean;
    /**
     * 可选参数，队列元素所属账号，默认不传表示队列元素属于当前操作人，管理员可以指定队列元素归属于其他合法账号
     */
    elementAccount?: string;
    /**
     * 结果回调函数
     */
    done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomQueueOfferOptoins | void) => void;
}
export interface NIMChatroomQueueInterface {
    /**
     * 新加(更新)队列元素。如果elementKey已存在，更新元素，否则在队尾插入新元素。操作后，所有在线用户收到如下通知消息：
     * - attach.type === 'updateQueue'
     * - attach.queueChange.type === 'OFFER'
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * </ul>
     */
    queueOffer(_options: {
        /**
         * 新元素的UniqKey，长度限制128字节
         */
        elementKey: string;
        /**
         * 新元素内容，长度限制4096字节
         */
        elementValue: string;
        /**
         * 可选参数，不传默认false，当提交这个新元素的用户从聊天室掉线或退出的时候，是否需要删除这个元素。
         */
        transient?: boolean;
        /**
         * 可选参数，队列元素所属账号，默认不传表示队列元素属于当前操作人，管理员可以指定队列元素归属于其他合法账号
         */
        elementAccount?: string;
        /**
         * 结果回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomQueueOfferOptoins | void) => void;
    }): void;
    /**
     * 删除队列元素。操作后，所有在线用户收到如下通知消息：
     * - attach.type === 'updateQueue'
     * - attach.queueChange.type === 'POLL'
     *
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * </ul>
     */
    queuePoll(_options: {
        /**
         * 需要取出的元素的UniqKey, 传空传表示取出第一个元素
         */
        elementKey?: string;
        /**
         * 结果回调函数
         */
        done: (err: Error | null, 
        /**
         * 入参
         */
        data: {
            elementKey?: string;
        }, 
        /**
         * 被取出的元素
         */
        obj: {
            /**
             * 元素的UniqKey，长度限制128字节
             */
            elementKey: string;
            /**
             * 元素内容，长度限制4096字节
             */
            elementValue: string;
        }) => void;
    }): void;
    /**
     * 获取聊天室队列列表
     */
    queueList(_options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            queueList: Array<{
                /**
                 * 元素的UniqKey，长度限制128字节
                 */
                elementKey: string;
                /**
                 * 元素内容，长度限制4096字节
                 */
                elementValue: string;
            }>;
        }) => void;
    }): void;
    /**
     * 获取聊天室队列中第一个元素。返回数据在回调函数的第三个参数中
     */
    peak(_options: {
        done: (err: Error | null, 
        /**
         * 该参数可忽略。
         */
        param: object, 
        /**
         * 队列中第一个元素
         */
        obj: {
            /**
             * 元素的UniqKey，长度限制128字节
             */
            elementKey: string;
            /**
             * 元素内容，长度限制4096字节
             */
            elementValue: string;
        }) => void;
    }): void;
    /**
     * 清除聊天室队列。只有聊天室固定成员有权限清空队列。清空后，所有在线用户收到如下通知消息:
     * - attach.type === 'updateQueue'
     * - attach.queueChange.type === 'DROP'
     *
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * </ul>
     */
    queueDrop(_options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 批量更新聊天室队列。若 needNotify 为 true，所有在线用户收到如下通知消息。如果 needNotify 为 false，则无用户收到更新
     * - attach.type === 'updateQueue'
     * - attach.queueChange.type === 'BATCH_UPDATE'
     * - attach.custom 为 notifyExt
     *
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onmsgs}</li>
     * </ul>
     */
    queueChange(_options: {
        /**
         * 批量更新元素的key-value对，key/value分别是elementKey和elementValue（elementKey限制128字节,elementValue限制4096字节），一次最多更新100个
         */
        elementMap: {
            [key: string]: string;
        };
        /**
         * 是否需要发送广播通知，可选参数，不传默认false。若设置为 true，notifyExt 也是必填项。
         */
        needNotify?: boolean;
        /**
         * 通知中的自定义字段，长度限制2048
         */
        notifyExt?: string;
        /**
         * 结果回调函数
         */
        done?: (err: Error | null, data: NIMStrAnyObj, Obj: {
            elementKeyArray: Array<string>;
        }) => void;
    }): void;
}
