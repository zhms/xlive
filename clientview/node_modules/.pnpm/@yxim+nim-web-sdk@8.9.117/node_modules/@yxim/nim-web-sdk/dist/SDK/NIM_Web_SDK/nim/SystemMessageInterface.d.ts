import { NIMMsgScene } from './MessageInterface';
import { NIMCommonError, NIMStrAnyObj } from '../types';
export interface SystemMessageInterface {
    /**
     * 发送自定义系统通知
     *
     * 注，自定义系统通知(sendCustoSysmMsg)和自定义消息(sendCustomMsg)的区别如下：
     * 1. 自定义消息属于 {@link NIMMessage | NIMMessage }, 会存储在云信服务器消息数据库中, 与其他消息一同传递给开发者，可以查询历史消息，。
     * 2. 自定义系统通知属于 {@link NIMSystemMessage | NIMSystemMessage }, 用于第三方通知端侧, 不会存储在云信服务器数据库中，无法查询历史消息。SDK 仅仅负责传递这些通知。
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/message/p2p%E6%AD%A3%E5%9C%A8%E8%BE%93%E5%85%A5.js" target="_blank">p2p正在输入提示</a></li>
     * </ul>
     */
    sendCustomSysMsg(options: {
        /**
         * 场景，跟消息场景的一样分为 p2p, team, superTeam.
         */
        scene: NIMMsgScene;
        /**
         * 接收方，account ID，或者群号。
         */
        to: string;
        /**
         * 自定义系统消息的内容，推荐传入 JSON 序列化字符串。
         */
        content: string;
        /**
         * apns推送文案, 仅对接收方为iOS设备有效
         */
        apnsText?: string;
        /**
         * 自定义系统通知的推送属性. 推荐传入 JSON 序列化字符串
         */
        pushPayload?: string;
        /**
         * 是否只发送给在线用户. 默认为 true
         *
         * true. 只发送给在线用户, 如果接收方不在线, 这条通知将被丢弃。适合是“正在输入”这种场景
         *
         * false. 若接收方在线, 那么会立即收到该通知，若接收方不在线, 会在其上线后推送离线系统通知。
         */
        sendToOnlineUsersOnly?: boolean;
        /**
         * 是否抄送. 默认 true
         */
        cc?: boolean;
        /**
         * 环境变量，用于指向不同的抄送、第三方回调等配置
         */
        env?: string;
        /**
         * 是否需要推送. 默认 true
         */
        isPushable?: boolean;
        /**
         * 是否需要推送昵称. 默认 false
         */
        needPushNick?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSystemMessage) => void;
    }): void;
    /**
     * 向服务器回包标记系统消息端测已读，下次服务器不需要将此消息作离线系统消息 {@link NIMGetInstanceOptions.onofflinesysmsgs | onofflinesysmsgs} 发下来
     *
     * 标记后会触发 {@link NIMGetInstanceOptions.onupdatesysmsgunread | onupdatesysmsgunread} 回调
     */
    markSysMsgRead(options: {
        sysMsgs: NIMSystemMessage[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 获取本地数据库里的系统通知
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/sysmsg/%E6%9C%AC%E5%9C%B0%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%9F%A5%E6%95%B0%E9%87%8F%E7%AE%A1%E7%90%86.js" target="_blank">本地系统通知数量管理</a></li>
     * </ul>
     */
    getLocalSysMsgs(options: {
        /**
         * 分类
         */
        /**
         * 类型
         */
        type?: NIMSystemMessageType;
        /**
         * 是否已读.
         */
        read?: boolean;
        /**
         * 上次查询的最后一条系统通知的 `idServer`
         */
        lastIdServer?: string;
        /**
         * 一页查询数量限制，默认 100
         */
        limit?: number;
        /**
         * 查询顺序
         *
         * 默认 false. 表示从最近的系统通知开始往前查找本地系统通知.
         * 若为 true 表示从第一条系统通知开始往后查找本地系统通知
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSystemMessage[]) => void;
    }): void;
    /**
     * 更新本地数据库里的系统通知
     */
    updateLocalSysMsg(options: {
        /**
         * 系统消息的 idServer
         */
        idServer: string;
        /**
         * 处理状态
         */
        state?: string;
        /**
         * 自定义字段
         */
        localCustom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSystemMessage) => void;
    }): void;
    /**
     * 删除本地数据库里的系统通知。如果不支持数据库，或指定的通知不存在，算执行成功
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/sysmsg/%E6%9C%AC%E5%9C%B0%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%9F%A5%E6%95%B0%E9%87%8F%E7%AE%A1%E7%90%86.js" target="_blank">本地系统通知数量管理</a></li>
     * </ul>
     */
    deleteLocalSysMsg(options: {
        idServer: string | string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 删除所有本地数据库里的系统通知
     */
    deleteAllLocalSysMsgs(options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
}
export declare enum NIMEnumSystemMessageType {
    /**
     * 直接加某个用户为好友。
     *
     * 注：对方不需要确认, 直接成为当前登录用户的好友。
     */
    addFriend = 0,
    /**
     * 申请加某个用户为好友。
     */
    applyFriend = 1,
    /**
     * 通过好友申请
     */
    passFriendApply = 2,
    /**
     * 拒绝好友申请
     */
    rejectFriendApply = 3,
    /**
     * 删除好友
     */
    deleteFriend = 4,
    /**
     * 邀请人加入群聊
     */
    teamInvite = 5,
    /**
     * 拒绝加群的邀请
     */
    rejectTeamInvite = 6,
    /**
     * 入群申请
     */
    applyTeam = 7,
    /**
     * 拒绝入群的申请
     */
    rejectTeamApply = 8,
    /**
     * 入超级群申请
     */
    applySuperTeam = 9,
    /**
     * 拒绝入超级群的申请
     */
    rejectSuperTeamApply = 10,
    /**
     * 邀请人加入超级群聊
     */
    superTeamInvite = 11,
    /**
     * 拒绝加超级群的邀请
     */
    rejectSuperTeamInvite = 12,
    /**
     * 撤回一条消息
     */
    deleteMsg = 13,
    /**
     * 自定义系统通知
     */
    custom = 14
}
export declare type NIMSystemMessageType = keyof typeof NIMEnumSystemMessageType;
/**
 * 系统通知的定义
 */
export interface NIMSystemMessage {
    /**
     * 时间戳
     */
    time: number;
    /**
     * 系统通知的来源, 账号或者群ID
     */
    from: string;
    /**
     * 系统通知的目标, 账号或者群ID
     */
    to: string;
    /**
     * 系统通知类型
     */
    type: NIMSystemMessageType;
    /**
     * 自定义系系统通知的场景, 参考消息场景
     */
    scene?: string;
    /**
     * 内建系统通知的 idServer
     */
    idServer?: string;
    /**
     * 内建系统通知是否已读
     */
    read?: boolean;
    /**
     * 内建系统通知的种类
     */
    category?: string;
    /**
     * 内建系统通知的state
     */
    state?: string;
    /**
     * 内建系统通知的state 为 'error' 时, 此字段包含错误的信息
     */
    error?: NIMCommonError;
    /**
     * 内建系统通知的本地数据库自定义扩展字段
     *
     * 注：打开 db 时，才存在这个字段。
     */
    localCustom?: string;
    /**
     * 内建系统通知的附言
     */
    ps?: string;
    /**
     * 内建系统通知的附加信息, 参考系统通知类型来查看不同类型的系统通知对应的附加信息
     */
    attach?: {
        /**
         * 附加消息的扩展字段
         */
        custom?: string;
    };
    /**
     * 自定义系统通知的内容。注意该内容必须为可以被JSON.parse的字符串
     */
    content?: string;
    /**
     * 是否需要推送
     */
    isPushable?: boolean;
    /**
     * 自定义系统通知的推送文案, 仅对接收方为iOS设备有效
     */
    apnsText?: string;
    /**
     * 自定义系统通知的推送属性
     *
     * 注：推荐传入 JSON 格式化字符串
     */
    pushPayload?: string;
    /**
     * 是否需要推送昵称
     */
    needPushNick?: boolean;
    /**
     * 自定义系统通知是否只发送给在线用户
     *
     * true 只发送给在线用户, 适合发送即时通知, 比如正在输入。
     *
     * false 时假如目标用户或群不在线, 会在其上线后推送过去。
     *
     * 注：该参数只对 p2p 自定义系统通知有效, 对群自定义系统通知无效, 群自定义系统通知只会发给在线的群成员, 不会存离线。
     */
    sendToOnlineUsersOnly?: boolean;
    /**
     * 自定义系统通知是否抄送. 默认 true
     */
    cc?: boolean;
}
export interface NIMSystemMessageUnreadInfo {
    addFriend: number;
    applyFriend: number;
    applySuperTeam: number;
    applyTeam: number;
    deleteFriend: number;
    deleteMsg: number;
    /**
     * friend 分类的未读数总计
     *
     * addFriend: + applyFriend: + passFriendApply: + rejectFriendApply: + deleteFriend
     */
    friend: number;
    /**
     * msg 分类的未读数总计
     *
     * 注: deleteMsg
     */
    msg: number;
    passFriendApply: number;
    rejectFriendApply: number;
    rejectSuperTeamApply: number;
    rejectSuperTeamInvite: number;
    rejectTeamApply: number;
    rejectTeamInvite: number;
    /**
     * superTeam 分类的未读数总计
     *
     * 注: applySuperTeam + rejectSuperTeamApply + superTeamInvite + rejectSuperTeamInvite
     */
    superTeam: number;
    superTeamInvite: number;
    /**
     * team 分类的未读数总计
     *
     * 注: applyTeam + rejectTeamApply + teamInvite + rejectTeamInvite
     */
    team: number;
    teamInvite: number;
    /**
     * 所有未读数总计
     */
    total: number;
}
