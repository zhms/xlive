import { NIMCommonError, NIMStrAnyObj } from '../types';
/**
 * 超级群服务 API 定义
 *
 * 注：超级群需要额外开通
 */
export interface SuperTeamInterface {
    /**
     * 根据超级群ID，获取该超级群的资料
     */
    getSuperTeam(options: {
        /**
         * 超级群ID
         */
        teamId: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSuperTeam) => void;
    }): void;
    /**
     * 获取超级群列表。如果开发者在初始化SDK的时候设置了syncSuperTeams为false, 那么就收不到onSuperTeams回调, 可以调用此接口来获取超大群列表
     *
     * 注: 没有本地 db 时，将会全量获取服务器的超级群列表
     */
    getSuperTeams(options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSuperTeam[]) => void;
    }): void;
    /**
     * 更新超级群属性
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'updateSuperTeam'</li>
     * <li>msg.attach.team: 群详情</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateSuperTeam | onUpdateSuperTeam}
     */
    updateSuperTeam(options: {
        /**
         * 群 ID
         */
        teamId: string;
        /**
         * 群名
         */
        name: string;
        /**
         * 群头像
         */
        avatar?: string;
        /**
         * 群简介
         */
        intro?: string;
        /**
         * 群公告
         */
        announcement?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 对某些资料内容进行反垃圾处理的业务 ID, 在云信控制台里配置.
         */
        antiSpamBusinessId?: string;
        /**
         * 群加入方式
         */
        joinMode?: 'noVerify' | 'needVerify' | 'rejectAll';
        /**
         * 群被邀请模式
         */
        beInviteMode?: 'noVerify' | 'needVerify';
        /**
         * 群邀请模式
         */
        inviteMode?: 'manager' | 'all';
        /**
         * 群信息修改权限
         */
        updateTeamMode?: 'manager' | 'all';
        /**
         * 群信息自定义字段修改权限
         */
        updateCustomMode?: 'manager' | 'all';
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 转让超级群, 群主可操作
     *
     * - 转让超级群相关通知
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 转让者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'transferSuperTeam'</li>
     * <li>msg.attach.team: 群详情</li>
     * <li>msg.attach.account: 新群主账号</li>
     * <li>msg.attach.members: 新旧群主成员详情列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onTransferSuperTeam | onTransferSuperTeam}
     *
     * - 如果转让群的同时离开群, 那么相当于调用主动退群来离开群
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.attach.type: 'leaveSuperTeam'
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onRemoveSuperTeamMembers | onRemoveSuperTeamMembers}
     */
    transferSuperTeam(options: {
        teamId: string;
        account: string;
        /**
         * 转让群的同时是否离开群
         */
        leave: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 主动退群
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'leaveSuperTeam'</li>
     * <li>msg.attach.team: 群详情</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onRemoveSuperTeamMembers | onRemoveSuperTeamMembers}
     */
    leaveSuperTeam(options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 超级群全体禁言
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'updateSuperTeam'</li>
     * <li>msg.attach.team: 群详情</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateSuperTeam | onUpdateSuperTeam}
     */
    updateSuperTeamMute(options: {
        teamId: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 根据进群时间，分页获取超大群成员
     */
    getSuperTeamMembersByJoinTime(options: {
        teamId: string;
        /**
         * 加入时间.
         *
         * 注: 如果传入这个参数, 获取在这个时间之后加入的成员, 不传则不限制
         */
        joinTime?: number;
        /**
         * 分页限制, 默认 100, 返回 100 条数据
         */
        limit?: number;
        /**
         * 查询顺序。默认 false
         *
         * false 即查询 joinTime 之后加入的成员
         *
         * true 即查询 joinTime 之前加入的成员
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            teamId: string;
            /**
             * 查到的群成员数据
             */
            members: NIMSuperTeamMember[];
            /**
             * members 中 invalid 为 true 的记录
             */
            invalid: NIMSuperTeamMember[];
        }) => void;
    }): void;
    /**
     * 查询超级群内，若干个账号的详细信息
     */
    getSuperTeamMembersByAccounts(options: {
        teamId: string;
        /**
         * 待查询 account ID 列表
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 与入参一样
             */
            accounts: string[];
            /**
             * invalid 为 true 的 account ID 列表
             */
            invalidAccounts: string[];
            /**
             * 在超级群内的账号的详细信息
             */
            members: NIMSuperTeamMember;
        }) => void;
    }): void;
    /**
     * 获取全部超级群成员, 数据量非常多时会分多次 done 返回
     */
    getAllSuperTeamMembers(options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            teamId: string;
            /**
             * 查到的群成员数据
             */
            members: NIMSuperTeamMember[];
            /**
             * members 中 invalid 为 true 的记录
             */
            invalid: NIMSuperTeamMember[];
        }) => void;
    }): void;
    /**
     * 获取群禁言成员列表。该函数结果受 {@link SuperTeamInterface.updateSuperTeamMembersMute} 影响
     */
    getMutedSuperTeamMembers(options: {
        teamId: string;
        /**
         * 加入时间.
         *
         * 注: 如果传入这个参数, 获取在这个时间之后加入的成员, 不传则不限制
         */
        joinTime?: number;
        /**
         * 分页限制, 默认 100, 返回 100 条数据
         */
        limit?: number;
        /**
         * 查询顺序。默认 false
         *
         * false 即查询 joinTime 之后加入的成员
         *
         * true 即查询 joinTime 之前加入的成员
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            teamId: string;
            /**
             * 查到的群成员数据
             */
            members: NIMSuperTeamMember[];
            /**
             * members 中 invalid 为 true 的记录
             */
            invalid: NIMSuperTeamMember[];
        }) => void;
    }): void;
    /**
     * 添加超级群成员
     *
     * - 如果 inviteMode: 'noVerify':
     * 1. 被邀请人直接进群，所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 邀请人账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'addSuperTeamMembers'</li>
     * <li>msg.attach.team: 群详细信息</li>
     * <li>msg.attach.members: 被邀请入群成员详细信息列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddSuperTeamMembers | onAddSuperTeamMembers}
     *
     * - 如果 inviteMode: 'needVerify'
     * 1. 被邀请者触发 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}，其 type 为 'superTeamInvite'。被邀请者通过 {@link SuperTeamInterface.acceptSuperTeamInvite | acceptSuperTeamInvite} 或者 {@link SuperTeamInterface.rejectSuperTeamInvite | rejectSuperTeamInvite}回应入群邀请
     */
    addSuperTeamMembers(options: {
        teamId: string;
        /**
         * 要加入的用户账号列表
         */
        accounts: string[];
        /**
         * 附言，长度不得大于 5000 字符，开发者可以使用 JSON 序列化字符串填充
         */
        ps?: string;
        /**
         * 附加字段，推荐使用 JSON 序列化字符串
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 同意入群邀请 {@link SuperTeamInterface.addSuperTeamMembers}
     *
     * 群主和管理员邀请成员加入群({@link SuperTeamInterface.addSuperTeamMembers | addSuperTeamMembers}), 被邀请的人收到类型为`superTeamInvite`的系统通知
     *
     * - 若接受入群邀请, 该群所有成员收到类型为 `acceptSuperTeamInvite` 的群通知消息，通知消息具体内容见下文
     * - 若拒绝入群邀请, 邀请你的人会收到类型为 `rejectSuperTeamInvite` 的系统通知, 此系统通知的 `from` 字段的值为拒绝入群邀请的人的帐号, `to` 字段的值为对应的 `群ID`
     *
     *
     * 用户接受入群邀请后：
     * 1. 所有群成员收到群通知消息: {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 邀请人账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'acceptSuperTeamInvite'</li>
     * <li>msg.attach.team: 群信息</li>
     * <li>msg.attach.members: 接收入群邀请的群成员列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddSuperTeamMembers | onAddSuperTeamMembers}
     * 4. 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link SuperTeamInterface.addSuperTeamMembers | addSuperTeamMembers}</li>
     * <li>{@link SuperTeamInterface.rejectSuperTeamInvite | rejectSuperTeamInvite}</li>
     * </ul>
     */
    acceptSuperTeamInvite(options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 拒绝入群邀请
     *
     * 用户拒绝群邀请后:
     * - 邀请者会收到系统通知 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}
     *   - type: 'rejectSuperTeamInvite'
     *   - from: 拒绝入群邀请的账号
     *   - to: 群id
     * - 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     */
    rejectSuperTeamInvite(options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 踢人出超级群
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号 </li>
     * <li>msg.to: 群id </li>
     * <li>msg.attach.type: 'removeSuperTeamMembers'</li>
     * <li>msg.attach.team: 群详情</li>
     * <li>msg.attach.accounts: 被踢人的账号数组</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onRemoveSuperTeamMembers | onRemoveSuperTeamMembers}
     */
    removeSuperTeamMembers(options: {
        teamId: string;
        /**
         * 要踢出的群成员账号列表
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 添加超级群管理员
     *
     * 添加管理员后:
     * 1. 所有群成员收到群通知消息 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 添加管理员的操作者 </li>
     * <li>msg.to: 群id </li>
     * <li>msg.attach.type: 'addSuperTeamManagers'</li>
     * <li>msg.attach.accounts: 被加为管理员的账号列表</li>
     * <li>msg.attach.members: 被加为管理员的群成员详细信息列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateSuperTeamManagers | onUpdateSuperTeamManagers}
     */
    addSuperTeamManagers(options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 移除超级群管理员
     *
     * 添加管理员后:
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 移除者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'removeSuperTeamManagers'</li>
     * <li>msg.attach.accounts: 被移除的管理员的帐号列表</li>
     * <li>msg.attach.members: 被移除管理员的群成员列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateSuperTeamManagers | onUpdateSuperTeamManagers}
     */
    removeSuperTeamManagers(options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 修改别人的超级群的昵称
     *
     * 所有在线的群成员会触发 {@link NIMGetInstanceOptions.onUpdateSuperTeamMember | onUpdateSuperTeamMember}、以及 {@link NIMGetInstanceOptions.onUpdateSuperTeam | onUpdateSuperTeam}
     */
    updateNickInSuperTeam(options: {
        teamId: string;
        account: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onUpdateSuperTeamMember | onUpdateSuperTeamMember} 。
         */
        nickInTeam: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 修改自己在超级群里的信息
     *
     * <ul>
     * <li>所有在线的群成员触发 {@link NIMGetInstanceOptions.onUpdateSuperTeamMember | onUpdateSuperTeamMember} </li>
     * <li>所有在线的群成员触发 {@link NIMGetInstanceOptions.onUpdateSuperTeam | onUpdateSuperTeam} </li>
     * <li>当前账号会触发 {@link NIMGetInstanceOptions.onMySuperTeamMembers | onMySuperTeamMembers} </li>
     * </ul>
     */
    updateInfoInSuperTeam(options: {
        teamId: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onUpdateSuperTeamMember | onUpdateSuperTeamMember} 。
         */
        nickInTeam?: string;
        /**
         * @deprecated use "muteNotiType" instead
         *
         * 是否关闭此群的消息提醒, 默认 false.
         *
         * 注: 为 true 表示关闭提醒, 但是 SDK 仍然会收到这个群的消息. 因为 SDK 只是记录这个设置, 具体根据这个设置要执行的操作由开发者决定
         */
        muteTeam?: boolean;
        /**
         * 提醒策略
         *
         * "0" 开启提醒
         * "1" 关闭消息提醒
         * "2" 只接受管理员的消息的提醒
         */
        muteNotiType?: string;
        /**
         * 第三方扩展字段, 开发者可以自行扩展, 建议封装成JSON格式字符串
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: Pick<NIMSuperTeamMember, 'id' | 'account' | 'custom' | 'muteTeam' | 'nickInTeam' | 'teamId' | 'updateTime'>) => void;
    }): void;
    /**
     * 更新超级群成员禁言状态
     *
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作方</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'updateSuperTeamMembersMute'</li>
     * <li>msg.attach.team: 群详情</li>
     * <li>msg.attach.account: 被禁言的帐号</li>
     * <li>msg.attach.members: 被禁言的群成员列表</li>
     * </ul>
     *
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onUpdateSuperTeamMembersMute | onUpdateSuperTeamMembersMute}
     */
    updateSuperTeamMembersMute(options: {
        teamId: string;
        account: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 用户主动申请加入超级群。根据 `joinMode` 不同，SDK 有不同的行为
     *
     * - 如果 joinMode: 'noVerify':
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 申请人账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'passSuperTeamApply'</li>
     * <li>msg.attach.account: 申请人账号</li>
     * <li>msg.attach.members: 被通过申请的群成员列表 </li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddSuperTeamMembers | onAddSuperTeamMembers}
     *
     * - 如果 joinMode: 'needVerify'
     * 1. 管理员触发 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}，其 type 为 'applySuperTeam'。管理员通过 {@link SuperTeamInterface.passSuperTeamApply | passSuperTeamApply} 或者 {@link SuperTeamInterface.rejectSuperTeamApply | rejectSuperTeamApply}回应入群申请
     *
     * - 如果 joinMode: 'rejectAll'
     * 1. 收到申请入群失败的error信息
     */
    applySuperTeam(options: {
        teamId: string;
        /**
         * 附言
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSuperTeam) => void;
    }): void;
    /**
     * （管理员）通过超级群申请
     *
     * 所有群成员都会触发 {@link NIMGetInstanceOptions.onAddSuperTeamMembers | onAddSuperTeamMembers}
     */
    /**
     * （管理员）通过超级群申请
     *
     * 通过入群申请后：
     * 1. 所有群成员触发 {@link NIMGetInstanceOptions.onmsg | onmsg}:
     * <ul>
     * <li>msg.type: 'notification'</li>
     * <li>msg.from: 操作者账号</li>
     * <li>msg.to: 群id</li>
     * <li>msg.attach.type: 'passSuperTeamApply'</li>
     * <li>msg.attach.account: 申请方账号</li>
     * <li>msg.attach.members: 被通过申请的群成员列表</li>
     * </ul>
     * 2. 所有群成员触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions}
     * 3. 所有群成员触发 {@link NIMGetInstanceOptions.onAddSuperTeamMembers | onAddSuperTeamMembers}
     * 4. 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     */
    passSuperTeamApply(options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * （管理员）拒绝超级群申请
     */
    /**
     * 管理员拒绝超级群申请
     *
     * 拒绝群申请后 :
     * - 申请者会收到系统通知 {@link NIMGetInstanceOptions.onsysmsg | onsysmsg}
     *   - from: 拒绝方的账号
     *   - to: 群id
     *   - attach: 群信息
     * - 函数调用者触发 {@link NIMGetInstanceOptions.onupdatesysmsg | onupdatesysmsg}
     */
    rejectSuperTeamApply(options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
}
/**
 * 超级群成员类型
 *
 * 'normal' (普通成员)
 * 'owner' (群主)
 * 'manager' (管理员)
 */
export declare type NIMSuperTeamMemberType = 'normal' | 'owner' | 'manager';
/**
 * 超级群成员定义
 */
export interface NIMSuperTeamMember {
    /**
     * 群成员 ID (群 ID + account)
     */
    id: string;
    /**
     * 群ID
     */
    teamId: string;
    /**
     * 帐号
     */
    account: string;
    /**
     * 群成员类型
     *
     * 'normal' (普通成员)
     * 'owner' (群主)
     * 'manager' (管理员)
     */
    type: NIMSuperTeamMemberType;
    /**
     * 在群里面的昵称
     */
    nickInTeam: string;
    /**
     * 入群时间
     */
    joinTime: number;
    /**
     * 更新时间
     */
    updateTime: number;
    /**
     * 是否处于激活状态，为普通群(讨论组)专用的字段
     *
     * 注: 当普通群拉人进来时, 被拉的人处于未激活状态, 未激活状态下看不到这个群. 直到群里有人发言后自动转为激活状态, 能收到加入群事件和群消息提示
     */
    active: boolean;
    /**
     * 群成员是否有效
     */
    valid: boolean;
    /**
     * (该成员)是否被禁言
     */
    mute?: boolean;
    /**
     * 是否关闭此群的消息提醒, 默认 false.
     *
     * 注: 为 true 表示关闭提醒, 但是 SDK 仍然会收到这个群的消息. 因为 SDK 只是记录这个设置, 具体根据这个设置要执行的操作由开发者决定
     */
    muteTeam?: boolean;
    /**
     * 提醒策略
     *
     * "0" 开启提醒
     * "1" 关闭消息提醒
     * "2" 只接受管理员的消息的提醒
     */
    muteNotiType?: string;
    /**
     * 邀请者的账号
     */
    invitorAccid?: string;
    /**
     * 第三方扩展字段
     */
    custom?: string;
}
/**
 * 超级群定义
 */
export interface NIMSuperTeam {
    /**
     * 群Id
     */
    teamId: string;
    /**
     * 超级群类型
     *
     * normal 为普通群（讨论组）
     * advanced 为 高级群
     */
    type: 'normal' | 'advanced';
    /**
     * 群名
     */
    name: string;
    /**
     * 群头像
     */
    avatar: string;
    /**
     * 超级群加入方式
     *
     * noVerify 不需要验证
     * needVerify 加此群需要相关人员的验证
     * rejectAll 拒绝其他人加入
     */
    joinMode: 'noVerify' | 'needVerify' | 'rejectAll';
    /**
     * 被邀请模式
     *
     * noVerify 不需要验证
     * needVerify 此群邀请某人，需要此人验证通过才能加入
     */
    beInviteMode: 'noVerify' | 'needVerify';
    /**
     * 超级群邀请模式
     *
     * manager 管理员。仅限管理员可以邀请人进群
     * all 所有人。所有人都可以邀请人进群
     */
    inviteMode: 'manager' | 'all';
    /**
     * 超级群信息修改权限
     *
     * manager 管理员。仅限管理员可以修改群信息
     * all 所有人
     */
    updateTeamMode: 'manager' | 'all';
    /**
     * 超级群信息自定义字段修改权限
     *
     * manager 管理员
     * all 所有人
     */
    updateCustomMode: 'manager' | 'all';
    /**
     * 超级群的群主
     */
    owner: string;
    /**
     * 超级群人数上限
     */
    level: number;
    /**
     * 超级群成员数量
     */
    memberNum: number;
    /**
     * 超级群成员最后更新时间戳
     */
    memberUpdateTime: number;
    /**
     * 超级群创建时间戳
     */
    createTime: number;
    /**
     * 超级群最后更新时间戳
     */
    updateTime: number;
    /**
     * 是否有效, 解散后该群无效
     */
    valid: boolean;
    /**
     * 该群是否对当前用户有效, 如果无效, 那么说明被踢了
     */
    validToCurrentUser: boolean;
    /**
     * @deprecated please use muteType instead
     *
     * 字段即将废弃, 请使用 muteType 替代. 此字段为 true 等效于 muteType 为 'normal'
     *
     * 是否禁言, 禁言状态下普通成员不能发送消息, 创建者和管理员可以发送消息
     */
    mute?: boolean;
    /**
     * 禁言模式. 若不存在此字段代表不禁言.
     *
     * none: 都不禁言;
     *
     * normal: 普通成员禁言，即普通成员不能发消息;
     *
     * all: 全体禁言，即所有成员均不能发消息禁言模式
     */
    muteType?: string;
    /**
     * 超级群的群简介
     */
    intro?: string;
    /**
     * 超级群的群公告
     */
    announcement?: string;
    /**
     * 第三方扩展字段, 开发者可以自行扩展, 建议封装成JSON格式字符串
     */
    custom?: string;
    /**
     * 第三方服务器扩展字段, 开发者可以自行扩展, 建议封装成JSON格式字符串
     */
    serverCustom?: string;
}
