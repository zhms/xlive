import { NIMCommonError, NIMStrAnyObj } from '../types';
import { NIMUploadFileProgressObject, NIMUploadFileResult, NIMBaseUploadFileOptions } from '../common/CloudStorageInterface';
export interface NIMChatroomMsgGEO {
    /**
     * 地点名
     */
    title: string;
    /**
     * 纬度坐标
     */
    lat: number;
    /**
     * 经度坐标
     */
    lng: number;
}
export interface NIMFile {
    /**
     * 文件 url
     */
    url: string;
    /**
     * 名字
     */
    name: string;
    /**
     * 大小, 单位byte
     */
    size: number;
    /**
     * md5
     */
    md5: string;
    /**
     * 扩展名
     */
    ext: string;
}
export interface NIMImage extends NIMFile {
    /**
     * 宽, 单位px
     */
    w: string;
    /**
     * 高, 单位px
     */
    h: string;
}
export interface NIMAudio extends NIMFile {
    /**
     * 实时转成 mp3 流的 url, 此 url 支持的格式有: mp3, wav, aac, wma, wmv, amr, mp2, flac, vorbis, ac3
     */
    mp3Url: string;
    /**
     * 长度，单位 ms
     */
    dur: number;
}
export interface NIMVideo extends NIMFile {
    /**
     * 视频长度 单位 ms
     */
    dur: number;
    /**
     * 宽，分辨率，单位 px
     */
    w: number;
    /**
     * 高，分辨率，单位 px
     */
    h: number;
}
export interface NIMChatroomMessage {
    /**
     * 聊天室 ID
     */
    chatroomId: string;
    /**
     * SDK生成的消息id, 在发送消息之后会返回给开发者, SDK生成的消息id, 在发送消息之后会返回给开发者, 作为消息的不重复的key值
     */
    idClient: string;
    /**
     * 消息发送方, 帐号
     */
    from: string;
    /**
     * 消息发送方的昵称
     */
    fromNick: string;
    /**
     * 消息发送方的头像
     */
    fromAvatar: string;
    /**
     * 消息发送方的扩展字段
     */
    fromCustom: string;
    /**
     * 发送方的设备类型
     */
    fromClientType: string;
    /**
     * 消息类型
     */
    type: string;
    /**
     * 消息的流向
     *  - 'in'表示此消息是收到的消息
     *  _ 'out'表示此消息是发出的消息
     */
    flow: 'in' | 'out';
    /**
     * 是否跳过存云端历史, false:不跳过,true:跳过存历史,默认false
     */
    skipHistory?: boolean;
    /**
     * 文本消息的文本内容
     */
    text?: string;
    /**
     * 文件消息的文件对象
     */
    file?: NIMImage | NIMAudio | NIMVideo | NIMFile;
    /**
     * 地理位置消息
     */
    geo?: NIMChatroomMsgGEO;
    /**
     * 提醒消息的内容
     */
    tip?: string;
    /**
     * 自定义消息的消息内容, 开发者可以自行扩展, 建议封装成JSON格式字符串
     */
    content?: string;
    /**
     * 附加信息，推荐使用 JSON 格式化字符串
     */
    attach?: string;
    /**
     * 扩展字段
     * 推荐使用JSON格式构建, 非JSON格式的话, Web端会正常接收, 但是会被其它端丢弃
     */
    custom?: string;
    /**
     * 是否是重发的消息
     */
    resend: boolean;
    /**
     * 时间戳
     */
    time: number;
    /**
     * 服务器第三方回调的扩展字段
     */
    callbackExt?: string;
    /**
     * 开发者自定义的消息子类型，格式为大于0的整数
     */
    subType?: number;
    /**
     * 环境变量，用于指向不同的抄送、第三方回调等配置
     */
    env?: string;
}
export interface NIMChatroomSendBaseOptions {
    /**
     * 本条消息的目标标签，符合该标签条件的成员才会收到消息通知；若缺失，则使用发送者登录时设置的`notifyTargetTags`，若仍缺失，则消息会发送给聊天室内的所有人
     *
     * notifyTargetTags 的匹配规则请参考文档: <a href="https://doc.yunxin.163.com/messaging/docs/DI2MDg3NzU?platform=web">聊天室标签功能</a>
     */
    notifyTargetTags?: string;
    /**
     * 是否是重发
     */
    resend: boolean;
    /**
     * 如果是重发, 那么需要带上之前生成的idClient来标记这条消息
     */
    idClient: string;
    /**
     * 扩展字段
     */
    custom?: string;
    /**
     * 是否需要过客户端反垃圾
     */
    clientAntiSpam?: boolean;
    /**
     * 易盾反作弊字段，长度限制1024，JSON字符串格式。如：`"{"email":"test@163.com","phone":"12345678901","token":"1234","extension":"hello"}"`
     */
    yidunAntiCheating?: string;
    /**
     * 易盾反作弊扩展字段字段，2021-08-09 追加。限制 JSON 格式字符串，长度上限 1024
     */
    yidunAntiSpamExt?: string;
    /**
     * 消息子类型，格式为大于0的整数，开发者可自定义
     */
    subType?: number;
    /**
     * 环境变量，用于指向不同的抄送、第三方回调等配置
     */
    env?: string;
    /**
     * 字符串数组，内容是消息接受者账号，如果设置了本字段，且不为空，则本消息为聊天室定向消息（聊天室定向消息不会存历史）
     */
    toAccids?: Array<string>;
}
export interface NIMChatroomSendTextOptions extends NIMChatroomSendBaseOptions {
    /**
     * 文本消息内容
     */
    text: string;
    /**
     * 坐标x
     */
    loc_x?: number;
    /**
     * 坐标y
     */
    loc_y?: number;
    /**
     * 坐标z,以上三个参数如果有任一缺少则不会带上坐标信息
     */
    loc_z?: number;
    /**
     * 结果回调函数
     */
    done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMessage) => void;
}
export interface NIMChatroomSendFileOptions extends NIMChatroomSendBaseOptions {
    /**
     * 文件过滤器
     *  - image会过滤掉非图片的文件, audio过滤掉非音频, video会过滤掉非视频的文件
     *  - IE8/IE9 不支持文件过滤
     */
    type?: 'image' | 'audio' | 'video' | 'file';
    /**
     * 通过 previewFile 接口上传图片后拿到的对象。
     *
     * 注：如果有需要的话，通过 previewFile 接口上传图片后，再通过 sendFile 接口发送这个 file 参数。
     *
     * 注2: fileInput、file、filePath、blob、dataURL 只需要填一个
     */
    file?: object;
    /**
     *  文件选择 dom 节点或者节点 ID, SDK 会读取该节点下的文件, 在上传完成前请不要操作该节点下的文件
     */
    fileInput?: string | HTMLElement;
    /**
     * 仅供小程序(5.1.0+)、nodejs(5.4.0+)、react-native(5.3.0+)使用, 举例小程序通过 wx.chooseImage 或者 wx.startRecord 拿到临时文件路径 filePath 再传入。
     */
    filePath?: string;
    /**
     * Blob 对象
     */
    blob?: Blob;
    /**
     * 包含 MIME type 和 base64 数据的 data URL
     */
    dataURL?: string;
    /**
     * 是否是重发
     */
    resend: boolean;
    /**
     * 开始上传文件的回调。
     *
     * 这个回调接收一个参数叫 upload，调用 upload.abort() 可以取消文件上传。
     *
     * 注: 第二个参数 message 在 9.11.0 之后开始支持
     *
     * 注2: 此方法仅浏览器与微信小程序支持。
     */
    beginupload?: (upload: {
        abort: () => void;
        [key: string]: any;
    }, message: NIMChatroomMessage) => void;
    /**
     * 上传进度监听回调
     *
     * 注: 第二个参数 message 在 9.11.0 之后开始支持
     *
     * 注2: 此方法仅浏览器与微信小程序支持。且不要在 IE9 及以下的浏览器版本使用，因为存在兼容性问题
     */
    uploadprogress?: (obj: NIMUploadFileProgressObject, message: NIMChatroomMessage) => void;
    /**
     * 上传完毕的回调
     *
     * 注: 第三个参数 message 在 9.11.0 之后开始支持
     *
     * 注2: 第三个参数仅浏览器与微信小程序支持
     */
    uploaddone?: (error: Error | null, obj: NIMUploadFileResult, message: NIMChatroomMessage) => void;
    /**
     * 发送文件消息之前的回调函数
     */
    beforesend?: (msg: NIMChatroomMessage) => void;
    /**
     * 存储场景，不传默认全局实例配置
     */
    nosScene?: string;
    /**
     * 存储有效时间，传默认全局实例配置 不得小于一天，单位秒
     */
    nosSurvivalTime?: number;
    done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMessage) => void;
}
export interface NIMChatroomSendCustomMsgOptions extends NIMChatroomSendBaseOptions {
    /**
     * 自定义消息的消息内容, 推荐使用JSON格式构建
     */
    content: string;
}
export interface NIMChatroomSendGeoOptions extends NIMChatroomSendBaseOptions {
    /**
     * 地理位置对象
     */
    geo: NIMChatroomMsgGEO;
}
export interface NIMChatroomSendTipOptions extends NIMChatroomSendBaseOptions {
    /**
     * 提醒内容
     */
    tip: string;
}
export interface NIMChatroomSendFileFailedResult extends NIMBaseUploadFileOptions {
    msg: NIMChatroomMessage;
}
export interface NIMChatroomResendOptions extends NIMBaseUploadFileOptions {
    msg: NIMChatroomMessage;
    done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatroomMessage | NIMChatroomSendFileFailedResult) => void;
}
export interface NIMChatroomMessageInterface {
    /**
     * <h4>描述</h4>
     *
     * 发送文本消息。
     *
     * <h4>注意</h4>
     *
     * 该接口直接返回的是 sending 状态的未完成的消息体，发送完毕的消息体需要传递 options.done 获得。
     *
     * <h4>影响范围</h4>
     *
     * 调用该 API 可触发:
     * 1. 接收方的 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调函数
     * 2. 发送方同时在线的其它客户端 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调
     *
     * <h4>示例</h4>
     *
     * ```js
     * chatroom.sendText({
     *   text: 'hello',
     *   done: function(err, msg) {
     *      if (err) {
     *         console.log('发送失败', err)
     *      } else {
     *         console.log('发送消息成功，消息为: ', msg)
     *      }
     *   }
     * })
     * ```
     *
     */
    sendText(_options: NIMChatroomSendTextOptions): NIMChatroomMessage;
    /**
     *
     * <h4>描述</h4>
     * 发送图片、视频、音频或其他文件。用户可以选择调用 sendFile 上传并发送文件。
     * 也可以选择先调用 previewFile 上传文件，再调用 sendFile 发送文件
     *
     * <h4>注意一</h4>
     * <ul>
     * <li>该接口直接返回的是 sending 状态的未完成消息体，发送完毕的消息体需要传递 options.done 获得。</li>
     * </ul>
     *
     * <h4>注意二</h4>
     * <ul>
     * <li>fileInput、file、blob、filePath四个参数选择一个传入</li>
     * <li>fileInput: type='file'类型的input DOM元素的id。上传完成前请不要操作此节点上的文件</li>
     * <li>file: previewFile 回调函数的参数</li>
     * <li>blob: Blob类型JS对象</li>
     * <li>filePath: RN，小程序等特殊的 JS 运行环境专用（chooseImage 拿到的该临时路径）</li>
     * </ul>
     *
     * <h4>注意三</h4>
     * <ul>
     * <li>type: image、audio、video 或 file。默认为 file。主要区别在于消息体中 file 对象含有的信息不同</li>
     * <li>image: url, name, size, ext, w, h, type</li>
     * <li>audio: url, name, size, ext, container, dur</li>
     * <li>video: url, name, size, ext, container, dur, w, h</li>
     * <li>file:  url, name, size, ext</li>
     * </ul>
     * <h4>影响范围</h4>
     *
     * 调用该 API 可触发:
     * 1. 接收方的 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调函数
     * 2. 发送方同时在线的其它客户端 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调
     *
     * <h4>直接发送文件</h4>
     *
     * ```js
     * chatroom.sendFile({
     *   type: 'image',
     *   fileInput: 'domId',
     *   done: function(err, msg) {
     *      if (err) {
     *         console.log('发送失败', err)
     *      } else {
     *         console.log('发送消息成功，消息为: ', msg)
     *      }
     *   }
     * })
     * ```
     *
     * <h4>先previewFile，再发送文件</h4>
     *
     * ```js
     * chatroom.previewFile({
     *    type: 'image',
     *    fileInput: fileInput,
     *    uploadprogress: function(obj) {
     *        console.log('文件总大小: ' + obj.total + 'bytes');
     *        console.log('已经上传的大小: ' + obj.loaded + 'bytes');
     *        console.log('上传进度: ' + obj.percentage);
     *        console.log('上传进度文本: ' + obj.percentageText);
     *    },
     *    done: function(error, file) {
     *        console.log('上传image' + (!error?'成功':'失败'));
     *        // show file to the user
     *        if (!error) {
     *            var msg = chatroom.sendFile({
     *                file: file,
     *                done: sendMsgDone
     *            });
     *            console.log('正在发送image消息, id=' + msg.idClient);
     *            pushMsg(msg);
     *        }
     *    }
     * })
     * ```
     *
     * <h4>重发文件</h4>
     *
     * ```js
     *   let message = chatrooom.sendFile({
     *   type: 'image',
     *   fileInput: 'domId',
     *   done: function(err, obj) {
     *      if (err) {
     *         console.log('发送失败', err)
     *         // 重发. 当上传文件失败时 obj 参数的 msg 附带消息体，其他情况的 obj 就是消息体。
     *         setTimeout(function () {
     *           resendMessage(obj.msg ? obj.msg : obj)
     *         }, 3000)
     *      } else {
     *         console.log('发送消息成功，消息为: ', obj)
     *      }
     *   }
     * })
     *
     * // 上传前已经能得到 idClient 做渲染
     * console.log(message.idClient)
     *
     * // 重发
     * function resendMessage(oldMessage) {
     *   nim.sendFile(Object.assign(oldMessage, {
     *     type: 'image',
     *     fileInput: 'domId',
     *     resend: true, // 注意这个 resend 标记为 true，才能固定使用 oldMessage 里的 idClient
     *     done: function(err, obj) {
     *      if (err) {
     *         console.log('发送失败', err)
     *      } else {
     *         console.log('发送消息成功，消息为: ', obj)
     *      }
     *     }
     *   }))
     * }
     * ```
     *
     * <h4>关联链接</h4>
     * <ul>
     * <li>{@link CloudStorageInterface.previewFile}</li>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/zQ5MjI3ODY?platform=web#%E6%94%B6%E5%8F%91%E6%96%87%E4%BB%B6%E6%B6%88%E6%81%AF">收发文件消息</a></li>
     * </ul>
     */
    sendFile(_options: NIMChatroomSendFileOptions): NIMChatroomMessage;
    /**
     *
     * <h4>描述</h4>
     *
     * 当 SDK 提供的能力无法满足您的业务需求时，调用该 API 进行个性化定制发送，例如石头剪刀布和投骰子功能。
     *
     * <h4>注意</h4>
     *
     * 该接口直接返回的是 sending 状态的未完成消息体，发送完毕的消息体需要传递 options.done 获得。
     *
     * <h4>影响范围</h4>
     *
     * 调用该 API 可触发:
     * 1. 接收方的 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调函数
     * 2. 发送方同时在线的其它客户端 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调
     *
     * <h4>示例</h4>
     *
     * ```js
     * chatroom.sendCustomMsg({
     *   //接收方通过onmsgs接收消息
     *   //然后如果msg.type === 'custom'，接收方通过读取msg.content，然后调用业务代码
     *   content: JSON.stringify({type: 1}),
     *   done: function(err, msg) {
     *      if (err) {
     *         console.log('发送失败', err)
     *      } else {
     *         console.log('发送消息成功，消息为: ', msg)
     *      }
     *   }
     * })
     * ```
     */
    sendCustomMsg(_options: NIMChatroomSendCustomMsgOptions): NIMChatroomMessage;
    /**
     *
     * <h4>描述</h4>
     *
     * 发送提示消息。提示消息主要用于会话内的通知提醒，典型业务场景包括进入群组时出现的欢迎消息和会话过程中命中敏感词后的提示等。
     *
     * <h4>注意</h4>
     *
     * 该接口直接返回的是 sending 状态的未完成消息体，发送完毕的消息体需要传递 options.done 获得。
     *
     * <h4>影响范围</h4>
     *
     * 调用该 API 可触发:
     * 1. 接收方的 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调函数
     * 2. 发送方同时在线的其它客户端 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调
     *
     * <h4>示例</h4>
     *
     * ```js
     * chatroom.sendTipMsg({
     *   //接收方通过onMsg接收消息
     *   //然后如果msg.type === 'tip'，接收方通过读取msg.tip，然后调用业务代码
     *   tip: 'tip content',
     *   done: function(err, msg) {
     *      if (err) {
     *         console.log('发送失败', err)
     *      } else {
     *         console.log('发送消息成功，消息为: ', msg)
     *      }
     *   }
     * })
     * ```
     */
    sendTipMsg(_options: NIMChatroomSendTipOptions): NIMChatroomMessage;
    /**
     * <h4>描述</h4>
     *
     * 发送地理位置消息
     *
     * <h4>注意</h4>
     *
     * 该接口直接返回的是 sending 状态的未完成消息体，发送完毕的消息体需要传递 options.done 获得。
     *
     * <h4>影响范围</h4>
     *
     * 调用该 API 可触发:
     * 1. 接收方的 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调函数
     * 2. 发送方同时在线的其它客户端 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调
     *
     * <h4>示例</h4>
     *
     * ```js
     * chatroom.sendGeo({
     *   //接收方通过onMsg接收消息
     *   //然后如果msg.type === 'geo'，接收方通过读取msg.geo，然后调用业务代码
     *   geo: {
     *      lng: 116.3833,
     *      lat: 39.9167,
     *      title: 'Beijing'
     *   },
     *   done: function(err, msg) {
     *      if (err) {
     *         console.log('发送失败', err)
     *      } else {
     *         console.log('发送消息成功，消息为: ', msg)
     *      }
     *   }
     * })
     * ```
     *
     */
    sendGeo(_options: NIMChatroomSendGeoOptions): NIMChatroomMessage;
    /**
     * 获取聊天室历史消息。
     *
     * <ul>
     * <li>返回消息的有效数量小于等于 limit。为了方便会话中生成时间戳，在返回结果中插入了若干条时间戳数据。因此返回消息总长度可能大于 limit</li>
     * <li>reverse 为 false 时，返回消息时间 < timetag</li>
     * <li>reverse 为 true 时，返回消息时间 > timetag</li>
     * <li>reverse 为 false 时，返回消息按照时间降序排列，即越早的消息越靠后</li>
     * <li>reverse 为 true 时，返回消息按照时间升序排列，即越晚的消息越靠后</li>
     * <li>分页查询时，由于跨分页时查询结果有重复，推荐开发者根据 idClient 去重</li>
     * </ul>
     *
     */
    getHistoryMsgs(_options: {
        /**
         * 毫秒级时间戳。若不填写，或者填写的值为 0，其数值会受 reverse影响
         *
         * <ul>
         * <li>reverse 为 false 时, timetag 默认值为当前服务器时间</li>
         * <li>reverse 为 true 时, timetag 默认值为 0</li>
         * </ul>
         */
        timetag?: number;
        /**
         * limit, 默认 100
         */
        limit?: number;
        /**
         * <ul>
         * <li>取 false 时，返回消息时间 < timetag。返回的队列按照时间降序排列</li>
         * <li>取 true 时，返回消息时间 > timetag。返回的队列按照时间生序排列</li>
         * </ul>
         */
        reverse?: boolean;
        /**
         * 消息类型列表，默认全部消息类型
         */
        msgTypes?: Array<string>;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            obj: {
                msgs: Array<NIMChatroomMessage>;
            };
        }) => void;
    }): void;
    /**
     * 根据标签获取聊天室历史消息。
     *
     * <ul>
     * <li>返回消息的数量小于等于 limit</li>
     * <li>reverse 为 0 时，从 fromTime 开始，寻找 time >= fromTime && time <= toTime 的消息</li>
     * <li>reverse 为 1 时，从 toTime 开始， 寻找 time >= fromTime && time <= toTime 的消息</li>
     * <li>reverse 为 0 时，返回消息按照时间升序排列，即越晚的消息越靠后</li>
     * <li>reverse 为 1 时，返回消息按照时间降序排列，即越早的消息越靠后</li>
     * <li>分页查询时，由于跨分页时查询结果有重复，推荐开发者根据 idClient 去重</li>
     * </ul>
     *
     * <h4>注意</h4>
     * <ul>
     * <li>若设置了 fromTime，则必须设置 toTime 大于 fromTime，否则会报参数异常</li>
     * <li>fromTime 默认为 0，toTime 默认为服务器当前时间</li>
     * </ul>
     */
    getHistoryMsgsByTags(options: {
        /**
         * 标签
         * ['tag1', 'tag2', 'tag3']
         */
        tags: Array<string>;
        /**
         * 消息类型
         */
        types: Array<string>;
        /**
         * 开始时间
         */
        fromTime?: number;
        /**
         * 结束时间
         */
        toTime?: number;
        /**
         * 数量限制，默认 100
         */
        limit?: number;
        /**
         * 默认为 0。
         * <ul>
         * <li>0 表示从 fromTime 开始向后查找。同时返回的结果按照时间升序排列。</li>
         * <li>1 表示从 toTime 开始向前查找。同时返回的结果按照时间降序排列。</li>
         * </ul>
         */
        reverse?: 0 | 1;
        /**
         * 回调
         */
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            obj: {
                msgs: Array<NIMChatroomMessage>;
            };
        }) => void;
    }): void;
    /**
     * @deprecated 此接口废弃，使用发送接口替代。
     *
     * 发送消息失败后，可以通过resendMsg重发消息
     *
     * 注: 此接口废弃，若要实现重发效果，请使用 sendText、sendFile 等发送接口并且传入参数 { resend: true } 代表重发。查看 {@link NIMChatroomMessageInterface.sendFile | sendFile} 里的代码示例
     *
     * <h4>影响范围</h4>
     *
     * 调用该 API 触发:
     * 1. 接收方的 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调函数
     * 2. 发送方同时在线的其它客户端 {@link NIMChatroomGetInstanceOptions.onmsgs} 回调
     */
    resendMsg(_options: NIMChatroomResendOptions): NIMChatroomMessage;
}
