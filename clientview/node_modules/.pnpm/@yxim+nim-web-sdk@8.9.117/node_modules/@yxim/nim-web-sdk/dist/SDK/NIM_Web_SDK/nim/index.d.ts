import { EventEmitter } from 'eventemitter3';
import { CloudSessionInterface, NIMCloudSession } from './CloudSessionInterface';
import { CloudStorageInterface, NIMPreviewFileOptions } from '../common/CloudStorageInterface';
import { EventInterface, NIMPublishEventResult, NIMSubscribeEventInfo, NIMSubscribeEventResult, NIMUnSubscribeEventsByAccountsResult } from './EventInterface';
import { FriendInterface, NIMFriendProfile } from './FriendInterface';
import { MessageExtendInterface, NIMCollect, NIMMsgPin, NIMMsgPinInfo } from './MessageExtendInterface';
import { MessageInterface, NIMBaseSendMsgOptions, NIMGetTeamMsgReadAccountsResult, NIMMessage, NIMMsgScene, NIMMsgType, NIMResendMsgOptions, NIMSendCustomMsgOptions, NIMSendFileOptions, NIMSendGEOOptions, NIMSendTextOptions, NIMSendTipMsgOptions, NIMTeamMsgReceipts } from './MessageInterface';
import { MessageLogInterface } from './MessageLogInterface';
import { MiscInterface } from './MiscInterface';
import { NIMInterface } from './NIMInterface';
import { NIMHttpRequestProxyOptions, PassThroughInterface } from './PassThroughInterface';
import { PluginInterface } from './PluginInterface';
import { NIMSession, SessionInterface } from './SessionInterface';
import { NIMSignalingChannel, NIMSignalingEventInterface, NIMSignalingPushInfo, SignalingInterface } from './SignalingInterface';
import { NIMSuperTeam, NIMSuperTeamMember, SuperTeamInterface } from './SuperTeamInterface';
import { NIMSystemMessage, NIMSystemMessageType, SystemMessageInterface } from './SystemMessageInterface';
import { NIMTeam, NIMTeamMember, TeamInterface } from './TeamInterface';
import { NIMCommonError, NIMStrAnyObj } from '../types';
import { NIMUserGender, NIMUserNameCard, UserInterface } from './UserInterface';
import { NIMSearchLocalResult, UtilsInterface } from './UtilsInterface';
import { NIMGetInstanceOptions } from './types';
export default class NIM extends EventEmitter<NIMSignalingEventInterface> implements CloudSessionInterface, CloudStorageInterface, EventInterface, FriendInterface, MessageExtendInterface, MessageInterface, MessageLogInterface, MiscInterface, NIMInterface, PassThroughInterface, PluginInterface, SessionInterface, SignalingInterface, SuperTeamInterface, SystemMessageInterface, TeamInterface, UserInterface, UtilsInterface {
    constructor(_options: NIMGetInstanceOptions);
    /**
     * <ul>
     * <li>此接口为单例模式, 对于同一个账号, 永远返回同一份实例, 即只有第一次调用会初始化一个实例</li>
     * <li>后续调用此接口会直接返回初始化过的实例, 同时也会调用接口 {@link NIMInterface.setOptions | setOptions } 更新传入的配置</li>
     * <li>后续调用此接口时, 如果连接已断开, 会自动建立连接</li>
     * <li>当发生掉线时，SDK会自动进行重连</li>
     * </ul>
     */
    static getInstance(_options: NIMGetInstanceOptions): NIM;
    /**
     * @deprecated
     *
     * 退出登录。
     *
     * 注：SDK 版本 v9.6.0 以下推荐先调用 logout 再调用 disconnect/destroy 来保证退出。v9.6.0 及以上不需要调用这个 API，disconnect/destroy 断开前会自动调用。
     */
    logout(): void;
    disconnect(_options: {
        /**
         * done 回调
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    destroy(_options: {
        /**
         * done 回调
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    connect(): void;
    kick(_options: {
        /**
         * 踢当前用户登录的其它端
         */
        deviceIds: [];
        /**
         * done 回调
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    setOptions(_options: NIMGetInstanceOptions): void;
    getUser(_options: {
        /**
         * 账号 id
         */
        account: string;
        /**
         * 是否去服务器上获取，默认为 false。
         *
         * 为 true 从服务器获取，为 false 则从本地数据库中缓存的信息里获取
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUserNameCard) => void;
    }): void;
    getUsers(_options: {
        /**
         * 账号 id 列表
         */
        accounts: string[];
        /**
         * 是否去服务器上获取，默认为 false。
         *
         * 为 true 从服务器获取，为 false 则从本地数据库中缓存的信息里获取
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUserNameCard[]) => void;
    }): void;
    updateMyInfo(_options: {
        /**
         * 昵称
         */
        nick?: string;
        /**
         * 头像
         */
        avatar?: string;
        /**
         * 签名
         */
        sign?: string;
        /**
         * 性别
         */
        gender?: NIMUserGender;
        /**
         * 邮箱
         */
        email?: string;
        /**
         * 出生日期
         */
        birth?: string;
        /**
         * 电话
         */
        tel?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 用户配置的对某些资料内容另外的反垃圾的业务 ID
         */
        antiSpamBusinessId?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUserNameCard) => void;
    }): void;
    isUserInBlackList(_options: {
        /**
         * 查询目标的 account ID
         */
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: boolean) => void;
    }): void;
    getRelations(_options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * <ul>
             * <li>account: IM account</li>
             * <li>isMuted: 是否被静音</li>
             * <li>isBlack: 是否被拉入黑名单</li>
             * </ul>
             */
            blacklist: {
                account: string;
                isMuted?: boolean;
                isBlack?: boolean;
                createTime: number;
                updateTime: number;
            }[];
            /**
             * <ul>
             * <li>account: IM account</li>
             * <li>isMuted: 是否被静音</li>
             * <li>isBlack: 是否被拉入黑名单</li>
             * </ul>
             */
            mutelist: {
                account: string;
                isMuted?: boolean;
                isBlack?: boolean;
                createTime: number;
                updateTime: number;
            }[];
        }) => void;
    }): void;
    addToBlacklist(_options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    removeFromBlacklist(_options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    addToMutelist(_options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    removeFromMutelist(_options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 被操作者账号 ID
             */
            account: string;
            /**
             * 是否加入名单(黑名单或者静音列表)
             *
             * true 代表某人被加入名单，false 代表某人被移出名单
             */
            isAdd: boolean;
            /**
             * 该操作记录的详情
             */
            record: {
                /**
                 * 被操作者账号 ID
                 */
                account: string;
                /**
                 * 更新时间戳
                 */
                updateTime: number;
            };
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link UserInterface.addToBlacklist}、 {@link UserInterface.removeFromBlacklist}
     */
    markInBlacklist(_options: NIMStrAnyObj): void;
    /**
     * @deprecated 已废弃。请使用 {@link UserInterface.addToMutelist}、{@link UserInterface.removeFromMutelist}
     */
    markInMutelist(_options: NIMStrAnyObj): void;
    getTeam(_options: {
        /**
         * 群 ID
         */
        teamId: string;
        /**
         * 是否强制从服务端获取
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam) => void;
    }): void;
    getTeams(_options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam[]) => void;
    }): void;
    getTeamsById(_options: {
        teamIds: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 成功查询到的群
             */
            teams: NIMTeam[];
            /**
             * 入参里的 teamIds 所查询失败的那部分
             */
            tids: string[];
        }) => void;
    }): void;
    createTeam(_options: {
        /**
         * 群类型
         */
        type: 'normal' | 'advanced';
        /**
         * 群名
         */
        name: string;
        /**
         * 群头像
         */
        avatar?: string;
        /**
         * 群简介
         */
        intro?: string;
        /**
         * 群公告
         */
        announcement?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 要拉进群的成员的帐号列表
         */
        accounts?: string[];
        /**
         * 拉人的附言
         */
        ps?: string;
        /**
         * 对某些资料内容进行反垃圾处理的业务 ID, 在云信控制台里配置.
         */
        antiSpamBusinessId?: string;
        /**
         * 群加入方式
         */
        joinMode?: 'noVerify' | 'needVerify' | 'rejectAll';
        /**
         * 群被邀请模式
         */
        beInviteMode?: 'noVerify' | 'needVerify';
        /**
         * 群邀请模式
         */
        inviteMode?: 'manager' | 'all';
        /**
         * 群信息修改权限
         */
        updateTeamMode?: 'manager' | 'all';
        /**
         * 群信息自定义字段修改权限
         */
        updateCustomMode?: 'manager' | 'all';
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 创建者的信息
             */
            owner: NIMTeamMember;
            /**
             * 群
             */
            team: NIMTeam;
            /**
             * 要拉进群的成员的帐号列表
             */
            accounts?: string[];
            /**
             * 拉人的附言
             */
            ps?: string;
            /**
             * 反垃圾标签
             */
            antispamTag?: {
                antiSpamBusinessId?: string;
            };
        }) => void;
    }): void;
    updateTeam(_options: {
        /**
         * 群 ID
         */
        teamId: string;
        /**
         * 群名
         */
        name: string;
        /**
         * 群头像
         */
        avatar?: string;
        /**
         * 群简介
         */
        intro?: string;
        /**
         * 群公告
         */
        announcement?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 对某些资料内容进行反垃圾处理的业务 ID, 在云信控制台里配置.
         */
        antiSpamBusinessId?: string;
        /**
         * 群加入方式
         */
        joinMode?: 'noVerify' | 'needVerify' | 'rejectAll';
        /**
         * 群被邀请模式
         */
        beInviteMode?: 'noVerify' | 'needVerify';
        /**
         * 群邀请模式
         */
        inviteMode?: 'manager' | 'all';
        /**
         * 群信息修改权限
         */
        updateTeamMode?: 'manager' | 'all';
        /**
         * 群信息自定义字段修改权限
         */
        updateCustomMode?: 'manager' | 'all';
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    transferTeam(_options: {
        teamId: string;
        account: string;
        /**
         * 转让群的同时是否离开群
         */
        leave: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    dismissTeam(_options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    leaveTeam(_options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    muteTeamAll(_options: {
        teamId: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    getTeamMembers(_options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: NIMTeamMember[];
            teamId: string;
        }) => void;
    }): void;
    getMutedTeamMembers(_options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: NIMTeamMember[];
            teamId: string;
        }) => void;
    }): void;
    addTeamMembers(_options: {
        teamId: string;
        /**
         * 要加入的用户账号列表
         */
        accounts: string[];
        /**
         * 附言，长度不得大于 5000 字符，开发者可以使用 JSON 序列化字符串填充
         */
        ps?: string;
        /**
         * 附加字段，推荐使用 JSON 序列化字符串
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    acceptTeamInvite(_options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    rejectTeamInvite(_options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    removeTeamMembers(_options: {
        teamId: string;
        /**
         * 要踢出的群成员账号列表
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    addTeamManagers(_options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    removeTeamManagers(_options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateInfoInTeam(_options: {
        teamId: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember} 。
         */
        nickInTeam?: string;
        /**
         * @deprecated use "muteNotiType" instead
         *
         * 是否关闭此群的消息提醒, 默认 false.
         *
         * 注: 为 true 表示关闭提醒, 但是 SDK 仍然会收到这个群的消息. 因为 SDK 只是记录这个设置, 具体根据这个设置要执行的操作由开发者决定
         */
        muteTeam?: boolean;
        /**
         * 提醒策略
         *
         * "0" 开启提醒
         * "1" 关闭消息提醒
         * "2" 只接受管理员的消息的提醒
         */
        muteNotiType?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: Pick<NIMTeamMember, 'id' | 'account' | 'custom' | 'muteTeam' | 'nickInTeam' | 'teamId' | 'updateTime'>) => void;
    }): void;
    updateNickInTeam(_options: {
        teamId: string;
        account: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember} 。
         */
        nickInTeam: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateMuteStateInTeam(_options: {
        teamId: string;
        account: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    getTeamMemberByTeamIdAndAccount(_options: {
        teamId: string;
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * key 为入参里的 account ID
             */
            [key: string]: NIMTeamMember;
        }) => void;
    }): void;
    getTeamMemberInvitorAccid(_options: {
        teamId: string;
        /**
         * 需要查询的群成员 account ID 账号列表.
         *
         * 注: 每 200 个触发一次 done 回调提供.
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * key 为入参里的 account ID, value 为邀请者的 account ID
             */
            [key: string]: string;
        }) => void;
    }): void;
    applyTeam(_options: {
        teamId: string;
        /**
         * 附言
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam) => void;
    }): void;
    passTeamApply(_options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    rejectTeamApply(_options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link TeamInterface.getTeamMembers}
     */
    getLocalTeamMembers(_options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            members: NIMTeamMember[];
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃
     */
    deleteLocalTeam(_options: {
        /**
         * 建议传入 teamId 数组。
         *
         * 注: 为了兼容老接口, 允许传入 string, 但是建议传入数组
         */
        teamId: string | string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    notifyForNewTeamMsg(options: {
        teamIds: string[];
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            [key: string]: number;
        }, miss: string[]) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link TeamInterface.getTeams}
     */
    getLocalTeams(_options: {
        teamIds: string[];
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMTeam[]) => void;
    }): void;
    sendCustomSysMsg(_options: {
        /**
         * 场景，跟消息场景的一样分为 p2p, team, superTeam.
         */
        scene: NIMMsgScene;
        /**
         * 接收方，account ID，或者群号。
         */
        to: string;
        /**
         * 自定义系统消息的内容，推荐传入 JSON 序列化字符串。
         */
        content: string;
        /**
         * apns推送文案, 仅对接收方为iOS设备有效
         */
        apnsText?: string;
        /**
         * 自定义系统通知的推送属性. 推荐传入 JSON 序列化字符串
         */
        pushPayload?: string;
        /**
         * 是否只发送给在线用户. 默认为 true
         *
         * true. 只发送给在线用户, 如果接收方不在线, 这条通知将被丢弃。适合是“正在输入”这种场景
         *
         * false. 若接收方在线, 那么会立即收到该通知，若接收方不在线, 会在其上线后推送离线系统通知。
         */
        sendToOnlineUsersOnly?: boolean;
        /**
         * 是否抄送. 默认 true
         */
        cc?: boolean;
        /**
         * 环境变量，用于指向不同的抄送、第三方回调等配置
         */
        env?: string;
        /**
         * 是否需要推送. 默认 true
         */
        isPushable?: boolean;
        /**
         * 是否需要推送昵称. 默认 false
         */
        needPushNick?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSystemMessage) => void;
    }): void;
    markSysMsgRead(_options: {
        sysMsgs: NIMSystemMessage[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    getLocalSysMsgs(_options: {
        /**
         * 分类
         */
        /**
         * 类型
         */
        type?: NIMSystemMessageType;
        /**
         * 是否已读.
         */
        read?: boolean;
        /**
         * 上次查询的最后一条系统通知的 `idServer`
         */
        lastIdServer?: string;
        /**
         * 一页查询数量限制，默认 100
         */
        limit?: number;
        /**
         * 查询顺序
         *
         * 默认 false. 表示从最近的系统通知开始往前查找本地系统通知.
         * 若为 true 表示从第一条系统通知开始往后查找本地系统通知
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSystemMessage[]) => void;
    }): void;
    updateLocalSysMsg(_options: {
        /**
         * 系统消息的 idServer
         */
        idServer: string;
        /**
         * 处理状态
         */
        state?: string;
        /**
         * 自定义字段
         */
        localCustom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSystemMessage) => void;
    }): void;
    deleteLocalSysMsg(_options: {
        idServer: string | string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    deleteAllLocalSysMsgs(_options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    getSuperTeam(_options: {
        /**
         * 群 ID
         */
        teamId: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSuperTeam) => void;
    }): void;
    getSuperTeams(_options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSuperTeam[]) => void;
    }): void;
    updateSuperTeam(_options: {
        /**
         * 群 ID
         */
        teamId: string;
        /**
         * 群名
         */
        name: string;
        /**
         * 群头像
         */
        avatar?: string;
        /**
         * 群简介
         */
        intro?: string;
        /**
         * 群公告
         */
        announcement?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        /**
         * 对某些资料内容进行反垃圾处理的业务 ID, 在云信控制台里配置.
         */
        antiSpamBusinessId?: string;
        /**
         * 群加入方式
         */
        joinMode?: 'noVerify' | 'needVerify' | 'rejectAll';
        /**
         * 群被邀请模式
         */
        beInviteMode?: 'noVerify' | 'needVerify';
        /**
         * 群邀请模式
         */
        inviteMode?: 'manager' | 'all';
        /**
         * 群信息修改权限
         */
        updateTeamMode?: 'manager' | 'all';
        /**
         * 群信息自定义字段修改权限
         */
        updateCustomMode?: 'manager' | 'all';
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    transferSuperTeam(_options: {
        teamId: string;
        account: string;
        /**
         * 转让群的同时是否离开群
         */
        leave: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    leaveSuperTeam(_options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateSuperTeamMute(_options: {
        teamId: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    getSuperTeamMembersByJoinTime(_options: {
        teamId: string;
        /**
         * 加入时间.
         *
         * 注: 如果传入这个参数, 获取在这个时间之后加入的成员, 不传则不限制
         */
        joinTime?: number;
        /**
         * 分页限制, 默认 100, 返回 100 条数据
         */
        limit?: number;
        /**
         * 查询顺序。默认 false
         *
         * false 即查询 joinTime 之后加入的成员
         *
         * true 即查询 joinTime 之前加入的成员
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            teamId: string;
            /**
             * 查到的群成员数据
             */
            members: NIMSuperTeamMember[];
            /**
             * members 中 invalid 为 true 的记录
             */
            invalid: NIMSuperTeamMember[];
        }) => void;
    }): void;
    getSuperTeamMembersByAccounts(_options: {
        teamId: string;
        /**
         * account ID 列表
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * account ID 列表
             */
            accounts: string[];
            /**
             * invalid 为 true 的 account ID 列表
             */
            invalidAccounts: string[];
            /**
             * 成员的具体数据
             */
            members: NIMSuperTeamMember;
        }) => void;
    }): void;
    getAllSuperTeamMembers(_options: {
        teamId: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            teamId: string;
            /**
             * 查到的群成员数据
             */
            members: NIMSuperTeamMember[];
            /**
             * members 中 invalid 为 true 的记录
             */
            invalid: NIMSuperTeamMember[];
        }) => void;
    }): void;
    getMutedSuperTeamMembers(_options: {
        teamId: string;
        /**
         * 加入时间.
         *
         * 注: 如果传入这个参数, 获取在这个时间之后加入的成员, 不传则不限制
         */
        joinTime?: number;
        /**
         * 分页限制, 默认 100, 返回 100 条数据
         */
        limit?: number;
        /**
         * 查询顺序。默认 false
         *
         * false 即查询 joinTime 之后加入的成员
         *
         * true 即查询 joinTime 之前加入的成员
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            teamId: string;
            /**
             * 查到的群成员数据
             */
            members: NIMSuperTeamMember[];
            /**
             * members 中 invalid 为 true 的记录
             */
            invalid: NIMSuperTeamMember[];
        }) => void;
    }): void;
    addSuperTeamMembers(_options: {
        teamId: string;
        /**
         * 要加入的用户账号列表
         */
        accounts: string[];
        /**
         * 附言，长度不得大于 5000 字符，开发者可以使用 JSON 序列化字符串填充
         */
        ps?: string;
        /**
         * 附加字段，推荐使用 JSON 序列化字符串
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    acceptSuperTeamInvite(_options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    rejectSuperTeamInvite(_options: {
        teamId: string;
        /**
         * 管理员邀请此用户进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    removeSuperTeamMembers(_options: {
        teamId: string;
        /**
         * 要踢出的群成员账号列表
         */
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    addSuperTeamManagers(_options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    removeSuperTeamManagers(_options: {
        teamId: string;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateNickInSuperTeam(_options: {
        teamId: string;
        account: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember} 。
         */
        nickInTeam: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateInfoInSuperTeam(_options: {
        teamId: string;
        /**
         * 在群里的昵称
         *
         * 注: 更新昵称后, 所有其它在线的群成员会收到 {@link NIMGetInstanceOptions.onupdateteammember | onupdateteammember} 。
         */
        nickInTeam?: string;
        /**
         * @deprecated use "muteNotiType" instead
         *
         * 是否关闭此群的消息提醒, 默认 false.
         *
         * 注: 为 true 表示关闭提醒, 但是 SDK 仍然会收到这个群的消息. 因为 SDK 只是记录这个设置, 具体根据这个设置要执行的操作由开发者决定
         */
        muteTeam?: boolean;
        /**
         * 提醒策略
         *
         * "0" 开启提醒
         * "1" 关闭消息提醒
         * "2" 只接受管理员的消息的提醒
         */
        muteNotiType?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: Pick<NIMSuperTeamMember, 'id' | 'account' | 'custom' | 'muteTeam' | 'nickInTeam' | 'teamId' | 'updateTime'>) => void;
    }): void;
    updateSuperTeamMembersMute(_options: {
        teamId: string;
        account: string;
        /**
         * 是否要禁言
         */
        mute: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    applySuperTeam(_options: {
        teamId: string;
        /**
         * 附言
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSuperTeam) => void;
    }): void;
    passSuperTeamApply(_options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    rejectSuperTeamApply(_options: {
        teamId: string;
        /**
         * 用户申请进群的系统通知的 idServer
         */
        idServer: string;
        /**
         * 申请者的 accountId
         */
        from: string;
        /**
         * 附加信息
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    signalingCallEx(_options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         */
        type: number;
        /**
         * 频道名称
         *
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 云信 G2-RTC 的房间名，加入频道时 sdk 会携带这个参数, 再返回对应的 token
         */
        nertcChannelName?: string;
        /**
         * 云信 G2-RTC 的 token 的有效期，表示 token 的过期时间，单位秒，选填，默认10分钟
         */
        nertcTokenTtl?: string;
        /**
         * 云信G2-RTC加入房间的请求参数，推荐传入 JSON 序列化字符串
         */
        nertcJoinRoomQueryParamMap?: string;
        /**
         * 推送属性
         */
        pushInfo?: NIMSignalingPushInfo;
    }): Promise<NIMSignalingChannel>;
    signalingCall(_options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         */
        type: number;
        /**
         * 频道名称
         *
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 推送属性
         */
        pushInfo?: NIMSignalingPushInfo;
    }): Promise<NIMSignalingChannel>;
    signalingCreateAndJoin(_options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         */
        type: number;
        /**
         * 频道名称
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<NIMSignalingChannel>;
    signalingCreate(_options: {
        /**
         * 频道类型, 通话类型 1: 音频; 2: 视频; 3: 其他
         *
         */
        type: number;
        /**
         * 频道名称
         *
         */
        channelName: string;
        /**
         * 扩展字段
         *
         */
        ext?: string;
    }): Promise<NIMSignalingChannel>;
    signalingDelay(_options: {
        /**
         * 频道id，唯一标识
         */
        channelId: string;
    }): Promise<NIMSignalingChannel>;
    signalingClose(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    signalingGetChannelInfo(_options: {
        /**
         * 频道名
         *
         */
        channelName: string;
    }): Promise<NIMSignalingChannel>;
    signalingJoin(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: number;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<NIMSignalingChannel>;
    signalingLeave(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    signalingInvite(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 推送属性
         */
        pushInfo?: NIMSignalingPushInfo;
    }): Promise<void>;
    signalingCancel(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 受邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给受邀请者
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    signalingReject(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
    }): Promise<void>;
    signalingAccept(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 邀请者的账号 account id
         */
        account: string;
        /**
         * 邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该 requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存入离线消息。默认 false
         */
        offlineEnabled?: boolean;
        /**
         * 接受邀请后，是否直接加入频道。默认为 true
         */
        autoJoin?: boolean;
        /**
         * 接受邀请后，自己在频道中对应的uid。大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: number;
        /**
         * 接受邀请后，加入频道的操作附加信息，将在加入频道通知中带给其他频道成员
         */
        joinAttachExt?: string;
    }): Promise<void>;
    signalingMarkMsgRead(_options: {
        /**
         * 需要标记的已读的信令消息 id
         */
        msgid: number[] | string[];
    }): Promise<void>;
    signalingControl(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 要通知的目标账号(account id)。如果不传则通知所有人
         */
        account?: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
    }): Promise<void>;
    signalingJoinAndAccept(_options: {
        /**
         * 频道 id
         */
        channelId: string;
        /**
         * 对方accid，必须
         */
        account: string;
        /**
         * 必须，邀请者邀请的请求id，需要邀请者填写，之后取消邀请、拒绝、接受需要复用该requestId
         */
        requestId: string;
        /**
         * 该操作的附加信息，透传给其他人
         */
        attachExt?: string;
        /**
         * 是否存离线通知，默认false
         */
        offlineEnabled?: boolean;
        /**
         * 自己在频道中对应的uid，大于零有效，无效时服务器会分配随机唯一的uid
         */
        uid?: number;
        /**
         * 云信G2-RTC的房间名，加入频道请求时携带，则会返回token
         */
        nertcChannelName?: string;
        /**
         * 云信G2-RTC的token的有效期，表示token的过期时间，单位秒，选填，默认10分钟
         */
        nertcTokenTtl?: number;
        /**
         * 云信G2-RTC加入房间的请求参数，推荐传入 JSON 序列化字符串
         */
        nertcJoinRoomQueryParamMap?: string;
    }): Promise<void>;
    signalingSync(): Promise<void>;
    getLocalSession(_options: {
        /**
         * 即 {@link NIMSession.id | session.id}
         */
        sessionId: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void;
    }): void;
    getLocalSessions(_options: {
        /**
         * 上一页最后一条会话的 id，第一次查询可以不填。
         */
        lastSessionId?: string;
        /**
         * 分页查询数量限制，默认 100 条记录
         */
        limit?: number;
        /**
         * 查询顺序。默认 false 代表降序
         *
         * false 即从最近的会话开始往前查找本地会话
         *
         * true 表示从第一条会话开始往后查找本地会话
         */
        reverse?: boolean;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession[]) => void;
    }): void;
    setCurrSession(_sessionId: string): void;
    resetCurrSession(_sessionId: string): void;
    resetSessionUnread(_sessionId: string, _done: (err: Error | null, failedSessionId: string) => void): void;
    resetSessionsUnread(_sessionIds: string[], _done: (err: Error | null) => void): Promise<void>;
    resetAllSessionUnread(): void;
    getStickTopSessions(_options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession[]) => void;
    }): void;
    addStickTopSession(_options: {
        /**
         * sessionId
         *
         * 例如 p2p-cs1、team-113879441
         */
        id: string;
        /**
         * 云端置顶会话的扩展字段
         */
        topCustom?: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            stickTopSession: NIMSession;
        }) => void;
    }): void;
    deleteStickTopSession(_options: {
        /**
         * sessionId
         *
         * 例如 p2p-cs1、team-113879441
         */
        id: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            stickTopSession: NIMSession;
        }) => void;
    }): void;
    updateStickTopSession(_options: {
        /**
         * sessionId
         *
         * 例如 p2p-cs1、team-113879441
         */
        id: string;
        /**
         * 云端置顶会话的扩展字段
         */
        topCustom?: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            stickTopSession: NIMSession;
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃。请使用 {@link SessionInterface.getLocalSessions}
     */
    getLocalSessionsByMsgType(_options: NIMStrAnyObj): void;
    insertLocalSession(_options: {
        scene: 'p2p' | 'team' | 'superTeam';
        to: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void | undefined;
    }): void;
    updateLocalSession(_options: {
        id: string;
        localCustom?: string;
        needNotify?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void | undefined;
    }): void;
    deleteLocalSession(_options: {
        id: string;
        isLogic?: boolean | undefined;
        isDeleteRoaming?: boolean | undefined;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSession) => void | undefined;
    }): void;
    resetSuperTeamSessionsUnread(_sessionIds: string[], _done: (err: Error | null) => void): Promise<void>;
    /**
     * @deprecated 已废弃。推荐开发者调用 {@link SessionInterface.deleteLocalSession | deleteLocalSession} 和 {@link MessageLogInterface.clearServerHistoryMsgsWithSync | clearServerHistoryMsgsWithSync}
     */
    deleteSession(_options: {
        scene: 'p2p' | 'team' | 'superTeam';
        to: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    /**
     * @deprecated 已废弃。推荐开发者调用 {@link SessionInterface.deleteLocalSession | deleteLocalSession} 和 {@link MessageLogInterface.clearServerHistoryMsgsWithSync | clearServerHistoryMsgsWithSync}
     */
    deleteSessions(_options: {
        sessions: NIMSession[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    /**
     * @deprecated 已废弃.查询漫游消息不全的会话/会话列表
     *
     *  @param options
     *  @param options.id  会话 id
     */
    getSessionsWithMoreRoaming(_options: {
        id: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void | undefined;
    }): void;
    /**
     * @deprecated 已废弃。更新漫游消息不全的会话的漫游时间戳
     *
     * @param options
     * @param options.msg 完整漫游消息列表中最早的一条消息，即在这条消息之后的本地消息列表是完整的
     */
    updateSessionsWithMoreRoaming(_options: {
        msg: NIMMessage;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void | undefined;
    }): void;
    /**
     * @deprecated 已废弃。根据会话 id 删除漫游消息不全的会话
     *
     * @param options
     * @param options.id  会话 id
     */
    deleteSessionsWithMoreRoaming(_options: {
        id: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void | undefined;
    }): void;
    /**
     * 获取聊天室的连接地址，返回可用的连接地址列表
     *
     * @depreacated  推荐开发者使用 <a href="https://doc.yunxin.163.com/messaging/docs/TMxODkzNjE?platform=server">服务器接口</a> 查询聊天室地址
     */
    getChatroomAddress(_options: {
        /**
         * 聊天室 id
         */
        chatroomId: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 地址列表
             */
            address: string[];
            /**
             * 聊天室 id
             */
            chatroomId: string;
            /**
             * 0 代表想要获取 ipv4 的连接，1 代表 ipv6，2 代表不限制。
             *
             * 默认 0
             */
            ipType: number;
            /**
             * 是否是提供给微信环境下用的链接
             */
            isWeixinApp: boolean;
            type: number;
        }) => void;
    }): void;
    httpRequestProxy(_options: NIMHttpRequestProxyOptions): void;
    getHistoryMsgs(_options: {
        /**
         * 消息场景
         */
        scene: NIMMsgScene;
        /**
         * 聊天对象。若是点对点消息请传入对方的账号，若是群消息则传入群id
         */
        to: string;
        /**
         * 开始时间的时间戳. 精确到 ms, 默认为 0
         */
        beginTime?: number;
        /**
         * 结束时间的时间戳. 精确到 ms, 默认为 0
         */
        endTime?: number;
        /**
         * 上次查询的最后一条消息的 idServer, 第一次不填
         */
        lastMsgId?: string;
        /**
         * 分页查询数量限制，默认 100 条记录
         */
        limit?: number;
        /**
         * 查询顺序。默认 false 代表降序
         *
         * false 从 endTime 开始往前查找 limit 条历史消息
         *
         * true 从 beginTime 开始往后查找 limit 条历史消息
         */
        reverse?: boolean;
        /**
         * 排序顺序。默认 false
         *
         * false 表示返回的消息按时间降序排序;
         *
         * true 表示按时间升序排序
         */
        asc?: boolean;
        /**
         * 指定消息类型。默认不填写就是查找全部消息类型
         */
        msgTypes?: NIMMsgType[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            msgs: NIMMessage[];
        }) => void;
    }): void;
    clearServerHistoryMsgsWithSync(_options: {
        /**
         * 消息场景
         */
        scene: NIMMsgScene;
        /**
         * 聊天对象。若是点对点消息请传入对方的账号，若是群消息则传入群id
         */
        to: string;
        /**
         * 是否删除漫游数据。默认 true
         */
        isDeleteRoam?: boolean;
        /**
         * 是否多端同步。默认 false
         */
        isSyncSelf?: boolean;
        /**
         * 扩展字段
         */
        ext?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    msgFtsInServer(_options: {
        /**
         * 检索关键词
         */
        keyword: string;
        /**
         * 检索目标的开始时间，默认 0 代表不限制
         */
        fromTime?: number;
        /**
         * 检索目标的结束时间，默认 当前时间
         */
        toTime?: number;
        /**
         * 会话数量限制。默认 10. 举例传入 5，检索返回 5 个会话的消息
         */
        sessionLimit?: number;
        /**
         * 单个会话返回的消息数量限制。默认 5。 举例传 1，每个会话返回 1 条匹配的消息。
         */
        msgLimit?: number;
        /**
         * 查询的消息排序规则，默认 DESC 按消息时间降序。可选 ASC 升序。
         */
        order?: string;
        /**
         * 搜索条件 P2P 会话列表，会话（p2p-accid1）的 account  示例：['accid1', 'accid2', 'accid3']
         */
        p2pList?: string[];
        /**
         * 搜索条件 群列表。从这些 team（team-146694936） 里搜寻消息，示例：['146694936', '13897']
         */
        teamList?: string[];
        /**
         * 消息发送者列表，account 列表  示例：['accid1', 'accid2', 'accid3']
         */
        senderList?: string[];
        /**
         * 消息类型  示例：['text', 'image', 'audio', 'video', 'geo', 'notification', 'file', 'tip', 'custom']
         */
        msgTypeList?: string[];
        /**
         * 消息子类型，此类型开发者在发送消息时可自定义，且格式为大于0的整数。示例：[1, 2]
         */
        msgSubTypeList?: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    msgFtsInServerByTiming(_options: {
        /**
         * 检索关键词
         */
        keyword: string;
        /**
         * 检索目标的开始时间，默认 0 代表不限制
         */
        fromTime?: number;
        /**
         * 检索目标的结束时间，默认 当前时间
         */
        toTime?: number;
        /**
         * 单个会话返回的消息数量限制。默认 5。 举例传 1，每个会话返回 1 条匹配的消息。
         */
        msgLimit?: number;
        /**
         * 查询的消息排序规则，默认 DESC 按消息时间降序。可选 ASC 升序。
         */
        order?: string;
        /**
         * 搜索条件 P2P 会话列表，会话（p2p-accid1）的 account  示例：['accid1', 'accid2', 'accid3']
         */
        p2pList?: string[];
        /**
         * 搜索条件 群列表。从这些 team（team-146694936） 里搜寻消息，示例：['146694936', '13897']
         */
        teamList?: string[];
        /**
         * 消息发送者列表，account 列表  示例：['accid1', 'accid2', 'accid3']
         */
        senderList?: string[];
        /**
         * 消息类型  示例：['text', 'image', 'audio', 'video', 'geo', 'notification', 'file', 'tip', 'custom']
         */
        msgTypeList?: string[];
        /**
         * 消息子类型，此类型开发者在发送消息时可自定义，且格式为大于0的整数。示例：[1, 2]
         */
        msgSubTypeList?: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    getLocalMsgs(_options: {
        /**
         * 如果提供该参数, 那么查询该会话的消息
         */
        sessionId?: string;
        /**
         * 开始时间戳
         */
        start?: number;
        /**
         * 结束时间戳
         */
        end?: number;
        /**
         * true 表示从 end 开始查, false 表示从 begin 开始查
         */
        desc?: boolean;
        /**
         * 分页限制
         */
        limit?: number;
        /**
         * [indexedDB专用]如果提供该参数, 那么查询该类型的消息
         */
        types?: NIMMsgType[];
        /**
         * [indexedDB专用]如果提供该参数, 那么查询这几种子类型的消息
         */
        subTypes?: number[];
        /**
         * [indexedDB专用]如果提供参数, 那么查询匹配该关键词的消息
         *
         * 注：这个参数提供的查询是正向索引模式的，数据量大时查询将会相当慢。若是需要支持全文检索（倒排索引结构）的，参见 fts 相关接口
         */
        keyword?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    getLocalMsgsByIdClients(_options: {
        idClients: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    updateLocalMsg(_options: {
        idClient: string;
        /**
         * 本地自定义扩展字段。
         */
        localCustom: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    deleteLocalMsg(_options: {
        msg: NIMMessage;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    deleteLocalMsgs(_options: {
        /**
         * session.id
         */
        sessionId: string;
        /**
         * 开始时间戳
         */
        start?: number;
        /**
         * 结束时间戳
         */
        end?: number;
        /**
         * 是否同步更新会话，默认 true
         */
        updateSession?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    deleteLocalMsgsBySession(_options: {
        /**
         * 消息场景
         */
        scene: NIMMsgScene;
        /**
         * 聊天对象。若是点对点消息请传入对方的账号，若是群消息则传入群id
         */
        to: string;
        /**
         * 是否同时会删除 session.lastMsg。默认 false
         */
        delLastMsg?: boolean;
        /**
         * 是否为标记删除，默认 false
         *
         * 注：为 true 是物理删除，无法能留存为这条消息插入的 localCustom 本地自定义的扩展字段。为 false 是逻辑删除。
         */
        isTag?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 删除指定时间的数据库消息
     *
     * 注：如果运行环境不支持数据库，或者未开启数据库, 执行成功，但不会返回或者操作有效的数据。
     */
    deleteLocalMsgsByTime(_options: {
        /**
         * 开始时间戳，不填默认为 0
         */
        start?: number;
        end?: number;
        deletedone?: (data: {
            deletedMsgCount: number;
        }) => void;
        done?: (err: NIMCommonError | Error | null, data: {
            deletedMsgCount: number;
            sessionUpdateCount: number;
        } | null) => void;
    }): Promise<void>;
    deleteAllLocalMsgs(_options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    /**
     * @deprecated 已废弃，请使用{@link MessageLogInterface.msgFtsInServer}
     */
    searchHistoryMsgs(_options: NIMStrAnyObj): void;
    /**
     * @deprecated 删除某个会话的云端消息历史记录，已废弃。请使用 {@link MessageLogInterface.clearServerHistoryMsgsWithSync | clearServerHistoryMsgsWithSync}
     */
    clearServerHistoryMsgs(_options: NIMStrAnyObj): void;
    /**
     * @deprecated 已废弃，请使用{@link MessageLogInterface.getLocalMsgsByIdClients}
     */
    getLocalMsgByIdClient(_options: NIMStrAnyObj): void;
    saveMsgsToLocal(_options: {
        msgs: NIMMessage[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    sendText(_options: NIMSendTextOptions): NIMMessage;
    sendFile(_options: NIMSendFileOptions): NIMMessage;
    sendCustomMsg(_options: NIMSendCustomMsgOptions): NIMMessage;
    sendTipMsg(_options: NIMSendTipMsgOptions): NIMMessage;
    /**
     * @deprecated 此接口废弃，使用发送接口替代。<br>
     */
    resendMsg(_options: NIMResendMsgOptions): NIMMessage;
    forwardMsg(_options: {
        /**
         * 待转发的消息。
         */
        msg: NIMMessage;
        /**
         * 消息场景
         */
        scene: NIMMsgScene;
        /**
         * 新的接收方，对方账号或者群 id
         */
        to: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage) => void;
    }): NIMMessage;
    sendMsgReceipt(_options: {
        /**
         * 待发回执的消息。
         */
        msg: NIMMessage;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    sendTeamMsgReceipt(_options: {
        /**
         * 待发回执的群消息列表。
         */
        teamMsgReceipts: {
            /**
             * 群 id
             */
            teamId: string;
            /**
             * 消息的 {@link NIMMessage.idServer | idServer}
             */
            idServer: string;
            /**
             * 消息的 {@link NIMMessage.idClient | idClient}
             *
             * 注: 若开启本地数据库支持且传入该参数，则 SDK 会将查询到的结果存到本地数据库中
             */
            idClient?: string;
        }[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    getTeamMsgReads(_options: {
        /**
         * 待查询的群消息列表
         */
        teamMsgReceipts: {
            /**
             * 群 id
             */
            teamId: string;
            /**
             * 消息的 {@link NIMMessage.idServer | idServer}
             */
            idServer: string;
            /**
             * 消息的 {@link NIMMessage.idClient | idClient}
             *
             * 注: 若开启本地数据库支持且传入该参数，则 SDK 会将查询到的结果存到本地数据库中
             */
            idClient?: string;
        }[];
        /**
         * 注意这个回调的真实返回数据在第三个参数
         */
        done?: (err: NIMCommonError | null | NIMStrAnyObj, param: {
            teamMsgReceipts: {
                /**
                 * 群 id
                 */
                teamId: string;
                /**
                 * 消息的 {@link NIMMessage.idServer | idServer}
                 */
                idServer: string;
                /**
                 * 消息的 {@link NIMMessage.idClient | idClient}
                 *
                 * 注: 若开启本地数据库支持且传入该参数，则 SDK 会将查询到的结果存到本地数据库中
                 */
                idClient?: string;
            }[];
        }, data: {
            teamMsgReceipts: NIMTeamMsgReceipts[];
        }) => void;
    }): void;
    getTeamMsgReadAccounts(_options: {
        /**
         * 待查询的群消息
         */
        teamMsgReceipt: {
            /**
             * 群 id
             */
            teamId: string;
            /**
             * 消息的 {@link NIMMessage.idServer | idServer}
             */
            idServer: string;
            /**
             * 消息的 {@link NIMMessage.idClient | idClient}
             *
             * 注: 若开启本地数据库支持且传入该参数，则 SDK 会将查询到的结果存到本地数据库中
             */
            idClient?: string;
        };
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, arg: NIMGetTeamMsgReadAccountsResult) => void;
    }): void;
    /**
     * @deprecated 该方法已废弃，请使用 {@link MessageInterface.recallMsg | recallMsg}
     */
    deleteMsg(_options: {
        /**
         * 待撤回的消息
         */
        msg: NIMMessage;
        /**
         * 自定义推送文案
         */
        apnsText?: string;
        /**
         * 第三方自定义的推送属性，限制使用 JSON 格式化的字符串
         */
        pushPayload?: string;
        /**
         * 附言
         */
        ps?: string;
        /**
         * 附加信息，推荐使用 JSON 格式化字符串
         */
        attach?: string;
        /**
         * 抄送环境
         */
        env?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    recallMsg(_options: {
        /**
         * 待撤回的消息
         */
        msg: NIMMessage;
        /**
         * 自定义推送文案
         */
        apnsText?: string;
        /**
         * 第三方自定义的推送属性，限制使用 JSON 格式化的字符串
         */
        pushPayload?: string;
        /**
         * 附言
         */
        ps?: string;
        /**
         * 附加信息，推荐使用 JSON 格式化字符串
         */
        attach?: string;
        /**
         * 抄送环境
         */
        env?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    deleteMsgSelf(_options: {
        /**
         * 待删除的消息
         */
        msg: NIMMessage;
        /**
         * 扩展字段
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    deleteMsgSelfBatch(_options: {
        /**
         * 待删除的消息列表
         */
        msgs: NIMMessage[];
        /**
         * 扩展字段
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    sendGeo(_options: NIMSendGEOOptions): NIMMessage;
    /**
     * @deprecated 发送机器人消息。此接口废弃
     */
    sendRobotMsg(_options: NIMBaseSendMsgOptions): NIMMessage;
    /**
     * @deprecated 标记消息已接收。消息从离线状态变为漫游状态。此接口废弃，新增初始化参数 {@link NIMGetInstanceOptions.autoMarkRead | autoMarkRead } 自动调用此函数
     */
    markMsgRead(_options: {
        msgs: NIMMessage[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void | undefined;
    }): void;
    /**
     * @deprecated  此接口用于查询p2p消息是否已接收已读回执，目前已废弃
     *
     * <h4>查询已读回执</h4>
     * 如何判断消息是否接收已读回执？当 msg.scene === 'p2p' && msg.flow === 'out' && msg.time <= session.msgReceiptTime 时，即可认为消息已收到已读回执
     */
    isMsgRemoteRead(_options: {
        msg: NIMMessage;
    }): boolean;
    getThreadMsgs(_options: {
        /**
         * 场景
         */
        scene: NIMMsgScene;
        /**
         * thread根消息的from，即发送者账号
         */
        threadMsgFromAccount: string;
        /**
         * thread根消息的to，即接受者账号
         */
        threadMsgToAccount: string;
        /**
         * thread根消息的 idServer
         */
        threadMsgIdServer: string;
        /**
         * thread根消息的time
         */
        threadMsgTime: number;
        /**
         * 时间戳, 开始时间, 精确到 ms, 默认为0
         */
        beginTime?: number;
        /**
         * 时间戳, 结束时间, 精确到 ms, 默认为服务器的当前时间
         */
        endTime?: number;
        /**
         * 上次查询的最后一条消息的 idServer, 第一次不填
         */
        lastMsgId?: string;
        /**
         * 本次查询的消息数量限制, 最多100条, 默认100条
         */
        limit?: number;
        /**
         * 默认false表示从 endTime 开始往前查找历史消息，true 表示从 beginTime 开始往后查找历史消息
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 相关的消息列表
             */
            msgs: NIMMessage[];
            /**
             * thread 根消息
             */
            threadMsg: NIMMessage;
            /**
             * 获取的时间戳
             */
            timetag: string;
            /**
             * 消息总数
             */
            total: string;
        }) => void;
    }): void;
    getMsgsByIdServer(_options: {
        /**
         * 查询参数，摘取 NIMMessage 结构里的几个字段，且 idServer 在这里必填。
         */
        reqMsgs: {
            /**
             * 消息场景：
             *
             * <ul><li>p2p：单聊场景</li><li>team：群聊场景</li><li>superteam：超大群场景</li></ul>
             */
            scene: NIMMsgScene;
            /**
             * 消息发送方, 帐号
             */
            from: string;
            /**
             * 消息接收方, 帐号或群id
             */
            to: string;
            /**
             * 时间戳
             */
            time: number;
            /**
             * 服务器用于区分消息用的ID, 用于获取历史消息和获取包含关键词的历史消息。
             *
             * 注：此字段可能没有, 比如说消息被反垃圾过滤了。
             */
            idServer: string;
        }[];
    }): void;
    addQuickComment(_options: {
        /**
         * 被回复的消息
         */
        msg: NIMMessage;
        /**
         * 评论的内容。
         *
         * 注：输入整数，开发者需要自定义映射规则。如 1 为点赞的表情、2 对应鼓掌的表情等
         */
        body: number;
        /**
         * 扩展内容
         */
        custom?: string;
        /**
         * 是否需要推送，默认 false。
         */
        needPush?: boolean;
        /**
         * 是否需要消息计数（APP 的角标计数），默认 false
         */
        needBadge?: boolean;
        /**
         * 推送的标题
         */
        pushTitle?: string;
        /**
         * 自定义推送文案
         */
        apnsText?: string;
        /**
         * 第三方自定义的推送属性，限制 json
         */
        pushPayload?: NIMStrAnyObj;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 评论内容
             */
            comment: {
                /**
                 * 快捷评论内容
                 */
                body: number;
                /**
                 * 扩展内容
                 */
                custom?: string;
                /**
                 * 该评论的发送方的 account ID
                 */
                from: string;
                /**
                 * 评论的发送时间。
                 */
                time: number;
            };
            /**
             * 消息, 摘取 NIMMessage 结构里的几个字段，且 idServer 在这里必须存在。
             */
            msg: {
                /**
                 * 消息场景：
                 *
                 * <ul><li>p2p：单聊场景</li><li>team：群聊场景</li><li>superteam：超大群场景</li></ul>
                 */
                scene: NIMMsgScene;
                /**
                 * 消息发送方, 帐号
                 */
                from: string;
                /**
                 * 消息接收方, 帐号或群id
                 */
                to: string;
                /**
                 * 时间戳
                 */
                time: number;
                /**
                 * 服务器用于区分消息用的ID, 用于获取历史消息和获取包含关键词的历史消息。
                 *
                 * 注：此字段可能没有, 比如说消息被反垃圾过滤了。
                 */
                idServer: string;
            };
        }) => void;
    }): void;
    deleteQuickComment(_options: {
        /**
         * 被回复的消息
         */
        msg: NIMMessage;
        /**
         * 评论的内容。
         *
         * 注：输入整数，开发者需要自定义映射规则。如 1 为点赞的表情、2 对应鼓掌的表情等
         */
        body: number;
        /**
         * 扩展内容
         */
        custom?: string;
        /**
         * 是否需要推送，默认 false。
         */
        needPush?: boolean;
        /**
         * 是否需要消息计数（APP 的角标计数），默认 false
         */
        needBadge?: boolean;
        /**
         * 推送的标题
         */
        pushTitle?: string;
        /**
         * 自定义推送文案
         */
        apnsText?: string;
        /**
         * 第三方自定义的推送属性，限制 json
         */
        pushPayload?: NIMStrAnyObj;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 评论内容
             */
            comment: {
                /**
                 * 快捷评论内容
                 */
                body: number;
                /**
                 * 扩展内容
                 */
                custom?: string;
                /**
                 * 该评论的发送方的 account ID
                 */
                from: string;
                /**
                 * 评论的发送时间。
                 */
                time: number;
            };
            /**
             * 消息, 摘取 NIMMessage 结构里的几个字段，且 idServer 在这里必须存在。
             */
            msg: {
                /**
                 * 消息场景：
                 *
                 * <ul><li>p2p：单聊场景</li><li>team：群聊场景</li><li>superteam：超大群场景</li></ul>
                 */
                scene: NIMMsgScene;
                /**
                 * 消息发送方, 帐号
                 */
                from: string;
                /**
                 * 消息接收方, 帐号或群id
                 */
                to: string;
                /**
                 * 时间戳
                 */
                time: number;
                /**
                 * 服务器用于区分消息用的ID, 用于获取历史消息和获取包含关键词的历史消息。
                 *
                 * 注：此字段可能没有, 比如说消息被反垃圾过滤了。
                 */
                idServer: string;
            };
        }) => void;
    }): void;
    getQuickComments(_options: {
        /**
         * 被回复的消息
         */
        msgs: NIMMessage[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 快捷评论的最近更新时间
             */
            commentTimetag: number;
            /**
             * 评论内容
             * <ul>
             *  <li>body: 快捷评论内容</li>
             *  <li>custom: 扩展内容</li>
             *  <li>from: 该评论的发送方的 account ID</li>
             *  <li>time: 评论的发送时间</li>
             * </ul>
             */
            comments: {
                /**
                 * 快捷评论内容
                 */
                body: number;
                /**
                 * 扩展内容
                 */
                custom?: string;
                /**
                 * 该评论的发送方的 account ID
                 */
                from: string;
                /**
                 * 评论的发送时间。
                 */
                time: number;
            }[];
            /**
             * 被评论的消息的 idServer
             */
            idServer: string;
            /**
             * 被评论的消息的 idClient
             */
            idClient: string;
        }) => void;
    }): void;
    addCollect(_options: {
        /**
         * 类型，开发者可自定义映射关系，只能是整数
         */
        type: number;
        /**
         * 收藏的具体数据内容, 最大 20480 字符数
         */
        data: string;
        /**
         * 收藏的扩展字段, 最大 1024 字符数
         */
        custom?: string;
        /**
         * 去重唯一 ID。
         *
         * 注：当传入 uniqueId 时，会校验此 uniqueId 之前是否存在对应的收藏记录，若不存在则会新增收藏，已存在则会更新这个收藏。
         */
        uniqueId?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 收藏内容
             */
            collect: NIMCollect;
        }) => void;
    }): void;
    deleteCollects(_options: {
        /**
         * 要删除的收藏列表, 最大长度限制 100
         */
        collectList: NIMCollect[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 入参里传的要删除的收藏列表
             */
            collectList: NIMCollect[];
            /**
             * 成功删除的个数
             */
            deleteNum: number;
        }) => void;
    }): void;
    updateCollect(_options: {
        /**
         * 收藏对象. 只能更新 custom 字段, 开发者把新的 custom 字段写入这个对象中传入。
         *
         * 注: 如果要删除 custom 字段，那么传入的对象中不存在 custom 字段即可
         */
        collect: NIMCollect;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMCollect) => void;
    }): void;
    getCollects(_options: {
        /**
         * 类型，开发者可自定义映射关系，只能是整数. 缺省表示查询所有的类型
         */
        type?: number;
        /**
         * 开始时间的时间戳, 精确到ms, 默认为0
         */
        beginTime?: number;
        /**
         * 结束时间的时间戳, 精确到ms, 默认为服务器最新时间
         */
        endTime?: number;
        /**
         * 上次查询的最后一条收藏的`id`
         *
         * 注：从第二页开始建议填写，便于服务器区分相同时间戳的两条记录。
         */
        lastId?: string;
        /**
         * 本次查询的消息数量限制, 默认100条
         */
        limit?: number;
        /**
         * 排列顺序。默认为 false
         *
         * 为 true 则代表按时间戳升序查询，从 beginTime 开始查询到 endTime 之间的 limit 条记录
         *
         * 为 false 则代表按时间戳降序查询，从 endTime 开始查询到 beginTime 之间的 limit 条记录
         */
        reverse?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 收藏列表
             */
            collectList: NIMCollect[];
            /**
             * 收藏总数
             */
            total: number;
        }) => void;
    }): void;
    addMsgPin(_options: {
        /**
         * 被 pin 标记的消息的基础结构
         */
        msg: NIMMsgPinInfo;
        /**
         * pin 标记的扩展字段
         */
        pinCustom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMsgPin) => void;
    }): void;
    updateMsgPin(_options: {
        /**
         * 被 pin 标记的消息的基础结构
         */
        msg: NIMMsgPinInfo;
        /**
         * pin 标记的扩展字段
         */
        pinCustom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMsgPin) => void;
    }): void;
    deleteMsgPin(_options: {
        /**
         * 被 pin 标记的消息的基础结构
         */
        msg: NIMMsgPinInfo;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMsgPin) => void;
    }): void;
    getMsgPins(_options: {
        /**
         * session id
         */
        id: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * session id
             */
            id: string;
            pins: (NIMMsgPinInfo & {
                pinCustom: string;
                pinFrom: string;
            })[];
        }) => void;
    }): void;
    getFriends(_options: {
        /**
         * 时间戳，默认 0。获取更新时间大于此时间戳的升序 3000 条好友。
         */
        updateTime?: number;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMFriendProfile[]) => void;
    }): void;
    addFriend(_options: {
        /**
         * 要直接加为好友的账号
         */
        account: string;
        /**
         * 附言, 推荐开发者传入 JSON 格式化字符串。
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    applyFriend(_options: {
        account: string;
        /**
         * 附言, 推荐开发者传入 JSON 格式化字符串。
         */
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    passFriendApply(_options: {
        idServer: string;
        account: string;
        ps?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    rejectFriendApply(_options: {
        idServer: string;
        account: string;
        ps: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    deleteFriend(_options: {
        account: string;
        /**
         * 是否要删除好友的备注
         */
        delAlias?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    updateFriend(_options: {
        account: string;
        /**
         * 备注
         */
        alias?: string;
        /**
         * 扩展字段
         */
        custom?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    isMyFriend(_options: {
        account: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: boolean) => void | undefined;
    }): void;
    publishEvent(_options: {
        /**
         * 事件类型, 目前只有 1。
         */
        type: number;
        /**
         * 事件状态/事件内容，由开发者做自定义映射
         *
         * 注：value 须为 10000 以上 (1-9999为云信预定义值，开发者不可使用，1代表上线，2代表下线，3代表断开连接)
         */
        value: number;
        /**
         * 用户自定义事件扩展属性
         */
        custom?: string;
        /**
         * 发布事件的有效时间 单位秒 60s~7天(604800s)，默认 7 天
         */
        validTime?: number;
        /**
         * 广播类型
         *
         * 1: 仅在线
         * 2:在线和离线
         */
        broadcastType?: number;
        /**
         * 是否同步给自己
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMPublishEventResult) => void;
    }): void;
    subscribeEvent(_options: {
        /**
         * 事件类型，目前只有 1
         */
        type: number;
        /**
         * 订阅账户列表
         */
        accounts: string[];
        /**
         * 订阅关系有效期，以秒为单位
         */
        subscribeTime?: number;
        /**
         * 订阅后是否立即同步最新事件
         */
        sync?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSubscribeEventResult) => void;
    }): void;
    unSubscribeEventsByAccounts(_options: {
        /**
         * 事件类型，目前只有 1
         */
        type: number;
        accounts?: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUnSubscribeEventsByAccountsResult) => void;
    }): void;
    unSubscribeEventsByType(_options: {
        /**
         * 事件类型，目前只有 1
         */
        type: number;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    querySubscribeEventsByAccounts(_options: {
        /**
         * 事件类型，目前只有 1
         */
        type: number;
        accounts: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSubscribeEventInfo[]) => void;
    }): void;
    querySubscribeEventsByType(_options: {
        /**
         * 事件类型，目前只有 1
         */
        type: number;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSubscribeEventInfo[]) => void;
    }): void;
    previewFile(_options: NIMPreviewFileOptions): void;
    getNosOriginUrl(_options: {
        safeShortUrl: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    audioToText(_options: {
        url: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    stripImageMeta(_options: {
        url: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): string;
    qualityImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 图片质量, 必须为整数, 取值范围为 0-100
         */
        quality: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    interlaceImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    rotateImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 旋转角度
         */
        angle: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    blurImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 高斯模糊半径
         */
        radius: number;
        /**
         * 高斯模糊标准差，不能小于 0
         */
        sigma: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    cropImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * x 坐标, 必须需为整数
         */
        x: number;
        /**
         * y 坐标, 必须需为整数
         */
        y: number;
        /**
         * 宽度
         */
        width: number;
        /**
         * 高度
         */
        height: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    thumbnailImage(_options: {
        /**
         * NOS 图片源链接
         */
        url: string;
        /**
         * 剪裁坐标
         */
        axis: {
            /**
             * x 坐标, 必须需为整数
             */
            x: number;
            /**
             * y 坐标, 必须需为整数
             */
            y: number;
        };
        /**
         * 缩略图的宽度
         */
        width?: number;
        /**
         * 缩略图的高度
         */
        height?: number;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    processImage(_options: {
        url: string;
        /**
         * 操作序列. 按操作顺序依次处理图片, 具体格式参照前面几个和 image 相关的处理接口
         *
         * 类似这样的效果
         *
         * [
         *   {
         *     type: 'crop',
         *     x: 100,
         *     y: 0,
         *     width: 250,
         *     height: 250,
         *   },
         *   {
         *      type: 'thumbnail',
         *      mode: 'cover',
         *      width: 80,
         *      height: 80
         *   }
         * ]
         */
        ops: NIMStrAnyObj;
        /**
         * 返回图片 url
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: string) => void;
    }): void;
    /**
     * @deprecated 获取文件的短链接的鉴权 token。v8.10.0 后废弃，请使用 {@link CloudStorageInterface.getFileAuthToken}
     */
    getNosAccessToken(_options: {
        /**
         * 文件 url
         */
        url: string;
        userAgent?: string;
        ext?: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            token: string;
            /**
             * 完整可访问的链接
             */
            resUrl: string;
        }) => void;
    }): void;
    /**
     * @deprecated 获取短链接的鉴权 token。v8.10.0 后废弃，使用新接口 getFileAuthToken 后不需要主动删除 token
     */
    deleteNosAccessToken(_options: {
        /**
         * 文件 url
         */
        token: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            token: string;
            /**
             * 完整可访问的链接
             */
            resUrl: string;
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃。修改图片下载的名字
     *
     * <br />
     *
     * 如果文件存储使用的是网易云信的 NOS ，请参照存储对象文档 https://sf.163.com/help/documents/114085619316215808
     */
    packFileDownloadName(_options: {
        url: string;
        name: string;
    }): string;
    /**
     * @deprecated 已废弃。音视频转 MP3
     *
     * <br />
     *
     * 如果文件存储使用的是网易云信的 NOS ，请参照存储对象文档 https://sf.163.com/help/documents/114085619316215808
     */
    audioToMp3(_options: {
        url: string;
    }): string;
    /**
     * @deprecated 预览去除图片元信息。已废弃，请使用 {@link CloudStorageInterface.stripImageMeta}
     */
    viewImageStripMeta(_options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览图片质量。已废弃，请使用 {@link CloudStorageInterface.qualityImage}
     */
    viewImageQuality(_options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览 interlace 图片。已废弃，请使用 {@link CloudStorageInterface.interlaceImage}
     */
    viewImageInterlace(_options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览旋转图片。已废弃，请使用 {@link CloudStorageInterface.rotateImage}
     */
    viewImageRotate(_options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览模糊图片。已废弃，请使用 {@link CloudStorageInterface.blurImage}
     */
    viewImageBlur(_options: NIMStrAnyObj): string;
    /**
     * @deprecated 预览图片质量。已废弃，请使用 {@link CloudStorageInterface.cropImage}
     */
    viewImageCrop(_options: NIMStrAnyObj): string;
    /**
     * @deprecated 生成预览缩略图。已废弃，请使用 {@link CloudStorageInterface.thumbnailImage}
     */
    viewImageThumbnail(_options: NIMStrAnyObj): string;
    getServerSessions(_options: {
        /**
         * 最小的时间戳。与 maxTimestamp 组成一个时间段作为查询条件。
         *
         * 默认 0 表示不限制。
         */
        minTimestamp?: number;
        /**
         * 最大的时间戳。与 minTimestamp 组成一个时间段作为查询条件。
         *
         * 默认当前时间戳
         */
        maxTimestamp?: number;
        /**
         * 分页大小，默认 100
         */
        limit?: number;
        /**
         * 是否需要返回 last msg。默认 true
         */
        needLastMsg?: boolean;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            /**
             * 会话列表
             */
            sessionList: NIMCloudSession[];
            /**
             * 是否下一页还有数据
             */
            hasMore: boolean;
        }) => void;
    }): void;
    getServerSession(_options: {
        /**
         * 消息的场景
         */
        scene: NIMMsgScene;
        /**
         * 消息接收者
         */
        to: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMCloudSession) => void;
    }): void;
    updateServerSession(_options: {
        /**
         * 消息的场景
         */
        scene: NIMMsgScene;
        /**
         * 消息接收者
         */
        to: string;
        /**
         * 扩展字段，仅自己可见
         */
        extra: string;
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    deleteServerSessions(_options: {
        /**
         * 要删除的会话 ID 的列表
         */
        sessions: {
            /**
             * 消息的场景
             */
            scene: NIMMsgScene;
            /**
             * 消息接收者
             */
            to: string;
        }[];
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMCloudSession) => void;
    }): void;
    mergeLoginPorts(_arr1: NIMStrAnyObj[], _arr2: NIMStrAnyObj | NIMStrAnyObj[]): NIMStrAnyObj[];
    cutLoginPorts(_arr1: NIMStrAnyObj[], _arr2: NIMStrAnyObj | NIMStrAnyObj[]): NIMStrAnyObj[];
    mergeRelations(_arr1: NIMStrAnyObj[], _arr2: NIMStrAnyObj | NIMStrAnyObj[]): NIMStrAnyObj[];
    cutRelations(_arr1: NIMStrAnyObj[], _arr2: NIMStrAnyObj | NIMStrAnyObj[]): NIMStrAnyObj[];
    findRelation(_arr1: NIMStrAnyObj[], _account: string): NIMStrAnyObj | null;
    mergeFriends(_arr1: NIMFriendProfile[], _arr2: NIMFriendProfile | NIMFriendProfile[]): NIMFriendProfile[];
    cutFriends(_arr1: NIMFriendProfile[], _arr2: NIMFriendProfile | NIMFriendProfile[]): NIMFriendProfile[];
    cutFriendsByAccounts(_arr1: NIMFriendProfile[], _arr2: string | string[]): NIMFriendProfile[];
    findFriend(_arr1: NIMFriendProfile[], _account: string): NIMFriendProfile | null;
    mergeUsers(_arr1: NIMUserNameCard[], _arr2: NIMUserNameCard | NIMUserNameCard[]): NIMUserNameCard[];
    findUser(_arr1: NIMUserNameCard[], _account: string): NIMUserNameCard | null;
    mergeTeams(_arr1: NIMTeam[], _arr2: NIMTeam | NIMTeam[]): NIMTeam[];
    mergeTeams(_arr1: NIMTeamMember[], _arr2: NIMTeamMember | NIMTeamMember[]): NIMTeamMember[];
    cutTeams(_arr1: NIMTeam[], _arr2: NIMTeam | NIMTeam[]): NIMTeam[];
    cutTeams(_arr1: NIMTeamMember[], _arr2: NIMTeamMember | NIMTeamMember[]): NIMTeamMember[];
    findTeam(_arr1: NIMTeam[], _teamId: string): NIMTeam | null;
    cutTeamMembersByAccounts(_arr1: NIMTeamMember[], _arr2: string | string[]): NIMTeamMember[];
    findTeamMember(_arr1: NIMTeamMember[], _id: string): NIMTeamMember | null;
    mergeSessions(_arr1: NIMSession[], _arr2: NIMSession | NIMSession[]): NIMSession[];
    cutSessions(_arr1: NIMSession[], _arr2: NIMSession | NIMSession[]): NIMSession[];
    findSession(_arr1: NIMSession[], _teamId: string): NIMSession | null;
    mergeMsgs(_arr1: NIMMessage[], _arr2: NIMMessage | NIMMessage[]): NIMMessage[];
    cutMsgs(_arr1: NIMMessage[], _arr2: NIMMessage | NIMMessage[]): NIMMessage[];
    findMsg(_arr1: NIMMessage[], _idClient: string): NIMMessage | null;
    mergeSysMsgs(_arr1: NIMSystemMessage[], _arr2: NIMSystemMessage | NIMSystemMessage[]): NIMSystemMessage[];
    cutSysMsgs(_arr1: NIMSystemMessage[], _arr2: NIMSystemMessage | NIMSystemMessage[]): NIMSystemMessage[];
    findSysMsg(_arr1: NIMSystemMessage[], _idServer: string): NIMSystemMessage | null;
    searchLocal(_options: {
        /**
         * 搜索关键词
         */
        keyword: string;
        /**
         * 搜索路径。若不填写则搜索下面所有的字段
         */
        keyPath?: 'session' | 'session.lastMsg.type' | 'session.id' | 'session.scene' | 'session.lastMsg.type' | 'session.lastMsg.text' | 'session.localCustom' | 'session.target.account' | 'session.target.nick' | 'session.target.alias' | 'session.target.name' | 'user' | 'user.account' | 'user.nick' | 'user.alias';
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMSearchLocalResult) => void;
    }): void;
    getServerTime(_options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: number) => void;
    }): void;
    getClientAntispamLexicon(_options: {
        done: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            clientAntispam: {
                /**
                 * 词库文件的md5
                 */
                md5: string;
                /**
                 * 词库文件的下载地址
                 */
                nosurl: string;
                /**
                 * 词库内容, 可以被解析为 JSON 对象
                 */
                thesaurus: string;
                /**
                 * 词库版本
                 */
                version: string;
            };
        }) => void;
    }): void;
    filterClientAntispam(_options: {
        /**
         * 待检查文本.
         */
        content: string;
    }): {
        /**
         * 请求的处理状态
         */
        code: number;
        /**
         * 待检查文本.
         */
        content: string;
        /**
         * 建议处理提示
         */
        errmsg: string;
        /**
         * 建议放行的文本
         */
        result: string;
        /**
         * 建议处理类型
         *
         * 0 放行.
         * 1 对特殊字符过了过滤后放行
         * 2 建议拒绝发送
         * 3 命中客户端反垃圾，交给服务器处理，在发送消息时带上 clientAntiSpam 字段来表示命中.
         */
        type: number;
    };
}
export { NIM };
