import { NIMMessage, NIMMsgScene, NIMMsgType } from './MessageInterface';
import { NIMCommonError, NIMStrAnyObj } from '../types';
/**
 * 消息记录相关的接口定义
 */
export interface MessageLogInterface {
    /**
     *
     * 获取存储在云信服务端的历史消息。由参数beginTime和endTime来控制时间范围。
     *
     * - 当reverse为false时, 后续查询的endTime对应上次查询的最后一条消息的time字段
     * - 当reverse为true时, 后续查询的beginTime对应上次查询的最后一条消息的time字段
     * - 如果要搜索历史消息, 请参考获取 {@link MessageLogInterface.msgFtsInServer}
     *
     * <h4>使用场景</h4>
     *
     * 用户进入会话首次渲染消息列表或者用户“下拉查看更多消息”时，需要调用该 API。
     *
     * <h4>注意</h4>
     *
     *
     * <ul><li>该 API 获取云端的历史，但不会往本地数据库中插入。</li>
     *
     * <li>该 API 通过 options.done 回调返回查询到的历史消息列表。</li>
     * <li>初始化阶段，若在同步完成之前调用此函数，可能会话的已读状态会不准确</li>
     * </ul>
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/message/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%BB%B4%E6%8A%A4.js" target="_blank">会话中消息队列维护</a></li>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E6%9F%A5%E8%AF%A2%E5%8E%86%E5%8F%B2%E6%B6%88%E6%81%AF.js" target="_blank">查询历史消息</a></li>
     * </ul>
     *
     */
    getHistoryMsgs(options: {
        /**
         * 消息场景
         */
        scene: NIMMsgScene;
        /**
         * 聊天对象。若是点对点消息请传入对方的账号，若是群消息则传入群id
         */
        to: string;
        /**
         * 开始时间的时间戳. 精确到 ms, 默认为 0
         */
        beginTime?: number;
        /**
         * 结束时间的时间戳. 精确到 ms, 默认为 0
         */
        endTime?: number;
        /**
         * 上次查询的最后一条消息的 idServer, 第一次不填
         */
        lastMsgId?: string;
        /**
         * 分页查询数量限制，默认 100 条记录
         */
        limit?: number;
        /**
         * 查询顺序。默认 false 代表降序
         *
         * false 从 endTime 开始往前查找 limit 条历史消息
         *
         * true 从 beginTime 开始往后查找 limit 条历史消息
         */
        reverse?: boolean;
        /**
         * 排序顺序。默认 false
         *
         * false 表示返回的消息按时间降序排序;
         *
         * true 表示按时间升序排序
         */
        asc?: boolean;
        /**
         * 指定消息类型。默认不填写就是查找全部消息类型
         */
        msgTypes?: NIMMsgType[];
        /**
         * done 回调，需开发者自定义。
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: {
            msgs: NIMMessage[];
        }) => void;
    }): void;
    /**
     * @deprecated 已废弃，请使用{@link MessageLogInterface.msgFtsInServer}
     */
    searchHistoryMsgs(options: NIMStrAnyObj): void;
    /**
     * @deprecated 删除某个会话的云端消息历史记录，已废弃。请使用 {@link MessageLogInterface.clearServerHistoryMsgsWithSync | clearServerHistoryMsgsWithSync}
     */
    clearServerHistoryMsgs(options: NIMStrAnyObj): void;
    /**
     * 删除某个会话的云端消息历史记录与漫游记录, 本地数据库中该会话的消息也会被删除，但是数据库中会话会保留。数据库中会话需要调用 {@link NIMGetInstanceOptions.deleteLocalSession} 删除
     *
     * 若 isSyncSelf 为 true，则多端登录账户会触发 {@link NIMGetInstanceOptions.onClearServerHistoryMsgs | onClearServerHistoryMsgs}
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link SessionInterface.deleteLocalSession} 删除本地会话(可选删除服务器漫游消息，不删除历史消息)</li>
     * <li>{@link NIMGetInstanceOptions.onClearServerHistoryMsgs} 多端登录回调</li>
     * <li>{@link NIMGetInstanceOptions.onupdatesessions} </li>
     * </ul>
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/session/%E5%88%A0%E9%99%A4%E4%BC%9A%E8%AF%9D.js" target="_blank">删除会话</a></li>
     * </ul>
     */
    clearServerHistoryMsgsWithSync(options: {
        /**
         * 消息场景
         */
        scene: NIMMsgScene;
        /**
         * 聊天对象。如果当前会话是单聊会话，则传入聊天对象的 IM 账号（accid）；如果当前会话是群聊会话，则传入群 ID。
         */
        to: string;
        /**
         * 是否删除漫游数据。默认 true
         */
        isDeleteRoam?: boolean;
        /**
         * 是否多端同步。默认 false
         */
        isSyncSelf?: boolean;
        /**
         * 扩展字段
         */
        ext?: string;
        /**
         * done 回调，需开发者自定义。
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * <h4>描述</h4>
     *
     * 云端全文检索消息（full-text search）。返回的消息会按会话（session）分类返回，不按时间分页。
     *
     * <h4>使用场景</h4>
     *
     * 用户登录后针对所有会话按照关键字等筛选条件，搜索某段时间内的存储在云信服务端的历史消息。
     *
     * <h4>前提条件</h4>
     *
     * 已在云信控制台开通“全文云端检索消息”功能。
     *
     * 配置路径：选择应用进入应用详情界面，并选择<strong> IM 免费版/专业版 > 功能权限开通 > 拓展配置 > 全局 > 全文云端消息检索</strong>。
     *
     * <img style="max-width:100%;" src="https://yx-web-nosdn.netease.im/common/357896a22dbe4e80b09fc816f05e9ced/EnableFullTextSearch.png" />
     */
    msgFtsInServer(options: {
        /**
         * 检索关键词
         */
        keyword: string;
        /**
         * 检索目标的开始时间，默认 0 代表不限制
         */
        fromTime?: number;
        /**
         * 检索目标的结束时间，默认 当前时间
         */
        toTime?: number;
        /**
         * 会话数量限制。默认 10. 例子：如果传入 5，检索返回 5 个会话的消息
         */
        sessionLimit?: number;
        /**
         * 单个会话返回的消息数量限制。默认 5。 举例传 1，每个会话返回 1 条匹配的消息。
         */
        msgLimit?: number;
        /**
         * 查询的消息排序规则，默认 DESC 按消息时间降序。可选 ASC 升序。
         */
        order?: string;
        /**
         * 搜索条件 P2P 会话列表，会话（p2p-accid1）的 account  示例：['accid1', 'accid2', 'accid3']
         */
        p2pList?: string[];
        /**
         * 搜索条件 群列表。从这些 team（team-146694936） 里搜寻消息，示例：['146694936', '13897']
         */
        teamList?: string[];
        /**
         * 消息发送者列表，account 列表  示例：['accid1', 'accid2', 'accid3']
         */
        senderList?: string[];
        /**
         * 消息类型  示例：['text', 'image', 'audio', 'video', 'geo', 'notification', 'file', 'tip', 'custom']
         */
        msgTypeList?: string[];
        /**
         * 消息子类型，此类型开发者在发送消息时可自定义，且格式为大于0的整数。示例：[1, 2]
         */
        msgSubTypeList?: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    /**
     *
     * <h4>描述</h4>
     *
     * 云端全文检索消息（按时间分页搜索）。返回的消息结果按时间排序。
     *
     * <h4>使用场景</h4>
     *
     * 用户登录后针对所有会话按照关键字等筛选条件，搜索某段时间内的存储在云信服务端的历史消息。
     *
     * <h4>前提条件</h4>
     *
     * 已在云信控制台开通“全文云端检索消息”功能。
     *
     * 配置路径：选择应用进入应用详情界面，并选择<strong> IM 免费版/专业版 > 功能权限开通 > 拓展配置 > 全局 > 全文云端消息检索</strong>。
     *
     * <img style="max-width:100%;" src="https://yx-web-nosdn.netease.im/common/357896a22dbe4e80b09fc816f05e9ced/EnableFullTextSearch.png" />
     */
    msgFtsInServerByTiming(options: {
        /**
         * 检索关键词
         */
        keyword: string;
        /**
         * 检索目标的开始时间，默认 0 代表不限制
         */
        fromTime?: number;
        /**
         * 检索目标的结束时间，默认 当前时间
         */
        toTime?: number;
        /**
         * 单个会话返回的消息数量限制。默认 5。 举例传 1，每个会话返回 1 条匹配的消息。
         */
        msgLimit?: number;
        /**
         * 查询的消息排序规则，默认 DESC 按消息时间降序。可选 ASC 升序。
         */
        order?: string;
        /**
         * 搜索条件 P2P 会话列表，会话（p2p-accid1）的 account  示例：['accid1', 'accid2', 'accid3']
         */
        p2pList?: string[];
        /**
         * 搜索条件 群列表。从这些 team（team-146694936） 里搜寻消息，示例：['146694936', '13897']
         */
        teamList?: string[];
        /**
         * 消息发送者列表，account 列表  示例：['accid1', 'accid2', 'accid3']
         */
        senderList?: string[];
        /**
         * 消息类型  示例：['text', 'image', 'audio', 'video', 'geo', 'notification', 'file', 'tip', 'custom']
         */
        msgTypeList?: string[];
        /**
         * 消息子类型，此类型开发者在发送消息时可自定义，且格式为大于0的整数。示例：[1, 2]
         */
        msgSubTypeList?: string[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    /**
     * <h4>描述</h4>
     *
     * 从本地数据库拉取历史消息。
     *
     * <h4>使用场景</h4>
     *
     * 用户进入会话首次渲染消息列表或者用户“下拉查看更多消息”时，需要调用该 API。
     *
     * <h4>注意</h4>
     *
     * 如果运行环境不支持数据库，或者未开启数据库, 调用能够执行成功，但不会返回或者操作有效的数据。
     *
     *
     */
    getLocalMsgs(options: {
        /**
         * 如果提供该参数, 那么查询该会话的消息
         */
        sessionId?: string;
        /**
         * 开始时间戳
         */
        start?: number;
        /**
         * 结束时间戳
         */
        end?: number;
        /**
         * true 表示从 end 开始查, false 表示从 begin 开始查
         */
        desc?: boolean;
        /**
         * 分页限制
         */
        limit?: number;
        /**
         * [indexedDB专用]如果提供该参数, 那么查询该类型的消息
         */
        types?: NIMMsgType[];
        /**
         * [indexedDB专用]如果提供该参数, 那么查询这几种子类型的消息
         */
        subTypes?: number[];
        /**
         * [indexedDB专用]如果提供参数, 那么查询匹配该关键词的消息
         *
         * 注：这个参数提供的查询是正向索引模式的，数据量大时查询将会相当慢。若是需要支持全文检索（倒排索引结构）的，参见 fts 相关接口
         */
        keyword?: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    /**
     * @deprecated 已废弃，请使用{@link MessageLogInterface.getLocalMsgsByIdClients}
     */
    getLocalMsgByIdClient(options: NIMStrAnyObj): void;
    /**
     *
     * <h4>描述</h4>
     *
     * 根据客户端为消息生成的 ID 的列表（idClients）获取本地的历史消息列表。
     *
     * <h4>注意</h4>
     *
     * 如果运行环境不支持数据库，或者未开启数据库, 调用能执行成功，但不会返回或者操作有效的数据。
     */
    getLocalMsgsByIdClients(options: {
        /**
         * 客户端为消息生成的 ID 的列表
         */
        idClients: string[];
        /**
         * done 回调，需开发者自定义
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    /**
     *
     * <h4>描述</h4>
     *
     * 更新本地消息。仅允许更新 localCustom 本地自定义扩展字段。
     *
     * <h4>注意</h4>
     *
     * 如果运行环境不支持数据库，或者未开启数据库, 调用会执行成功，但不会返回或者操作有效的数据。
     */
    updateLocalMsg(options: {
        /**
         * 客户端为消息生成的 ID
         */
        idClient: string;
        /**
         * 本地自定义扩展字段
         */
        localCustom: string;
        /**
         * done 回调，需开发者自定义
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMMessage[]) => void;
    }): void;
    /**
     *
     * <h4>描述</h4>
     *
     * 删除某一条本地消息。
     *
     * - 如果运行环境不支持数据库，或者未开启数据库, 执行成功，但不会返回或者操作有效的数据。
     * - 如果删除的是对应会话的最后一条消息, 那么对应会话的 `lastMsg` 属性会自动变为变为上一条消息, 同时触发 {@link NIMGetInstanceOptions.onupdatesessions | onupdatesessions} 回调。
     * - 如果消息不存在，会判定为执行成功
     */
    deleteLocalMsg(options: {
        msg: NIMMessage;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 根据会话ID、起始时间等条件删除本地消息
     *
     * - 如果运行环境不支持数据库，或者未开启数据库, 执行成功，但不会返回或者操作有效的数据。
     * - 结束时间应该大于开始时间
     * - 如不传开始时间和结束时间，则删除某个会话的所有本地消息 相当于调用 {@link MessageLogInterface.deleteLocalMsgsBySession | deleteLocalMsgsBySession}
     *
     *
     * <h4>示例场景</h4>
     * <ul>
     * <li><a href="https://github.com/netease-im/im-code-example-web/blob/master/im1/message/%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%B4%E6%8A%A4.js" target="_blank">消息数据库维护</a></li>
     * </ul>
     */
    deleteLocalMsgs(options: {
        /**
         * session.id
         */
        sessionId: string;
        /**
         * 开始时间戳
         */
        start?: number;
        /**
         * 结束时间戳
         */
        end?: number;
        /**
         * 是否同步更新会话，默认 true
         */
        updateSession?: boolean;
        /**
         * done 回调。该回调需开发者自定义。
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 删除某个会话下所有的本地消息
     *
     * 注：如果运行环境不支持数据库，或者未开启数据库, 执行成功，但不会返回或者操作有效的数据。
     */
    deleteLocalMsgsBySession(options: {
        /**
         * 消息场景
         */
        scene: NIMMsgScene;
        /**
         * 聊天对象。若是点对点消息请传入对方的账号，若是群消息则传入群id
         */
        to: string;
        /**
         * 是否同时会删除 session.lastMsg。默认 false
         */
        delLastMsg?: boolean;
        /**
         * 是否为标记删除，默认 false
         *
         * 注：为 true 是物理删除，无法能留存为这条消息插入的 localCustom 本地自定义的扩展字段。为 false 是逻辑删除。
         */
        isTag?: boolean;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 删除指定时间的数据库消息
     *
     * 注：如果运行环境不支持数据库，或者未开启数据库, 执行成功，但不会返回或者操作有效的数据。
     */
    deleteLocalMsgsByTime(options: {
        /**
         * 开始时间戳，不填默认为 0
         */
        start?: number;
        end?: number;
        deletedone?: (data: {
            deletedMsgCount: number;
        }) => void;
        done?: (err: NIMCommonError | Error | null, data: {
            deletedMsgCount: number;
            sessionUpdateCount: number;
        } | null) => void;
    }): Promise<void>;
    /**
     * 删除所有的本地消息，此方法会同时清空数据库中所有会话记录。
     *
     * 注：如果运行环境不支持数据库，或者未开启数据库, 执行成功，但不会返回或者操作有效的数据。
     */
    deleteAllLocalMsgs(options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 将消息存储至本地数据库
     *
     * 注：如果运行环境不支持数据库，或者未开启数据库, 执行成功，但不会返回或者操作有效的数据。
     */
    saveMsgsToLocal(options: {
        msgs: NIMMessage[];
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
}
