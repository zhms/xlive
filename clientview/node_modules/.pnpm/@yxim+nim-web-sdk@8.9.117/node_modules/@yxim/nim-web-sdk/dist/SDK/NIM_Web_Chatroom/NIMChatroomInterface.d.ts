import { NIMCommonError, NIMStrAnyObj } from '../types';
import { NIMChatRoomInfo, NIMUpdateChatroomOptions } from './types';
/**
 * Chatroom 实例连接的基础接口定义
 */
export interface NIMChatroomInterface {
    /**
     * 退出登录。
     *
     * 注：SDK 版本 v9.6.0 以下推荐先调用 logout 再调用 disconnect/destroy 来保证退出。v9.6.0 及以上不需要调用这个 API，disconnect/destroy 断开前会自动调用。
     */
    logout(): void;
    /**
     * 断开 Chatroom 连接，但不销毁 Chatroom 实例。调用该函数后，可以调用 connect 再次连接
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.ondisconnect}</li>
     * </ul>
     * <h4>注意事项</h4>
     *
     */
    disconnect(options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     * 使用 disconnect 方法登出IM后，可以调用 connect 重新登录。调用 getInstance 后会自动建立长连接，无需调用 connect。
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.onconnect}</li>
     * </ul>
     *
     * <h4>示例</h4>
     *
     * ```js
     * chatroom.disconnect({
     *   done: function() {
     *     chatroom.connect()
     *   }
     * })
     * ```
     */
    connect(): void;
    /**
     * 断开 Chatroom 连接，并销毁 Chatroom 实例。销毁实例后，无法调用 connect 重新连接。
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li>{@link NIMChatroomGetInstanceOptions.ondisconnect}</li>
     * </ul>
     *
     */
    destroy(options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMStrAnyObj) => void;
    }): void;
    /**
     * 更新当前长连接对应的标签。若调用<a href="https://doc.yunxin.163.com/messaging/docs/TA0NjA1MzY?platform=server#%E4%BF%AE%E6%94%B9%E8%81%8A%E5%A4%A9%E5%AE%A4%E7%94%A8%E6%88%B7%E6%A0%87%E7%AD%BE">服务器接口</a>更新 tags，则会更新指定用户当前所有长连接的标签组
     *
     * <h4>关联函数</h4>
     * <ul>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/DI2MDg3NzU?platform=web">聊天室标签功能</a></li>
     * <li><a href="https://doc.yunxin.163.com/messaging/docs/TA0NjA1MzY?platform=server#%E4%BF%AE%E6%94%B9%E8%81%8A%E5%A4%A9%E5%AE%A4%E7%94%A8%E6%88%B7%E6%A0%87%E7%AD%BE">修改聊天室用户标签</a></li>
     * </ul>
     */
    updateTags(_options: {
        /**
         * 标签。可以设置多个，覆盖式更新，例子：["tag1", "tag2"]；如果要删除，不传即可；若传空数组 就表示用户使用了标签功能，但是不属于任何标签。
         */
        tags?: Array<string>;
        /**
         * 通知标签。是一个标签表达式，用于通知符合规则标签的聊天室成员，例如成员上下线，更新标签的通知。不填或空字符串代表允许通知所有聊天室成员
         */
        notifyTargetTags?: string;
        /**
         * 此更新是否需要通知，默认 false。通知的范围由 notifyTargetTags（注意 notifyTargetTags 可以由聊天室初始化设置）
         */
        needNotify?: true;
        /**
         * 通知的扩展字段，推荐 JSON 格式字符串构建
         */
        ext?: string;
        /**
         * 结果回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 获取聊天室的属性。对应的服务器接口为：
     *
     * <a href="https://doc.yunxin.163.com/messaging/docs/DMyNzgyNDE?platform=server">获取聊天室信息</a>
     */
    getChatroom(_options: {
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMChatRoomInfo) => void;
    }): void;
    /**
     * 聊天室创建者可以调用此接口关闭聊天室。调用后，所有在线成员会被强制踢出下线。对应的服务器接口为：
     *
     * <a href="https://doc.yunxin.163.com/messaging/docs/TI5ODE4NTg?platform=server">开放关闭聊天室</a>
     */
    closeChatroom(_options: {
        custom: string;
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null) => void;
    }): void;
    /**
     * 更新聊天室的信息。对应的服务器接口为：
     *
     * <a href="https://doc.yunxin.163.com/messaging/docs/jI3MDg2MjU?platform=server">更新聊天室信息</a>
     */
    updateChatroom(_options: {
        /**
         * 待更新的聊天室信息
         */
        chatroom: {
            /**
             * 聊天室名字
             */
            name?: string;
            /**
             * 聊天室公告
             */
            announcement?: string;
            /**
             * 直播地址
             */
            broadcastUrl?: string;
            /**
             * 扩展字段
             */
            custom?: string;
            /**
             * 队列管理权限：0:所有人都有权限变更队列，1:只有主播管理员才能操作变更
             */
            queuelevel?: string;
        };
        /**
         * 用户配置的对某些资料内容另外的反垃圾的业务ID
         */
        antiSpamBusinessId?: string;
        /**
         * 是否需要下发对应的通知消息
         */
        needNotify: boolean;
        /**
         * 对应的通知消息的扩展字段
         */
        custom?: string;
        /**
         * 结果回调函数
         */
        done?: (err: NIMCommonError | Error | NIMStrAnyObj | null, data: NIMUpdateChatroomOptions) => void;
    }): void;
}
